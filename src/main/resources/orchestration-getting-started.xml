<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE book [
        <!-- Some useful entities borrowed from HTML -->
        <!ENTITY ndash  "&#x2013;">
        <!ENTITY mdash  "&#x2014;">
        <!ENTITY hellip "&#x2026;">

        <!-- Useful for describing APIs -->
        <!ENTITY GET    '<command xmlns="http://docbook.org/ns/docbook">GET</command>'>
        <!ENTITY PUT    '<command xmlns="http://docbook.org/ns/docbook">PUT</command>'>
        <!ENTITY POST   '<command xmlns="http://docbook.org/ns/docbook">POST</command>'>
        <!ENTITY DELETE '<command xmlns="http://docbook.org/ns/docbook">DELETE</command>'>
        
        <!-- changing authentication endpoints; define entities for US & UK rather than maintaining in text -->
        <!ENTITY ENDPOINT-US "https://identity.api.rackspacecloud.com/v1.1/">
        <!ENTITY ENDPOINT-UK "https://lon.identity.api.rackspacecloud.com/v1.1/">
        <!ENTITY ENDPOINT-US-20 "https://identity.api.rackspacecloud.com/v2.0/">
        <!ENTITY ENDPOINT-UK-20 "https://lon.identity.api.rackspacecloud.com/v2.0/">

        <!-- Useful for specs -->
        <!ENTITY MAY    '<emphasis xmlns="http://docbook.org/ns/docbook" role="strong">MAY</emphasis>'>
        <!ENTITY SHOULD '<emphasis xmlns="http://docbook.org/ns/docbook" role="strong">SHOULD</emphasis>'>
        <!ENTITY MUST   '<emphasis xmlns="http://docbook.org/ns/docbook" role="strong">MUST</emphasis>'>
        <!ENTITY MUST_NOT   '<emphasis xmlns="http://docbook.org/ns/docbook" role="strong">MUST NOT</emphasis>'>
        <!ENTITY Deployment "Cloud Orchestration">
]>

<book version="5.0"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xml:id="orchestration-getting-started">
    
    <?rax title.font.size="35px" subtitle.font.size="20px"?>
    <title>Rackspace Cloud Orchestration Getting Started Guide</title>
    <titleabbrev>Rackspace Cloud Orchestration Getting Started
        Guide</titleabbrev>
     
    <info>
        
        <copyright>
            <year>2012</year>
            <year>2013</year>
            <year>2014</year>
            <year>2015</year>
            <holder>Rackspace US, Inc.</holder>
        </copyright>
        <releaseinfo>API v1.0</releaseinfo>
        <productname>Rackspace Cloud Orchestration</productname>
        <pubdate>2015-02-16</pubdate>
        <legalnotice role="rs-api">
            <annotation>
                <remark>Copyright details are filled in by the template.</remark>
            </annotation>
        </legalnotice>
        <revhistory>
            <revision>
                <date>2015-02-16</date>
                <revdescription>
                    <itemizedlist spacing="compact">
                        <listitem>
                            <para>Edited the document
                                throughout.</para>
                        </listitem>
                        <listitem>
                            <para>Replaced the deprecated <code>1 GB
                                   Performance</code> flavor with
                                   <code>1 GB General Purpose
                                   v1</code> flavor.</para>
                        </listitem>
                        <listitem>
                            <para>Added information about creating a
                                SERVICENET load balancer in <xref
                                   linkend="Update_Stack_W_LB"
                                />.</para>
                        </listitem>
                    </itemizedlist>
                </revdescription>
            </revision>
            <revision>
                <date>2015-02-10</date>
                <revdescription>
                    <itemizedlist spacing="compact">
                        <listitem>
                            <para>Updated image names as
                                needed.</para>
                        </listitem>
                        <listitem>
                            <para>Removed London endpoint, since we
                                now have one global endpoint for the
                                Rackspace Authentication Service. See
                                   <xref
                                   linkend="Generating_Auth_Token"
                                />.</para>
                        </listitem>
                    </itemizedlist>
                </revdescription>
            </revision>
            <revision>
                <date>2014-12-17</date>
                <revdescription>
                    <itemizedlist spacing="compact">
                        <listitem>
                            <para>Updated templates to have latest
                                template version:</para>
                            <para><code>heat_template_version:
                                   2014-10-16</code></para>
                        </listitem>
                    </itemizedlist>
                </revdescription>
            </revision>
            <revision>
                <date>2014-11-24</date>
                <revdescription>
                    <itemizedlist spacing="compact">
                        <listitem>
                            <para>Updated environment variables for
                                running cURL commands. See <xref
                                   linkend="Export_CURL_ENV_VARS"
                                />.</para>
                        </listitem>
                    </itemizedlist>
                </revdescription>
            </revision>
            <revision>
                <date>2014-11-21</date>
                <revdescription>
                    <itemizedlist spacing="compact">
                        <listitem>
                            <para>Updated cURL examples for <xref
                                   linkend="Create_Stack_W_RGroup_CURL"
                                /> and <xref
                                   linkend="Update_Stack_W_LB_Curl"
                                />.</para>
                        </listitem>
                    </itemizedlist>
                </revdescription>
            </revision>
            <revision>
                <date>2014-10-28</date>
                <revdescription>
                    <itemizedlist spacing="compact">
                        <listitem>
                            <para>Updated the document to add
                                OS_REGION_NAME environment variable
                                and remove the HEAT_URL for the heat
                                client.</para>
                        </listitem>
                    </itemizedlist>
                </revdescription>
            </revision>
            <revision>
                <date>2014-10-07</date>
                <revdescription>
                    <itemizedlist spacing="compact">
                        <listitem>
                            <para>Updated the document for initial
                                Unlimited Availability (UA)
                                release.</para>
                        </listitem>
                    </itemizedlist>
                </revdescription>
            </revision>
            <revision>
                <date>2014-08-01</date>
                <revdescription>
                    <itemizedlist spacing="compact">
                        <listitem>
                            <para>Updated information about choosing
                                which regionalized endpoint to use in
                                   <xref
                                   linkend="Service_Access_Endpoints-d1e753"
                                />.</para>
                        </listitem>
                    </itemizedlist>
                </revdescription>
            </revision>
            <revision>
                <date>2014-07-23</date>
                <revdescription>
                    <itemizedlist spacing="compact">
                        <listitem>
                            <para>Added information about choosing
                                which regionalized endpoint to use in
                                   <xref
                                   linkend="Service_Access_Endpoints-d1e753"
                                />.</para>
                        </listitem>
                    </itemizedlist>
                </revdescription>
            </revision>
            <revision>
                <date>2014-05-08</date>
                <revdescription>
                    <itemizedlist spacing="compact">
                        <listitem>
                            <para linkend="Install_Heat_Client"
                                >Updated the link to the Python
                                installation for Windows and Mac users
                                in <xref linkend="Install_Heat_Client"
                                />.</para>
                        </listitem>
                    </itemizedlist>
                </revdescription>
            </revision>
            <revision>
                <date>2014-03-17</date>
                <revdescription>
                    <itemizedlist spacing="compact">
                        <listitem>
                            <para>Updated examples to use Performance
                                instances for Cloud Servers.</para>
                        </listitem>
                    </itemizedlist>
                </revdescription>
            </revision>
            <revision>
                <date>2014-03-14</date>
                <revdescription>
                    <itemizedlist spacing="compact">
                        <listitem>
                            <para>Updated examples for Show Stack
                                Details in <xref
                                   linkend="Show_Stack_Details"/> and
                                   <xref linkend="Update_Stack_W_LB"
                                />.</para>
                        </listitem>
                    </itemizedlist>
                </revdescription>
            </revision>
            <revision>
                <date>2014-03-13</date>
                <revdescription>
                    <itemizedlist spacing="compact">
                        <listitem>
                            <para>Updated <xref
                                   linkend="heat_summary_stack_resources"
                                />.</para>
                        </listitem>
                    </itemizedlist>
                </revdescription>
            </revision>
            <revision>
                <date>2014-03-12</date>
                <revdescription>
                    <itemizedlist spacing="compact">
                        <listitem>
                            <para>Updated examples to use CentOS 6.5
                                (since CentOS 6.4 is no longer
                                supported).</para>
                        </listitem>
                        <listitem>
                            <para>Added note about copying template
                                examples in <xref
                                   linkend="Create_Simple_Stack_CS"
                                />.</para>
                        </listitem>
                    </itemizedlist>
                </revdescription>
            </revision>
            <revision>
                <date>2014-03-11</date>
                <revdescription>
                    <itemizedlist spacing="compact">
                        <listitem>
                            <para>Initial release.</para>
                            <para>.</para>
                        </listitem>
                    </itemizedlist>
                </revdescription>
            </revision>           
        </revhistory>
    <raxm:metadata xmlns:raxm="http://docs.rackspace.com/api/metadata">
      <raxm:displayname>Getting Started Guide</raxm:displayname>
      <raxm:product version="v1">orchestration</raxm:product>
      <raxm:priority>10</raxm:priority>
    </raxm:metadata> 
    </info>
    <chapter xml:id="Orch_Overview">
        <title>Overview</title>
        <para>Follow the steps described in this guide to use the
            Rackspace Cloud Orchestration API to create and access
            your stacks.</para>
        
        <para>The simple exercises in this guide help you get started
            with the API by showing you how to access the API through
            either heat client commands or cURL commands. </para>
        <para>For each exercise in this guide, you choose one of the
            following methods to call API operations: <itemizedlist>
                <listitem>
                    <para><emphasis role="bold">heat client
                            commands</emphasis>. The heat client
                        provides easy command line access to the Cloud
                        Orchestration API operations. We recommend
                        that you use the heat client to run simple
                        commands that call API operations. You can
                        specify the <code>--debug</code> parameter on
                        any heat command to show the underlying cURL
                        request for the API operation. This is a good
                        way to become familiar with the API requests.
                        For details see <xref linkend="heatclient"
                        />.</para>
                </listitem>
                <listitem>
                    <para><emphasis role="bold"><link
                                xlink:href="http://curl.haxx.se/"
                                >cURL</link> commands</emphasis>. If
                        you are familiar with or want to learn cURL
                        commands, choose this method. With cURL, you
                        send HTTP requests with embedded API
                        operations from the command line. The cURL
                        examples in this guide include request bodies
                        in JSON format. For details see <xref
                            linkend="curl"/>.</para>
                </listitem>
            </itemizedlist>If you like, you can use cURL in one
            example and then use heat client commands in the next
            example. If you choose to use a cURL command for any
            example, you must export the environment variables
            required to run the cURL examples. For details see <xref
                linkend="Export_CURL_ENV_VARS"/>. </para>
        
        <para>To use the API, it helps to be familiar with HTTP 1.1,
            RESTful web services, the Rackspace Cloud Servers service,
            and JSON data serialization format.</para>
        
        
       
        <section xml:id="Additional_Info-dle5378">
            <title>Additional sources of information</title>
            <para>For details about using the Cloud Orchestration API,
                see the <citetitle>Cloud Orchestration Developer
                    Guide</citetitle> at <link
                    xlink:href="http://docs.rackspace.com/"
                    >http://docs.rackspace.com/</link>.</para>
            <para>For information about understanding templates for
                the Cloud Orchestration API, see the <citetitle>Cloud
                    Orchestration Templates Developer
                    Guide</citetitle> at <link
                    xlink:href="http://docs.rackspace.com/"
                    >http://docs.rackspace.com/</link>.</para>
            <para>You can send issues and bug reports to your support
                team via ticket, chat, email, or phone.</para>
            <para security="writeronly">For more details about Rackspace Cloud
                Orchestration, refer to <link
                    xlink:href="http://www.rackspace.com/cloud/orchestration/"
                    >http://www.rackspace.com/cloud/orchestration/</link>.
                This site also offers links to Rackspace's official
                support channels, including knowledge center articles,
                forums, phone, chat, and email. </para>
            <remark>Reviewer: is the link and descriptive text above
                correct for product launch?</remark>
            <para security="writeronly">Please visit our <link
                    xlink:href="http://feedback.rackspacecloud.com/forums/71021-product-feedback/category/42449-cloud-databases"
                    >Product Feedback Forum</link> and let us know
                what you think about Cloud Orchestration!</para>
            <remark>Hiding text above for the Product Feedback Forum
                until we are able to get the correct link.</remark>
        </section>
        
        <section xml:id="Prerequisites_Examples">
            <title>Prerequisites for running examples</title>
            <para>To run the examples in this guide, you must have the
                following prerequisites: <itemizedlist
                    spacing="compact">
                    <listitem>
                        <para>Rackspace Cloud account</para>
                    </listitem>
                    <listitem>
                        <para>Rackspace Cloud username and password,
                            as specified during registration</para>
                    </listitem>
                </itemizedlist></para>
        </section>
        
        <section xmlns="http://docbook.org/ns/docbook"
            xmlns:xi="http://www.w3.org/2001/XInclude"
            xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0"
            xml:id="heatclient">
            <title>How the heat client commands work</title>
            <para>The heat client is an open-source Python client that
                you can use to run simple commands to call API
                operations. This client is easy to learn and use. Each
                heat client command runs cURL commands that embed API
                requests. You can run the heat client from a computer
                or a remote system, such as a cloud server. </para>
            <para>You install the heat client on a Linux distribution
                or on Mac OS X. Instructions are provided in <xref
                    linkend="Install_Heat_Client"/>. </para>
            <para>To configure the heat client, you update your
                .bash_profile file (or .bashrc) to set and export heat
                environment variables. </para>
            <note>
                <para>You can specify the <code>--debug</code>
                    parameter on any heat command to show the
                    underlying API request for the command. This is a
                    good way to become familiar with the API requests. </para>
            </note>
            <para>Rackspace does not maintain the heat client, which
                is considered to be software in development. </para>
        </section>
        
        <section xmlns="http://docbook.org/ns/docbook"
            xmlns:xi="http://www.w3.org/2001/XInclude"
            xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0"
            xml:id="curl">
            <title>How cURL commands work</title>
            <para>cURL is a command-line tool that you can use to
                interact with <glossterm>REST</glossterm> interfaces.
                cURL enables you to transmit and receive
                    <glossterm>HTTP</glossterm> requests and responses
                from the command line or a shell script, which enables
                you to work with the API directly. It is available for
                Linux distributions, Mac OS X, and Windows. For
                information about cURL, see <link
                    xlink:href="http://curl.haxx.se/"
                    >http://curl.haxx.se/</link>. </para>
            
            <para>To run the cURL request examples shown in this guide, copy
                each example from the HTML version of this guide directly to
                the command line or a script.</para>
            
            <para>The following command is an example cURL command for
                a JSON request that provisions a server with an
                isolated network.</para>
            
            <example xml:id="JSON_Example">
                <title>cURL command example: JSON request </title><programlisting language="bash" role="gutter: false"><?db-font-size 60%?><prompt>$</prompt> curl https://dfw.servers.api.rackspacecloud.com/v2/$OS_TENANT_ID/servers \
       -X POST \
       -H "X-Auth-Project-Id: $OS_TENANT_ID" \
       -H "Content-Type: application/json" \
       -H "Accept: application/json" \
       -H "X-Auth-Token: $OS_AUTH_TOKEN" \
       -d '{"server": {"name": "my_server_with_network", "imageRef": "d42f821e-c2d1-4796-9f07-af5ed7912d0e", "flavorRef": "2", "max_count": 1, "min_count": 1, "networks": [{"uuid": "538a112a-34d1-47ff-bf1e-c40639e886e2"}, {"uuid": "00000000-0000-0000-0000-000000000000"}, {"uuid": "11111111-1111-1111-1111-111111111111"}]}}' \
      | python -m json.tool</programlisting></example>
            <note>
                <para>The carriage returns in the cURL request examples are
                    escaped with a backslash (<literal>\</literal>) character.
                    The escape character allows continuation of the command
                    across multiple lines. However, do not include the escape
                    character in the JSON or XML request body within the cURL
                    command.</para>
            </note>
            <?hard-pagebreak?>
            
        </section>
        <section xml:id="Pricing_SLA-d1e1362">
            <title>Pricing and service level</title>
            <para>&Deployment; is part of the Rackspace Cloud.
                Although you will not be billed for using
                &Deployment;, you are billed for the stack resources
                you create when using &Deployment;.</para>
            <para security="writeronly">&Deployment; is part of the Rackspace Cloud and your
                use through the API will be billed as per the pricing
                schedule at <link
                    xlink:href="http://www.rackspace.com/cloud/orchestration/pricing/"
                    >http://www.rackspace.com/cloud/orchestration/pricing/</link>.</para>
            <remark>Reviewer: Please verify that the pricing
                information shown above is correct for product
                launch.</remark>
            <para>&Deployment; is a Non-Standard Rackspace Service.
                Applicable SLAs for the underlying infrastructure
                apply for successfully launched cloud products.</para>
            <para security="writeronly">The Service Level Agreement (SLA) for &Deployment;
                is available at <link
                    xlink:href="http://www.rackspace.com/information/legal/cloud/sla#cloud_orchestration"
                    >http://www.rackspace.com/information/legal/cloud/sla#cloud_orchestration</link>.</para>
            <remark>Reviewer: Please verify that the link shown above
                will be correct for product launch.</remark>
        </section>
    </chapter>
    <chapter xml:id="Create_Cloud_Orchestration"><title>Create your first cloud orchestration</title>
        <section xml:id="Install_Heat_Client">
            <title>Step 1. Install the heat client</title>
            <para>To manage your stacks from the command line, you can
                use the open-source heat client application. </para>
            <para audience="gsonly">If you want to run the cURL
                examples instead, skip to <xref
                    linkend="DB_Sending_API_Requests"/>. </para>
            <para>To install the heat client, you first install the
                    <literal>python-heatclient</literal> package. </para>
            <note>
                <para>The heat client is not maintained by Rackspace
                    and should be considered software in development. </para>
                <para>You can submit issues with the client at <link
                        xlink:href="https://bugs.launchpad.net/python-heatclient"
                        >https://bugs.launchpad.net/python-heatclient</link>.</para>
            </note>
            <para>Before you begin, install the following prerequisite
                    software:<table rules="all" width="90%">
                    <caption>heat client prerequisite
                        software</caption>
                    <col width="25%"/>
                    <col width="75%"/>
                    <thead>
                        <tr>
                            <th>Prerequisite</th>
                            <th>Description</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td valign="top">
                                <para>Python 2.7 or later</para>
                            </td>
                            <td>
                                <para>Currently, the heat client is
                                   tested with Python 2.7. </para>
                                <procedure>
                                   <title>To determine if Python 2.7
                                   is installed on your
                                   computer:</title>
                                   <step>
                                   <para> Open a shell terminal (or a
                                   command prompt on Windows), type
                                   <code>python</code>, and press
                                   <emphasis role="bold"
                                   >Enter</emphasis>. </para>
                                   </step>
                                   <step>
                                   <para> If you see output similar to
                                   the following output, Python is
                                   installed. The first line in the
                                   output shows the installed Python
                                   version: </para>
                                   <programlisting><emphasis role="italic">Python <emphasis role="bold">2.7</emphasis>.1</emphasis>  (r271:86832, Aug  5 2011, 03:30:24) 
[GCC 4.2.1 (Based on Apple Inc. build 5658) (LLVM build 2335.15.00)] on darwin 
Type "help", "copyright", "credits" or "license" for more information. 
&gt;&gt;&gt;  </programlisting>
                                   <note>
                                   <para> To exit the Python
                                   interpreter prompt, type
                                   <code>exit()</code>. </para>
                                   </note>
                                   </step>
                                   <step>
                                   <para> If the version information
                                   displayed does not start with 2.7,
                                   you need to install Python 2.7. Use
                                   the following procedure to install
                                   it.</para>
                                   </step>
                                </procedure>
                                <procedure>
                                   <title>To install Python
                                   2.7:</title>
                                   <step>
                                   <para> Run the following command
                                   following to install Python 2.7 on
                                   Ubuntu Linux:</para>
                                   <programlisting>sudo apt-get install python2.7-dev</programlisting>
                                   <note><title>Notes</title>
                                   <itemizedlist>
                                   <listitem>
                                   <para>On Windows and Mac OS X,
                                   download the Python 2.7
                                   installation file from <link
                                   xlink:href="https://www.python.org/download/releases/2.7"
                                   >https://www.python.org/download/releases/2.7</link>
                                   and install it. Be sure to choose
                                   the latest release available, as
                                   listed in a note near the top of
                                   the web page.</para>
                                   </listitem>
                                   <listitem>
                                   <para>On Ubuntu, if the command
                                   preceding is not recognized, you
                                   might need to first run
                                   <code>apt-get update</code> before
                                   you run <code>apt-get
                                   install</code>.</para>
                                   </listitem>
                                   </itemizedlist>
                                   </note>
                                   </step>
                                </procedure>
                            </td>
                        </tr>
                        <tr>
                            <td valign="top">
                                <para><command>setuptools</command>
                                   package </para>
                            </td>
                            <td>
                                <para>Installed by default on Mac OS
                                   X. </para>
                                <para>Many Linux distributions provide
                                   packages to make
                                   <command>setuptools</command> easy
                                   to install.</para>
                                <para>Search your package manager for
                                   <command>setuptools</command> to
                                   find an installation package. If
                                   you cannot find one, download the
                                   <command>setuptools</command>
                                   package directly from <link
                                   xlink:href="http://pypi.python.org/pypi/setuptools"
                                   >http://pypi.python.org/pypi/setuptools</link>.
                                </para>
                            </td>
                        </tr>
                        <tr>
                            <td valign="top"><command>pip</command>
                                package</td>
                            <td>
                                <para>To install the heat client on a
                                   Mac OS X or Linux system, use
                                   <command>pip</command> because it
                                   ensures that you get the latest
                                   version of the heat client from the
                                   <link
                                   xlink:href="https://pypi.python.org/pypi/python-heatclient/"
                                   >Python Package Index</link>. Also,
                                   it lets you update the package
                                   later.</para>
                                <para>If <command>pip</command> is not
                                   installed, install it through the
                                   package manager for your system:<itemizedlist>
                                   <listitem>
                                   <para>Mac OS X
                                   <programlisting language="bash" role="gutter: false"><prompt>$</prompt> sudo easy_install pip</programlisting></para>
                                   </listitem>
                                   <listitem>
                                   <para>Ubuntu
                                   <programlisting language="bash" role="gutter: false"><prompt>$</prompt> apt get install python-pip </programlisting></para>
                                   <note>
                                   <para>On Ubuntu, if the command
                                   preceding is not recognized, you
                                   might need to first run
                                   <code>apt-get update</code> before
                                   you run <code>apt-get
                                   install</code>.</para>
                                   </note>
                                   </listitem>
                                   <listitem>
                                   <para>Debian
                                   <programlisting language="bash" role="gutter: false"><prompt>$</prompt> aptitude install python-pip </programlisting></para>
                                   </listitem>
                                   <listitem>
                                   <para>Fedora
                                   <programlisting language="bash" role="gutter: false"><prompt>$</prompt> yum install python-pip</programlisting></para>
                                   </listitem>
                                   <listitem>
                                   <para>CentOS, or Red Hat Enterprise
                                   Linux (from EPEL or another
                                   third-party repository)
                                   <programlisting language="bash" role="gutter: false"><prompt>$</prompt> yum install python-pip</programlisting></para>
                                   </listitem>
                                   </itemizedlist>
                                </para>
                                <note><title>Note for Windows Users</title>
                                   <para>If you installed python from
                                   <link
                                   xlink:href="http://www.activestate.com/activepython/downloads"
                                   >http://www.activestate.com/activepython/downloads</link>
                                   then <command>setuptools</command>
                                   and <command>pip</command> are
                                   already installed on your computer. </para>
                                   <para>If you installed python from
                                   <link
                                   xlink:href="http://www.python.org/getit/"
                                   >http://www.python.org/getit/</link>,
                                   follow these instructions to set up
                                   your environment:</para>
                                   <orderedlist>
                                   <listitem>
                                   <para>If python was not in your
                                   path, run the following command to
                                   add it to the path set:
                                   <command>PATH=%PATH%;c:\python27;c:\python27\scripts</command>.
                                   Here, <code>c:\python27</code> is
                                   the python installation directory.
                                   If it is different on your
                                   computer,  change it to the correct
                                   directory.</para>
                                   </listitem>
                                   <listitem>
                                   <para>Install the appropriate
                                   version of
                                   <command>setuptools</command> for
                                   python2.7 from <link
                                   xlink:href="http://www.lfd.uci.edu/~gohlke/pythonlibs/#setuptools"
                                   >http://www.lfd.uci.edu/~gohlke/pythonlibs/#setuptools</link>.
                                   If you have installed the 32-bit
                                   version of python2.7, install
                                   <code>setuptools-2.0.2.win32-py2.7.exe</code>,
                                   and if you have the installed
                                   64-bit version of python2.7, then
                                   install
                                   <code>setuptools-2.0.2.win-amd64-py2.7.exe</code>.</para>
                                   </listitem>
                                   <listitem>
                                   <para>Install the appropriate
                                   version (win32/amd64) of the pip
                                   utility for python2.7 from <link
                                   xlink:href="http://www.lfd.uci.edu/~gohlke/pythonlibs/#pip"
                                   >http://www.lfd.uci.edu/~gohlke/pythonlibs/#pip</link>. </para>
                                   </listitem>
                                   </orderedlist>
                                </note>
                            </td>
                        </tr>
                    </tbody>
                </table></para>
            <?hard-pagebreak?>
            <procedure>
                <title>To install the heat client</title>
                <step>
                    <title>Install or update the heat client
                        package</title>
                    <para>The <literal>python-heatclient</literal>
                        package contains the heat client. </para>
                    <para>To install the
                            <literal>python-heatclient</literal>
                        package, run the following command for your
                        operating system:</para>
                    <para>For Ubuntu, Debian, or OS X: </para>
                    <programlisting language="bash" role="gutter: false"><prompt>$</prompt> sudo pip install python-heatclient</programlisting>
                    <para>For Red Hat Enterprise Linux, CentOS, or
                        Fedora: </para>
                    <programlisting language="bash" role="gutter: false"><prompt>$</prompt> sudo python-pip install python-heatclient</programlisting>
                    
                    <para>For Windows: </para>
                    <para>Start the command prompt as an administrator
                        user and then run following command:</para>
                    <programlisting language="bash" role="gutter: false"><prompt>$</prompt> pip install python-heatclient</programlisting>
                    <note>
                        <para>If you previously installed the
                                <literal>python-heatclient</literal>
                            package, run the following command for
                            your operating system to upgrade
                            it:</para>
                        <para> For Ubuntu, Debian, or OS X:
                            <programlisting language="bash" role="gutter: false"><prompt>$</prompt> sudo pip install --upgrade python-heatclient</programlisting>
                            For RHEL, CentOS, or Fedora:
                            <programlisting language="bash" role="gutter: false"><prompt>$</prompt> sudo python-pip install --upgrade python-heatclient</programlisting>
                            For Windows, start the command prompt as
                            an administrator user and then run
                            following command:
                            <programlisting language="bash" role="gutter: false"><prompt>$</prompt> pip install --upgrade python-heatclient</programlisting>
                        </para>
                    </note>
                </step>
                <step>
                    <title>Set environment variables</title>
                    <para>Edit your <code>.bash_profile</code> file or
                            <code>.bashrc</code> file (whichever is
                        used in your environment) to add and set
                        environment variables that enable the heat
                        client to connect to your Rackspace Cloud
                        account. Use nano or a text editor of your
                        choice to edit your the file.</para>
                    <programlisting language="bash" role="gutter: false"><prompt>$</prompt> nano ~/.bash_profile </programlisting>
                    <para audience="gs">Add the following sets of
                        lines to your bash profile and save the file.
                        Information about the environment variables is
                        provided after the examples.<example>
                            <title>Set environment variables
                                example</title>
                            <?dbfo keep-together="always"?>
                            <screen><?db-font-size 65%?>export OS_AUTH_URL=https://identity.api.rackspacecloud.com/v2.0/
export OS_USERNAME=<emphasis>yourUserName</emphasis>
export OS_TENANT_ID=<emphasis>yourTenantId</emphasis>
export OS_REGION_NAME=<emphasis>yourRegionName</emphasis>
export OS_PASSWORD=<emphasis>yourPassword</emphasis>
</screen>
                        </example>
                    </para>
                    <note>
                        <title>Note for Windows users</title>
                        <para>For Windows: <orderedlist>
                                <listitem>
                                   <para>Run the following commands to
                                   set the required environment
                                   variables in the current command
                                   prompt (these environment variables
                                   will be lost after the command
                                   prompt is closed):
                                   <screen>set OS_AUTH_URL=https://identity.api.rackspacecloud.com/v2.0/ 
set OS_USERNAME=<emphasis>yourUserName</emphasis>
set OS_TENANT_ID=<emphasis>yourTenantId</emphasis>
set OS_REGION_NAME=<emphasis>yourRegionName</emphasis>
set OS_PASSWORD=<emphasis>yourPassword</emphasis></screen>
                                   </para>
                                </listitem>
                                <listitem>
                                   <para>To persist these settings,
                                   add them to system environment
                                   variables by clicking
                                   <guilabel>Start</guilabel>, then
                                   right-clicking
                                   <guilabel>Computer</guilabel>, and
                                   selecting
                                   <guilabel>Properties</guilabel>.
                                   Click <guilabel>Advanced System
                                   Settings</guilabel>. You might need
                                   to confirm a User Account Control
                                   prompt. Then click the
                                   <guibutton>Environment
                                   Variables</guibutton>
                                   button.</para>
                                </listitem>
                            </orderedlist></para>
                    </note>
                    <para audience="admin">In the environment
                        variables preceding, <code>username</code>,
                            <code>password</code>, and
                            <code>tenant_id</code> refer to your
                        Rackspace cloud account username, password,
                        and tenant_id, respectively. Edit the values
                        for <code>username</code>,
                            <code>password</code>,
                            <code>tenant_id</code> to provide your
                        information as appropriate. Also set the
                        OS_REGION_NAME endpoint to the appropriate
                        regional endpoint where you want to deploy
                        resources, for example DFW. For details see
                            <xref
                            linkend="Service_Access_Endpoints-d1e753"
                        />. Remember to source the file containing the
                        environment variables after editing (for
                        example: <code>source .bashrc</code>) so that
                        the new settings will take effect immediately. </para>
                    <para audience="admin">The following table
                        describes the environment variables: <table
                            xml:id="Heat_Client_Env_Vars" rules="all"
                            width="100%">
                            <caption>heat client environment
                                variables</caption>
                            <col width="25%"/>
                            <col width="75%"/>
                            <thead>
                                <tr>
                                   <th>Environment Variable</th>
                                   <th>Description</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                   <td>OS_AUTH_URL</td>
                                   <td>
                                   <para>The endpoint for the
                                   Rackspace Cloud Identity service,
                                   which the heat client uses for
                                   authentication. </para>
                                   </td>
                                </tr>
                                <tr>
                                   <td>OS_USERNAME</td>
                                   <td>Your Rackspace Cloud user
                                   name.</td>
                                </tr>
                                <tr>
                                   <td>OS_TENANT_ID</td>
                                   <td>Your Rackspace Cloud tenant ID
                                   (account number).</td>
                                </tr>
                                <tr>
                                   <td>OS_REGION_NAME</td>
                                   <td>The regional endpoint (for
                                   example DFW) where you want to
                                   deploy the &Deployment; resources.
                                   For details, see <xref
                                   linkend="Service_Access_Endpoints-d1e753"
                                   />.</td>
                                </tr>
                                <tr>
                                   <td>OS_PASSWORD</td>
                                   <td>Your Rackspace Cloud
                                   password.</td>
                                </tr>
                            </tbody>
                        </table></para>
                    <para>Edit the values for the placeholders in the
                        examples for your <code>.bash_profile</code>
                        file or <code>.bashrc</code> file (whichever
                        is used in your environment) to provide your
                        information as appropriate. </para>
                    <note>
                        <title>Note for Windows users</title>
                        <para>For Windows, steps 3 and 4 following are
                            not applicable.</para>
                    </note>
                </step>
                <step>
                    <title>Set permissions on the bash profile or
                        .bashrc file</title>
                    <para>Because the bash profile (or .bashrc)
                        contains a password, set permissions on it so
                        other people cannot read it:</para>
                    <programlisting language="bash" role="gutter: false"><prompt>$</prompt> chmod 600 ~/.bash_profile </programlisting>
                </step>
                <step>
                    <title>Source the environment variables</title>
                    <para>You must source the variables to make them
                        available in your current shell.</para>
                    <para>If you set your environment variables in the
                            <code>.bash_profile</code> file, run the
                        following command:</para>
                    <programlisting language="bash" role="gutter: false"><prompt>$</prompt> source ~/.bash_profile </programlisting>
                    <para>If you set your environment variables in the
                            <code>.bashrc</code> file, run the
                        following command:</para>
                    <programlisting language="bash" role="gutter: false"><prompt>$</prompt> source ~/.bashrc </programlisting>
                </step>
                <step>
                    <title>Test the heat client</title>
                    <para>To verify that you can talk to the API
                        server, authenticate, and list
                        stacks:<programlisting language="bash" role="gutter: false"><prompt>$</prompt> heat stack-list </programlisting></para>
                </step>
                <step>
                    <title>Get help for heat client commands</title>
                    <para>To get help for heat client commands, run
                        the following command:</para>
                    <programlisting language="bash" role="gutter: false"><prompt>$</prompt> heat help </programlisting>
                    <para>To get help for a specific command, type the
                        command name after the
                            <parameter>help</parameter> parameter, as
                        follows:</para>
                    <programlisting language="bash" role="gutter: false"><prompt>$</prompt> heat help <emphasis>commandName</emphasis> </programlisting>
                    <note>
                        <para>To show and become familiar with the
                            underlying API request for a command,
                            specify the <literal>--debug</literal>
                            parameter as the first parameter on any
                            command. For example:
                            <programlisting language="bash" role="gutter: false"><prompt>$</prompt> heat --debug stack-list</programlisting></para>
                    </note>
                    <para>If you can run the heat commands
                        successfully, skip the following
                        Troubleshooting step. Otherwise, continue to
                        the Troubleshooting step.</para>
                </step>
                <step>
                    <title>Troubleshoot issues</title>
                    <para>Rackspace does not maintain the heat client,
                        which is considered to be software in
                        development. However, if you experience issues
                        with installing and running the client, try
                        the following steps: </para>
                    <itemizedlist>
                        <listitem>
                            <para>If you cannot run commands
                                successfully, make sure that you
                                entered your user name, password, and
                                tenant ID correctly in the
                                   <code>.bash_profile</code>  or
                                   <code>.bashrc</code> file. </para>
                        </listitem>
                        <listitem>
                            <para>Enter the <command>heat --debug
                                   stack-list</command> command and
                                check the corresponding cURL command
                                that is displayed to confirm that your
                                settings for user name, password, and
                                tenant ID are correct.  If not, you
                                need to correct the settings you saved
                                to the <code>.bash_profile</code> file
                                or <code>.bashrc</code> file, source
                                the file, and retry the command. </para>
                        </listitem>
                        <listitem>
                            <para>If you need to change any
                                environment variables, either log out
                                and back in or source your
                                   <code>.bash_profile</code> or
                                   <code>.bashrc</code> file. </para>
                        </listitem>
                        <listitem>
                            <para>To override some environment
                                variable settings, you can use the
                                options that are listed at the end of
                                the <command>heat help</command>
                                output. For example, you can override
                                the <literal>OS_PASSWORD</literal>
                                setting in the
                                   <code>.bash_profile</code> by
                                specifying a password on a heat
                                command, as follows: </para>
                            <programlisting language="bash" role="gutter: false"><prompt>$</prompt> heat --os-password <emphasis>password</emphasis> stack-list </programlisting>
                            <para><emphasis>password</emphasis> is
                                your Rackspace Cloud password.</para>
                        </listitem>
                    </itemizedlist>
                </step>
            </procedure>
            <para>If you are using only the heat client commands and
                aren't using cURL commands, skip to <xref
                    linkend="Create_Simple_Stack_CS"/>.</para>
        </section>
        <section xml:id="DB_Sending_API_Requests">
            <title>Step 2. Send requests to the API using cURL,
                Firefox, or rest-client</title>
            <para>You have several options for sending requests
                through an API: </para>
            <itemizedlist spacing="compact">
                <listitem>
                    <para>Developers and testers might prefer to use
                        cURL, the command-line tool from <link
                            xlink:href="http://curl.haxx.se/"
                            >http://curl.haxx.se/</link>. </para>
                    <para>With cURL you can send HTTP requests and
                        receive responses back from the command line.
                    </para>
                </listitem>
                <listitem>
                    <para>If you like to use a more graphical
                        interface, the ReST client for Firefox also
                        works well for testing and trying out
                        commands. See <link
                            xlink:href="https://addons.mozilla.org/en-US/firefox/addon/restclient/"
                            >https://addons.mozilla.org/en-US/firefox/addon/restclient/</link>. </para>
                </listitem>
                <listitem>
                    <para>You can also download and install
                        rest-client, a Java application for testing
                        RESTful web services, from <link
                            xlink:href="http://code.google.com/p/rest-client/"
                            >http://code.google.com/p/rest-client/</link>. </para>
                </listitem>
            </itemizedlist>
            <section xml:id="DB_using-curl-cli">
                <title>Send API requests by using cURL</title>
                <para>cURL is a command-line tool that is available on
                    most UNIX system-based and Mac OS X systems, and
                    can be downloaded for Windows, to interact with
                    REST interfaces. For more information about cURL,
                    visit <link xlink:href="http://curl.haxx.se/"
                        >http://curl.haxx.se/</link>. </para>
                <para>cURL enables you to transmit and receive HTTP
                    requests and responses from the command line or
                    from within a shell script. As a result, you can
                    work with the REST API directly without using one
                    of the client APIs. </para>
                <para>The following cURL command-line options are used
                    in this guide to run the examples.</para>
                <table xml:id="curl-options" rules="all" width="75%">
                    <caption>cURL command-line options</caption>
                    <thead>
                        <tr>
                            <th>Option</th>
                            <th>Description</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>
                                <option>-d</option>
                            </td>
                            <td>
                                <para>Sends the specified data in a
                                   &POST; request to the HTTP server.
                                   Use this option to send a JSON or
                                   XML request body to the
                                   server.</para>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <option>-H</option>
                            </td>
                            <td>
                                <para>Specifies an extra HTTP header
                                   in the request. You can specify any
                                   number of extra headers. Precede
                                   each header with the
                                   <option>-H</option> option. </para>
                                <para>Common headers in Rackspace API
                                   requests are as follows:<itemizedlist>
                                   <listitem>
                                   <para><literal>Content-Type</literal>.
                                   Required for operations with a
                                   request body. </para>
                                   <para>Specifies the format of the
                                   request body. The syntax for the
                                   <literal>Content-Type</literal>
                                   header is as follows:</para>
                                   <screen><computeroutput>Content-Type: application/<parameter>format</parameter></computeroutput></screen>
                                   <para><parameter>format</parameter>
                                   is either <literal>json</literal>
                                   or <literal>xml</literal>.</para>
                                   </listitem>
                                   <listitem>
                                   <para><literal>X-Auth-Project-Id</literal>.
                                   Optional. Specifies the project ID,
                                   which can be your account number or
                                   another value.</para>
                                   </listitem>
                                   <listitem>
                                   <para><literal>Accept</literal>.
                                   Optional. </para>
                                   <para>Specifies the format of the
                                   response body. The syntax for the
                                   <literal>Accept</literal> header is
                                   as follows:</para>
                                   <screen><computeroutput>Accept: application/<parameter>format</parameter></computeroutput></screen>
                                   <para><parameter>format</parameter>
                                   is either <literal>json</literal>
                                   or <literal>xml</literal>. The
                                   default is
                                   <literal>json</literal>.</para>
                                   </listitem>
                                   <listitem>
                                   <para><literal>X-Auth-Token</literal>.
                                   Required. Specifies the
                                   authentication token.</para>
                                   </listitem>
                                   </itemizedlist></para>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <option>-i</option>
                            </td>
                            <td>
                                <para>Includes the HTTP header in the
                                   output. </para>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <option>-s</option>
                            </td>
                            <td>
                                <para>Silent or quiet mode. Progress
                                   and error messages are not shown,
                                   and cURL is mute. </para>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <option>-T</option>
                            </td>
                            <td>
                                <para>Transfers the specified local
                                   file to the remote URL.</para>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <option>-X</option>
                            </td>
                            <td>
                                <para>Specifies the request method to
                                   use when communicating with the
                                   HTTP server. The specified request
                                   is used instead of the default
                                   method, which is &GET;. </para>
                            </td>
                        </tr>
                    </tbody>
                </table>
                <note xml:id="json-tool">
                    <title>json.tool</title>
                    <para>For commands that return a response, you can
                        append the following code to the command to
                        call the json.tool to pretty-print output: </para>
                    <programlisting language="bash" role="gutter: false">| python -m json.tool</programlisting>
                    <para>To use the json.tool, import the json
                        module. For information about the json.tool,
                        see <link
                            xlink:href="http://docs.python.org/2/library/json.html"
                            >json — JSON encoder and decoder</link>. </para>
                    <para>If you run a Python version earlier than
                        2.6, import the simplejson module and use the
                        simplejson.tool. For information about the
                        simple.json tool, see <link
                            xlink:href="http://simplejson.googlecode.com/svn/tags/simplejson-2.0.9/docs/index.html"
                            >simplejson — JSON encoder and
                            decoder</link>.</para>
                    <para>If you do not want to pretty-print JSON
                        output, omit this code. </para>
                </note>
            </section>
            <section xml:id="DB_copy_paste_examples">
                <title>Copying and pasting cURL request examples into
                    a terminal window</title>
                <para>To run the cURL request examples shown in this
                    guide on Linux or Mac systems, perform the
                    following steps:</para>
                <orderedlist>
                    <listitem>
                        <para>Select the example from the HTML version
                            of this guide by clicking the <emphasis
                                role="bold">Select Text</emphasis>
                            icon to the right of the example. </para>
                    </listitem>
                    <listitem>
                        <para>Copy the text.</para>
                    </listitem>
                    <listitem>
                        <para>Paste the text into an ASCII editor (for
                            example, vi <emphasis role="bold"
                            > </emphasis> or TextEdit ). </para>
                    </listitem>
                    <listitem>
                        <para>Modify the example with your required
                            account information and so on, as detailed
                            in this guide. </para>
                    </listitem>
                </orderedlist>
                <note>
                    <para>The carriage returns in the cURL request
                        examples that are part of the cURL syntax are
                        escaped with a backslash (\) to avoid
                        prematurely terminating the command. However
                        you should not escape carriage returns inside
                        the XML or JSON message within the
                        command.</para>
                </note>
                <para>Consider the following cURL authenticate
                    request: JSON example that is described in detail
                    in <xref linkend="Generating_Auth_Token"/>:</para>
                <example>
                    <title>cURL authenticate request: JSON</title>
                    <?dbfo keep-together="always"?>
                    <screen language="bash"><command>curl</command> <option>-s</option> <option>-d</option> \
'{
    "auth":
    {
       "RAX-KSKEY:apiKeyCredentials":
       {  
          "username": "<emphasis>yourUserName</emphasis>",  
          "apiKey": "<emphasis>yourApiKey</emphasis>"}
    }  
}' \
<option>-H 'Content-Type: application/json'</option> \
<uri>'https://identity.api.rackspacecloud.com/v2.0/tokens'</uri> | python -m json.tool</screen>
                </example>
                <para>Note that all the lines that are part of the
                    cURL command syntax have been escaped with a
                    backslash (\) to indicate that the command
                    continues on the next line:</para>
                <screen language="bash"><command>curl</command> <option>-i</option> <option>-d</option> \
  
   
(... lines within the JSON portion of the message are not shown in this example)
(... the example only shows lines that are part of cURL syntax)     
     
    
   
}' \
<option>-H 'Content-Type: application/json'</option> \
<uri>'https://identity.api.rackspacecloud.com/v2.0/tokens'</uri> | python -m json.tool</screen>
                <para>However the lines <emphasis>within</emphasis>
                    the JSON portion of the message are
                        <emphasis>not</emphasis> escaped with a
                    backslash ('\') to avoid issues with the JSON
                    processing:</para>
                <screen language="bash">'{
    "auth":
    {
       "RAX-KSKEY:apiKeyCredentials":
       {  
          "username": "<emphasis>yourUserName</emphasis>",  
          "apiKey": "<emphasis>yourApiKey</emphasis>"}
    }  
}' \
</screen>
                <note>
                    <para>The final line of the JSON message is
                        escaped since the backslash lies
                            <emphasis>outside</emphasis> the JSON
                        message and continues the cURL command to the
                        next line.</para>
                </note>
                <orderedlist continuation="continues">
                    <listitem>
                        <para>After you are finished modifying the
                            text for the cURL request example with
                            your information (for example
                                <emphasis>yourUserName</emphasis> and
                                   <emphasis><code>yourApiKey</code></emphasis>),
                            paste the text into your terminal window. </para>
                    </listitem>
                    <listitem>
                        <para>Execute the cURL command by pressing
                                <guilabel>Enter</guilabel>.</para>
                    </listitem>
                </orderedlist>
                <para>If you have trouble copying and pasting the
                    examples as described, try typing the entire
                    example on one long line, removing all the
                    backslash line continuation characters.</para>
            </section>
        </section>
        <section xml:id="Generating_Auth_Token">
            <title>Step 3. Generate an authentication token</title>
            <para>If you use cURL, you need to generate an
                authentication token.</para>
            <para>If you are using heat client, the authentication
                token is generated for you automatically, so skip this
                section and go to <xref
                    linkend="Create_Simple_Stack_CS"/>.</para>
            <para>In order to use the REST API, you must first obtain
                an authentication token, which must be passed in for
                each request using the <code>X-Auth-Token</code>
                header. </para>
            <para>The following examples demonstrate how to use cURL
                to obtain the authentication token and the account
                number. You must supply the authentication token and
                account number when calling subsequent Cloud
                Orchestration API operations.</para>
            <para>Remember to replace the names in the examples with
                their respective values:<itemizedlist
                    spacing="compact">
                    <listitem>
                        <para><emphasis>yourUserName</emphasis>
                            &mdash; Your common Rackspace Cloud user
                            name, as supplied during
                            registration.</para>
                    </listitem>
                    <listitem>
                        <para><emphasis>yourApiKey</emphasis> &mdash;
                            Your API access key.</para>
                        <para><emphasis role="bold">To find your API
                                key:</emphasis></para>
                        <orderedlist>
                            <listitem>
                                <para>Log in to the Cloud Control
                                   Panel (<link
                                   xlink:href="https://mycloud.rackspace.com"
                                   >https://mycloud.rackspace.com</link>).</para>
                            </listitem>
                            <listitem>
                                <para>On the upper-right side of the
                                   top navigation pane, click the
                                   <emphasis role="bold">Account:
                                   <emphasis role="italic"
                                   >yourUserName</emphasis></emphasis>
                                   menu.</para>
                            </listitem>
                            <listitem>
                                <para>From the menu, select
                                   <guimenuitem>Account
                                   Settings</guimenuitem>.</para>
                            </listitem>
                            <listitem>
                                <para>In the Login Details section of
                                   the Account Settings page, locate
                                   the <guilabel>API Key</guilabel>
                                   field and click
                                   <guibutton>Show</guibutton>.</para>
                            </listitem>
                            <listitem>
                                <para>Copy the value of the API Key
                                   and paste it into a text editor of
                                   your choice.</para>
                            </listitem>
                            <listitem>
                                <para>Click
                                   <guibutton>Hide</guibutton> to hide
                                   the value of the API Key. </para>
                            </listitem>
                        </orderedlist>
                        <para>You also need your cloud account ID
                            number. In the documentation, the account
                            ID is often referred to as your tenant
                            name or tenant ID (technically, the ID is
                            different from the name, but at Rackspace,
                            they are the same thing). Together, three
                            components—your user name, your API Key,
                            and your tenant ID or cloud account
                            ID—form the authentication credentials
                            that are required to connect to the
                            Rackspace Cloud. </para><para>To find your tenant ID or cloud account number, click the
                                <emphasis role="bold">Account:
                                   <emphasis role="italic"
                                   >yourUserName</emphasis></emphasis>
                            menu on the upper-right side of the top
                            navigation pane in the Cloud Control
                            Panel. The tenant ID or account ID is
                            listed first in the menu. </para>
                    </listitem>
                </itemizedlist></para>
            <para>Use the following endpoint to access the Cloud
                Identity Service: </para>
            <itemizedlist spacing="compact">
                <listitem>
                    <para><link xlink:href="&ENDPOINT-US-20;"
                            >&ENDPOINT-US-20;</link>
                    </para>
                </listitem>
            </itemizedlist>
            <para> Your account might be based in either the US or the
                UK; this is not determined by your physical location
                but by the location of the Rackspace retail site which
                was used to create your account: </para>
            <itemizedlist spacing="compact">
                <listitem>
                    <para> If your account was created via <link
                            xlink:href="http://www.rackspacecloud.com"
                            >http://www.rackspacecloud.com</link>, it
                        is a US-based account. </para>
                </listitem>
                <listitem>
                    <para> If your account was created via <link
                            xlink:href="http://www.rackspace.co.uk"
                            >http://www.rackspace.co.uk</link>, it is
                        a UK-based account. </para>
                </listitem>
            </itemizedlist>
            <para>Note that the <code>v2.0</code> component in the URL
                indicates that you are using version 2.0 of the Cloud
                Identity API.</para>
            <example>
                <title>cURL authenticate request: XML</title>
                <?dbfo keep-together="always"?>
                <screen language="bash"><command>curl</command> <option>-s</option> <option>-d</option> \
'&lt;?xml version="1.0" encoding="UTF-8"?>  
&lt;auth>
   &lt;apiKeyCredentials
      xmlns="http://docs.rackspace.com/identity/api/ext/RAX-KSKEY/v1.0"
         username="<emphasis>yourUserName</emphasis>" 
         apiKey="<emphasis>yourApiKey</emphasis>"/>
&lt;/auth>' \
<option>-H 'Content-Type: application/xml'</option> \
<option>-H 'Accept: application/xml'</option> \
<uri>'https://identity.api.rackspacecloud.com/v2.0/tokens'</uri></screen>
            </example>
            <example>
                <title>cURL authenticate request: JSON</title>
                <?dbfo keep-together="always"?>
                <screen language="bash"><command>curl</command> <option>-s</option> <option>-d</option> \
'{
    "auth":
    {
       "RAX-KSKEY:apiKeyCredentials":
       {  
          "username": "<emphasis>yourUserName</emphasis>",  
          "apiKey": "<emphasis>yourApiKey</emphasis>"}
    }  
}' \
<option>-H 'Content-Type: application/json'</option> \
<uri>'https://identity.api.rackspacecloud.com/v2.0/tokens'</uri> | python -m json.tool</screen>
            </example>
            <para>The following examples show the authentication
                response, which includes the authentication token
                    <code>id</code> along with an <code>expires</code>
                attribute that specifies when the token expires. More
                information about the response is provided after the
                examples. </para>
            <example>
                <title>Authenticate response: XML</title>
                <programlisting language="xml"><xi:include href="samples/db-auth-20.xml" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
            </example>
            <example>
                <title>Authenticate response: JSON</title>
                <programlisting language="json"><xi:include href="samples/db-auth-20.json" parse="text"><xi:fallback>Missing code sample! <?rax fail?></xi:fallback></xi:include></programlisting>
            </example>
            <para>The authentication token <code>id</code> is returned
                along with an <code>expires</code> attribute that
                specifies when the token expires. </para>
            <note>
                <title>Notes</title>
                <itemizedlist spacing="compact">
                    <listitem>
                        <para>For all response examples in this guide,
                            the field values that you receive in your
                            responses will vary from those shown here
                            because they will be specific to your
                            account.</para>
                    </listitem>
                    <listitem>
                        <para>The information shown in the
                            authenticate response examples is for
                            US-based accounts. If you authenticate
                            using a UK-based account, you will see the
                            service catalog information for UK-based
                            accounts.</para>
                    </listitem>
                    <listitem>
                        <para>The <code>id</code> attribute in the
                            authenticate response specifies the
                            authentication token. Tokens are valid for
                            a finite duration.</para>
                        <para>You will set an environment variable
                                (<code>token</code>) to specify your
                            authentication token for the Cloud
                            Orchestration API operations in <xref
                                linkend="Export_CURL_ENV_VARS"
                            /></para>
                    </listitem>
                    <listitem>
                        <para> The <code>expires</code> attribute
                            denotes the time after which the token
                            becomes automatically become invalid. A
                            token might be manually revoked before the
                            time identified by the
                                <code>expires</code> attribute;
                                <code>expires</code> predicts a
                            token's maximum possible lifespan but does
                            not guarantee that it will reach that
                            lifespan. Clients are encouraged to cache
                            a token until it expires.</para>
                    </listitem>
                    <listitem>
                        <para>Applications should be designed to
                            re-authenticate after receiving a 401
                            (Unauthorized) response from a service
                            endpoint.</para>
                    </listitem>
                </itemizedlist>
            </note>
            <para>The <code>publicURL</code> endpoints for
                    <code>cloudOrchestration</code> (for example
                    <code>https://ord.orchestration.api.rackspacecloud.com/v1/1100111</code>)
                are also returned in the response. </para>
            <para>You will find the actual account number after the
                final forwardslash (/) in the <code>publicURL</code>
                field. In this example, you can see that the account
                number is 1100111. You will set an environment
                variable (<code>account</code>) to specify your
                account number for the Cloud Orchestration API
                operations in <xref linkend="Export_CURL_ENV_VARS"
                /></para>
            <para>After authentication, you can use cURL to perform
                &GET;, &DELETE;, and &POST; requests for the Cloud
                Orchestration API.</para>
        </section>
        <section xml:id="Service_Access_Endpoints-d1e753">
            <title>Step 4. Choose service access/endpoints</title>
            <para>If you are using cURL, the endpoints to use for your
                Cloud Orchestration API operations are summarized in
                the following table. Choose the endpoint for the data
                center where your Cloud resources are located.</para>
            <para>If you are using heat client, the endpoints to use
                for your Cloud Orchestration API operations are set
                automatically via the OS_REGION_NAME environment
                variable, so you can skip this section and go to <xref
                    linkend="Create_Simple_Stack_CS"/>.</para>
            <tip>
                <para>To help you decide which regionalized endpoint
                    to use, read about special considerations for
                    choosing a region at <link
                        xlink:href="http://www.rackspace.com/knowledge_center/article/about-regions"
                        >http://www.rackspace.com/knowledge_center/article/about-regions</link>.</para>
            </tip>
            <para>
                <table rules="all">
                    <caption>Regionalized service endpoints</caption>
                    <thead>
                        <tr align="center">
                            <td colspan="2">Region</td>
                            <td colspan="5">Endpoint</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr align="left">
                            <td colspan="2">Chicago (ORD)</td>
                            <td colspan="5"
                                   ><code>https://ord.orchestration.api.rackspacecloud.com/v1/</code><parameter>1234</parameter>/ </td>
                        </tr>
                        <tr align="left">
                            <td colspan="2">Dallas/Ft. Worth
                                (DFW)</td>
                            <td colspan="5"
                                   ><code>https://dfw.orchestration.api.rackspacecloud.com/v1/</code><parameter>1234</parameter>/ </td>
                        </tr>
                        <tr align="left">
                            <td colspan="2">Northern Virginia
                                (IAD)</td>
                            <td colspan="5"
                                   ><code>https://iad.orchestration.api.rackspacecloud.com/v1/</code><parameter>1234</parameter>/ </td>
                        </tr>
                        <tr align="left">
                            <td colspan="2">London (LON)</td>
                            <td colspan="5">
                                <code>https://lon.orchestration.api.rackspacecloud.com/v1/</code><parameter>1234</parameter>/ </td>
                        </tr>
                        <tr align="left">
                            <td colspan="2">Sydney (SYD)</td>
                            <td colspan="5">
                                <code>https://syd.orchestration.api.rackspacecloud.com/v1/</code><parameter>1234</parameter>/ </td>
                        </tr>
                        <tr align="left">
                            <td colspan="2">Hong Kong (HKG)</td>
                            <td colspan="5">
                                <code>https://hkg.orchestration.api.rackspacecloud.com/v1/</code><parameter>1234</parameter>/ </td>
                        </tr>
                    </tbody>
                </table>
            </para>
            <note>
                <para>All examples in this guide assume that you are
                    operating against the ORD data center. If you are
                    using a different data center, be sure to use the
                    associated endpoint from the table instead.</para>
            </note>
            <para>Replace the sample account ID number,
                    <parameter>1234</parameter>, with your actual
                account ID, which is returned as part of the
                authentication response. You will set an environment
                variable (<code>OS_TENANT_ID</code>) to specify your
                account ID for the Cloud Orchestration API operations
                in <xref linkend="Export_CURL_ENV_VARS"/>. Refer to
                    <xref linkend="Generating_Auth_Token"/> for more
                information about obtaining the account ID.</para>
            <para>When calling a Cloud Orchestration API operation,
                place the endpoint at the beginning of the request
                URL, for example:
                    <code>https://ord.orchestration.api.rackspacecloud.com/v1/$OS_TENANT_ID/</code>,
                as shown in the cURL Create Stack Request example in
                    <xref linkend="Create_Simple_Stack_CS_CURL"
                />.</para>
        </section>
        <section xml:id="Export_CURL_ENV_VARS">
            <title>Step 5. Export environment variables to run cURL
                commands</title>
            <para>To run the cURL command examples in this guide,
                follow this procedure to export environment variables. </para>
            <para audience="gsonly">If you are using heat client
                commands, skip  to <xref
                    linkend="Create_Simple_Stack_CS"/>. </para>
            <para>Export your tenant ID and authentication token to
                environment variables. All cURL examples in this guide
                use these environment variables.</para>
            <procedure>
                <title>To export environment variables:</title>
                <step>
                    <para>Export your tenant ID to the
                            <literal>OS_TENANT_ID</literal>
                        environment variable:</para>
                    <screen>$ export OS_TENANT_ID="<emphasis>tenantId</emphasis>"</screen>
                    <para><emphasis>tenantId</emphasis> is the value
                        in the <literal>tenantId</literal> field in
                        the authentication response. </para>
                </step>
                <step>
                    <para>Export your authentication token to the
                            <literal>OS_AUTH_TOKEN</literal>
                        environment variable:
                            <screen>$ export OS_AUTH_TOKEN="<emphasis>id</emphasis>"</screen><emphasis>id</emphasis>
                        is the authentication token value in the
                            <literal>id</literal> field in the
                            <literal>token</literal> element in the
                        authentication response. For information about
                        the token ID, see <xref
                            linkend="Generating_Auth_Token"/>.</para>
                </step>
            </procedure>
        </section>
        <section xml:id="Create_Simple_Stack_CS">
            <title>Step 6. Create a simple stack for a cloud
                server</title>
            <para>Assume that you want to create a simple stack that
                defines a single cloud server. Use a text editor such
                as nano or vi to create the following heat
                orchestration template (HOT) file and then save it as
                    <filename>single_server.template</filename>:</para>
            <example>
                <title><filename>single_server.template</filename>
                    Example hot template file</title>
                <programlisting language="bash">
heat_template_version: 2014-10-16

resources:
  compute_instance:  
    type: "OS::Nova::Server"
    properties:
      flavor: 1 GB General Purpose v1
      image: CentOS 6 (PV)
      name: Single Server Stack
      
outputs:
  public_ip:
    description: public IP address of the deployed compute instance
    value: { get_attr: [compute_instance, accessIPv4] }      
                </programlisting> 
            </example>
            <note><title>Notes</title>
                <itemizedlist>
                    <listitem>
                        <para>If you enter in the template example
                            text manually, remember to use a two-space
                            indent (not Tab) for each subsection of
                            the template.</para>
                    </listitem>
                    <listitem>
                        <para>If you copy the example rather than
                            entering the text manually, select the
                            example from the HTML version of this
                            guide by clicking the <emphasis
                                role="bold">Select Text</emphasis>
                            icon to the right of the example and
                            copying the text. Then paste the text into
                            your text editor.</para>
                    </listitem>
                </itemizedlist>
            </note>
            <para>This template has a <code>resources</code> section
                that creates a single cloud server with a 1 GB General
                Purpose v1 flavor size (which identifies a particular
                combination of memory capacity and priority for CPU
                time). It has CentOS 6 installed, and is called Single
                Server Stack. </para>
            <note>
                <para>You can find the information for resource types
                    either by looking it up or by using the
                    API.</para>
                <para>You can look up the names for the supported
                    attributes for resources here: <link
                        xlink:href="http://docs.openstack.org/developer/heat/template_guide/index.html"
                        >http://docs.openstack.org/developer/heat/template_guide/index.html</link>.</para>
                <para>To find the various types of supported template
                    resources, use the List resource types API
                    operation (&GET; <emphasis role="bold"
                        >/resource_types</emphasis>). The cURL command
                    for this operation is as follows. Be sure to use
                    the correct values for your
                        <code>X-Auth-Token</code> and
                        <code>tenant_id</code>):</para>
                <programlisting>curl -i -X GET -H 'X-Auth-Token: xxxxxx' -H 'Content-Type: application/json' -H 'Accept: application/json'  https://dfw.orchestration.rackspacecloud.com/v1/&lt;tenant_id>/resource_types</programlisting>
                <para>To find the properties for a resource type, use
                    the show resource data API operation.</para>
            </note>
            <para>This template also has an <code>outputs</code>
                section. Outputs are used to provide important
                information to users, such as the IP address for the
                server in this example. The output in this example is
                named <code>public_ip</code>. Its value is set by
                calling the intrinsic function <code>get_attr</code>,
                and passing it the name of the cloud server resource
                    (<code>compute_instance</code>) and the attribute
                whose value is needed (<code>accessIPv4</code>). You
                will see shortly how this public IP address is
                displayed to the user. You can find out more about
                intrinsic functions at <link
                    xlink:href="http://docs.rackspace.com/orchestration/api/v1/orchestration-templates-devguide/content/Defining_Template_dle245.html#intrinsic_functions_d1e725"
                    >http://docs.rackspace.com/orchestration/api/v1/orchestration-templates-devguide/content/Defining_Template_dle245.html#intrinsic_functions_d1e725</link>. </para>
            <para>Now, choose one of the following methods to create
                the stack:<itemizedlist>
                    <listitem>
                        <para><xref
                                linkend="Create_Simple_Stack_CS_Heat"
                            /></para>
                    </listitem>
                    <listitem>
                        <para><xref
                                linkend="Create_Simple_Stack_CS_CURL"
                            /></para>
                    </listitem>
                </itemizedlist></para>
            <section xml:id="Create_Simple_Stack_CS_Heat">
                <title>Create stack with the heat client</title>
                <procedure>
                    <title>To create the stack with the heat
                        client:</title>
                    <step>
                        <para>Issue the following command, which
                            includes the name of the template file
                            that you just created:</para>
                        <programlisting language="bash" role="gutter: false"> heat stack-create Single-Server-Stack --template-file single_server.template</programlisting>
                        <para>You should get a list of your stacks,
                            including one with a stack_name of
                                <code>Single-Server-Stack</code> with
                            a stack_status of
                                <code>CREATE_IN_PROGRESS</code>. For
                            example: </para>
                        <informalexample>
                            <?dbfo pgwide="1"?>
                            <screen><computeroutput><?db-font-size 10%?>
+--------------------------------------+---------------------+--------------------+----------------------+
| id                                   | stack_name          | stack_status       | creation_time        |
+--------------------------------------+---------------------+--------------------+----------------------+
| 3bd2c230-b02a-45d8-9f16-88c9a9f64d2d | Single-Server-Stack | CREATE_IN_PROGRESS | 2014-01-24T20:12:47Z |
+--------------------------------------+---------------------+--------------------+----------------------+</computeroutput></screen>
                        </informalexample>
                    </step>
                </procedure>
            </section>
            <?hard-pagebreak?>
            <section xml:id="Create_Simple_Stack_CS_CURL">
                <title>Create stack by using cURL</title>
                <procedure>
                    <title>To create a stack by using cURL</title>
                    <step>
                        <para>Use the create stack API operation
                                (<code>/stacks</code>) in the cURL
                            request, as shown in the following
                            example.</para>
                        <example security="writeronly">
                            <title>cURL Create Stack  JSON
                                Request</title>
                            <programlisting language="bash"><command>curl -s -d</command> \
'{
  "stack_name": "Single-Server-Stack",
  "disable_rollback": true,
  "parameters": {},
  "environment": {},
  "template": "heat_template_version: 2014-10-16
  resources:
    compute_instance:
      type: "OS::Nova::Server"  
      properties:
        flavor: 1GB Standard Instance
        image: CentOS 6.4
        name: Single Server Stack
        
   outputs:  
     public_ip:
     description: public IP address of the deployed compute instance\n    
     value: { get_attr: [compute_instance, PublicIp] }
     
  ",
  "timeout_mins": 60
}' \
<option>-H "X-Auth-Token: $token"</option> \
<option>-H "Accept: application/json"</option> \
<uri>https://ord.orchestration.api.rackspacecloud.com/v1/</uri>$account<uri>/stacks</uri> | python -m json.tool</programlisting>
                            <remark>Reviewer: Example above defines a
                                template object, but creates Bad
                                Request. Randall says the Bad Request
                                is caused by a bug in the Heat
                                environment processing. Please advise
                                when the bug is fixed so I can test
                                the example.</remark>
                        </example>
                        <example>
                            <title>cURL create stack:  JSON
                                request</title>
                            <programlisting language="bash">curl -i -X POST -H 'Accept: application/json' -H 'Content-Type: application/json'  -H  "X-Auth-Token: $OS_AUTH_TOKEN" -d \
'{
   "stack_name": "Single-Server-Stack", 
   "disable_rollback": true, 
   "parameters": {}, 
   "template": "heat_template_version: 2014-10-16\n \nresources:\n  compute_instance:  \n    type: \"OS::Nova::Server\"\n    properties:\n      flavor: 1 GB General Purpose v1\n      image: CentOS 6 (PV)\n      name: Single Server Stack\n       \noutputs:\n  public_ip:\n    description: public IP address of the deployed compute instance\n    value: { get_attr: [compute_instance, accessIPv4] }      \n\n\n", 
   "timeout_mins": 60
}' \
https://ord.orchestration.api.rackspacecloud.com/v1/$OS_TENANT_ID/stacks</programlisting>
                        </example>
                        <remark>Reviewer:  Example above defines a
                            template object, which is generated by
                            --debug output from stack-create heat
                            client command. </remark>
                        <example security="writeronly">
                            <title>cURL Create Stack Request:
                                JSON</title>
                            <programlisting language="bash">curl -i -X POST -H 'Accept: application/json' -H 'Content-Type: application/json'  -H  "X-Auth-Token: $token" -d @single_server.template https://ord.orchestration.api.rackspacecloud.com/v1/$account/stacks</programlisting>
                        </example>
                        <remark>Reviewer: Example above (hidden in the
                            PDF) defines a template object which is
                            read from a file using the -d option. This
                            still does not work. Does anyone know how
                            to get this to work correctly?</remark>
                        
                            <para>We recommend that you produce the
                            value for the <code>template</code>
                            attribute by executing the following heat
                            client command:</para>
                            <programlisting language="bash" role="gutter: false"><prompt>$</prompt> heat <emphasis role="bold">--debug</emphasis> stack-create Single-Server-Stack --template-file single_server.template</programlisting>
                            <para>Copy the value for the
                                <code>template</code> attribute from
                            the cURL command that is shown in the
                            output from the preceding command.</para>
                            <para>Although you can manually produce
                            the required value for the template
                            attribute from the template file, to do so
                            you must replace every line break with
                                <emphasis role="bold">\n</emphasis>,
                            escape any double quotation marks (for
                            example <code>type:
                                \"OS::Nova::Server\"</code>), and
                            maintain correct spacing to indicate the
                            correct nesting level for each block in
                            the template. So it is easier to use the
                                <code>template</code> value in the
                            generated cURL command from the <emphasis
                                role="bold"
                                ><code>--debug</code></emphasis>
                            output.</para>
                        <para>Note that executing the <emphasis
                                role="bold">stack-create</emphasis>
                            heat client command actually creates the
                            stack, so you  must delete that stack
                            before you issue the cURL command to
                            create a stack.</para>
                            <para>As an alternative, you can also just
                            use the entire cURL command generated by
                            the <emphasis role="bold"
                                   ><code>--debug</code></emphasis>
                            output rather than the cURL command shown
                            in the previous example.</para>
                        
                        <example security="writeronly">
                            <title>cURL Create Stack Request:
                                JSON</title>
                            <programlisting language="bash"><command>curl -s -d</command> \
'{
  "stack_name": "Single-Server-Stack",
  "disable_rollback": true,
  "parameters": {},
  "template_url": "file:///Users/mike.asthalter/Documents/Orchestration/Misc/single_server.template",
  "timeout_mins": 60
}' \
<option>-H "X-Auth-Token: $token"</option> \
<option>-H "Accept: application/json"</option> \
<uri>https://ord.orchestration.api.rackspacecloud.com/v1/</uri>$account<uri>/stacks</uri> | python -m json.tool</programlisting><remark>Reviewer: Example above defines a
    template URL, using a local file, but
    creates Bad Request. Randall says this is
    due to the same bug noted above.</remark>
                        </example>
                        
                        <example security="writeronly">
                            <title>cURL Create Stack Request:
                                JSON</title>
                            <programlisting language="bash"><command>curl -s -d</command> \
'{
  "stack_name": "Single-Server-Stack",
  "disable_rollback": true,
  "parameters": {},
  "template_url": "https://github.com/rackerlabs/heat-rax-docs/blob/master/templates/single_server.template",
  "timeout_mins": 60
}' \
<option>-H "X-Auth-Token: $token"</option> \
<option>-H "Accept: application/json"</option> \
<uri>https://ord.orchestration.api.rackspacecloud.com/v1/</uri>$account<uri>/stacks</uri> | python -m json.tool</programlisting>
                            <remark>Reviewer: Example above defines a
                                template URL, using a github file, but
                                also creates Bad Request. Randall says
                                this is due to the same bug noted
                                above.</remark></example>
                        
                        <example security="writeronly">
                            <title>cURL Create Stack Request:
                                JSON</title>
                            <programlisting language="bash"><command>curl -s -d</command> \
'{
  "stack_name": "Single-Server-Stack",
  "disable_rollback": true,
  "parameters": {},
  "template_url": https://raw.github.com/rackerlabs/heat-rax-docs/master/templates/single_server.template?token=1015169__eyJzY29wZSI6IlJhd0Jsb2I6cmFja2VybGFicy9oZWF0LXJheC1kb2NzL21hc3Rlci90ZW1wbGF0ZXMvc2luZ2xlX3NlcnZlci50ZW1wbGF0ZSIsImV4cGlyZXMiOjEzOTE3MDMxMzZ9--9bc9909f0448944debb6a91eea8ab405ca3d0219,
  "timeout_mins": 60
}' \
<option>-H "X-Auth-Token: $token"</option> \
<option>-H "Accept: application/json"</option> \
<uri>https://ord.orchestration.api.rackspacecloud.com/v1/</uri>$account<uri>/stacks</uri> | python -m json.tool</programlisting>
                            <remark>Reviewer: Example above defines a
                                template URL, using a github file in raw
                                mode, but also creates Bad Request.
                                Randall says this is due to the same bug
                                noted above.</remark> </example>
                        
                        <example security="writeronly">
                            <title>cURL Create Stack Request:
                                JSON</title>
                            <programlisting language="bash">curl -i -X POST -H 'X-Auth-User: mikeasthalter' -H 'X-Auth-Token: f067dca8068c477a9f98c851994d8659' -H 'X-Region-Name: DFW' -H 'X-Auth-Key: pinkH201' -H 'Accept: application/json' -H 'User-Agent: python-heatclient' -H 'Content-Type: application/json' -d '{"stack_name": "Single-Server-Stack", "disable_rollback": true, "parameters": {}, "template": "heat_template_version: 2014-10-16\n \nresources:\n  compute_instance:  \n    type: \"OS::Nova::Server\"\n    properties:\n      flavor: 1GB Standard Instance\n      image: CentOS 6.4\n      name: Single Server Stack\n       \noutputs:\n  public_ip:\n    description: public IP address of the deployed compute instance\n    value: { get_attr: [compute_instance, PublicIp] }      \n\n\n", "timeout_mins": 60}' https://ord.orchestration.api.rackspacecloud.com/v1/647683/stacks</programlisting>
                        </example>
                        <remark security="writeronly">Reviewer: Example above works. It is
                            produced by --debug output from heat
                            client create-stack. However it is useless
                            as an example since it is not human
                            readable.</remark>
                        <example security="writeronly">
                            <title>cURL Create Stack Request:
                                JSON</title>
                            <programlisting language="bash">curl -i -X POST -H 'Accept: application/json' -H 'Content-Type: application/json'  -H  "X-Auth-Token: $token" -d \
'{
   "stack_name": "Single-Server-Stack", 
   "disable_rollback": true, 
   "parameters": {}, 
   "template": "heat_template_version: 2014-10-16\n \nresources:\n  compute_instance:  \n    type: \"OS::Nova::Server\"\n    properties:\n      flavor: 1GB Standard Instance\n      image: CentOS 6.4\n      name: Single Server Stack\n       \noutputs:\n  public_ip:\n    description: public IP address of the deployed compute instance\n    value: { get_attr: [compute_instance, PublicIp] }      \n\n\n", 
   "timeout_mins": 60
}' \
https://ord.orchestration.api.rackspacecloud.com/v1/$account/stacks</programlisting>
                            <remark>Reviewer: Example above also works.
                                The template part is produced by --debug
                                output from heat client create-stack. </remark></example>
                        
                        <example security="writeronly">
                            <title>cURL Create Stack Request:
                                JSON</title>
                            <programlisting language="bash">curl -i -X POST -H 'Accept: application/json' -H 'Content-Type: application/json'  -H  "X-Auth-Token: $token" -d \
'{
   "stack_name": "Single-Server-Stack", 
   "disable_rollback": true, 
   "parameters": {}, 
   "template": "heat_template_version: 2014-10-16\n \nresources:\n  compute_instance:  \n    type: \"OS::Nova::Server\"\n    properties:\n      flavor: 1GB Standard Instance\n      image: CentOS 6.4\n      name: Single Server Stack\n   \noutputs:\n  public_ip:\n    description: public IP address of the deployed compute instance\n    value: { get_attr: [compute_instance, PublicIp] }     \n\n\n", 
   "timeout_mins": 60
}' \
https://ord.orchestration.api.rackspacecloud.com/v1/$account/stacks</programlisting>
                        </example>
                        <remark security="writeronly">Reviewer: Example above also works. It
                            was built manually from the template file,
                            by replacing each newline by \n and
                            escaping the double quote marks around the
                            resource type
                            (\"OS::Nova::Server\"\).</remark>
                    </step>
                    <step>
                        <para>The following example shows the
                            response.</para>
                        <example>
                            <title>cURL create stack: JSON
                                response</title>
                            <programlisting language="json">
HTTP/1.1 201 Created
content-length: 192
via: 1.0 Repose (Repose/2.13.0)
server: nginx/1.2.1
connection: keep-alive
location: https://ord.orchestration.api.rackspacecloud.com/v1/1234/stacks/Single-Server-Stack/3bd2c230-b02a-45d8-9f16-88c9a9f64d2d
date: Thu, 23 Jan 2014 19:38:09 GMT
content-type: application/json

{
  "stack": {
    "id": "3bd2c230-b02a-45d8-9f16-88c9a9f64d2d",
    "links": [
      {
        "href": "http://ord.orchestration.api.rackspacecloud.com/v1/1234/stacks/Single-Server-Stack/3bd2c230-b02a-45d8-9f16-88c9a9f64d2d",
        "rel": "self"
      }
    ]
  }
}
                            </programlisting>
                        </example>
                        <para>The example shows that the stack was
                            created and has the ID
                                <code>3bd2c230-b02a-45d8-9f16-88c9a9f64d2d</code>. </para>
                        <para>Notice that there is a <code>self</code>
                            link that contains a
                                <emphasis>versioned</emphasis> link to
                            the stack resource. Use this link in cases
                            where the link will be followed
                            immediately.</para>
                    </step>
                </procedure>
            </section>
        </section>
        <section xml:id="List_Stacks">
            <title>Step 7. List stacks</title>
            <para>Now you can list stacks and confirm that your stack
                was created.</para>
            <para>Choose one of the following methods:<itemizedlist>
                    <listitem>
                        <para><xref linkend="List_Stacks_Heat"
                            /></para>
                    </listitem>
                    <listitem>
                        <para><xref linkend="List_Stacks_CURL"
                            /></para>
                    </listitem>
                </itemizedlist></para>
            <section xml:id="List_Stacks_Heat">
                <title>List stacks by using the heat client</title>
                <para>This example lists stacks using the heat client.  </para>
                <procedure>
                    <title>To list stacks using the heat
                        client:</title>
                    <step>
                        <para>Issue the following command:</para>
                        <programlisting language="bash" role="gutter: false"> heat stack-list</programlisting>
                        <para>The command returns the <code>id</code>,
                                <code>stack_name</code>,
                                <code>stack_status</code>, and
                                <code>creation_time</code> for each of
                            your stacks, as shown in the following
                            example:</para>
                        
                        <informalexample>
                            <?dbfo pgwide="1"?>
                            <screen><?db-font-size 90%?>
+--------------------------------------+---------------------+-----------------+----------------------+
| id                                   | stack_name          | stack_status    | creation_time        |
+--------------------------------------+---------------------+-----------------+----------------------+
| bd2c230-b02a-45d8-9f16-88c9a9f64d2d  | Single-Server-Stack | CREATE_COMPLETE | 2014-01-23T19:41:05Z |
+--------------------------------------+---------------------+-----------------+----------------------+
</screen>
                        </informalexample>
                        <para>In this case, you have just the
                                <code>Single-Server-Stack</code> and
                            its <code>stack_status</code> is
                                <code>CREATE_COMPLETE</code>.</para>
                        <note>
                            <para>If you issue the
                                   <command>stack-list</command>
                                command before the operation of
                                creating the stack is complete, you
                                might see the
                                   <code>stack_status</code> value of
                                   <code>CREATE_IN_PROGRESS</code>. If
                                you wait a minute, and then reissue
                                the command, you should see that the
                                stack has been created.</para>
                        </note>
                        
                    </step>
                </procedure>
            </section>
            <section xml:id="List_Stacks_CURL">
                <title>List stacks by using cURL</title>
                <procedure>
                    <title>To list stacks with cURL:</title>
                    <step>
                        <para>Execute the cURL request for list
                            stacks:</para>
                        <example>
                            <title>cURL list stacks: JSON
                                request</title>
                            <programlisting language="bash"><command>curl</command> <option>-s</option> \
<option>-H "X-Auth-Token: $OS_AUTH_TOKEN"</option> \
<option>-H "Content-Type: application/json"</option> \
<uri>https://ord.orchestration.api.rackspacecloud.com/v1/</uri>$OS_TENANT_ID<uri>/stacks</uri> | python -m json.tool</programlisting>
                        </example>
                    </step>
                    <step>
                        <para>The following example shows the
                            response.</para>
                        <example>
                            <title>List stacks: JSON response</title>
                            <programlisting language="json">
{
  "stacks": [
    {
      "description": "No description",
      "links": [
        {
          "href": "https://ord.orchestration.api.rackspacecloud.com/v1/1234/stacks/Single-Server-Stack/bd2c230-b02a-45d8-9f16-88c9a9f64d2d",
          "rel": "self"
        }
      ],
      "stack_status_reason": "Stack CREATE completed successfully",
      "stack_name": "Single-Server-Stack",
      "creation_time": "2014-01-23T19:41:05Z",
      "updated_time": null,
      "stack_status": "CREATE_COMPLETE",
      "id": "bd2c230-b02a-45d8-9f16-88c9a9f64d2d"
    }
  ]
}</programlisting>
                        </example>
                        <para>You can see that your stack named
                                <code>Single-Server-Stack</code> with
                            the <code>id
                                bd2c230-b02a-45d8-9f16-88c9a9f64d2d</code>
                            was successfully created.</para>
                        <note>
                            <para>If you issue the
                                   <command>stack-list</command>
                                command before the operation of
                                creating the stack is complete, you
                                might see the
                                   <code>stack_status</code> value of
                                   <code>CREATE_IN_PROGRESS</code>. If
                                you wait a minute, and then reissue
                                the command, you should see that the
                                stack has been created.</para>
                        </note>
                    </step>
                </procedure>
            </section>
        </section>
        <section xml:id="Show_Stack_Details">
            <title>Step 8. Show stack details</title>
            <para>In this section you show the details for your
                stack.</para>
            <para>Choose one of the following methods:<itemizedlist>
                    <listitem>
                        <para><xref linkend="Show_Stack_Details_Heat"
                            /></para>
                    </listitem>
                    <listitem>
                        <para><xref linkend="Show_Stack_Details_CURL"
                            /></para>
                    </listitem>
                </itemizedlist></para>
            <section xml:id="Show_Stack_Details_Heat">
                <title>Show stack details by using the heat
                    client</title>
                <procedure>
                    <title>To show details for your stack by using the
                        heat client:</title>
                    <step>
                        <para>Show the details for your stack
                                <code>Single-Server-Stack</code> by
                            issuing the following command:</para>
                        <programlisting language="bash" role="gutter: false"> heat stack-show Single-Server-Stack</programlisting>
                        <para>The command returns the details for the
                            stack:</para>
                        <informalexample>
                            <?dbfo pgwide="1"?>
                            <screen><computeroutput><?db-font-size 44%?>
+----------------------+----------------------------------------------------------------------------------------------------------------------------+
| capabilities         | []                                                                                                                         |
| creation_time        | 2014-01-24T20:12:47Z                                                                                                       |
| description          | No description                                                                                                             |
| disable_rollback     | True                                                                                                                       |
| id                   | 3bd2c230-b02a-45d8-9f16-88c9a9f64d2d                                                                                       |
| links                | http://ord.orchestration.api.rackspacecloud.com/v1/1234/stacks/Single-Server-Stack/3bd2c230-b02a-45d8-9f16-88c9a9f64d2d    |
| notification_topics  | []                                                                                                                         |
| outputs              | [                                                                                                                          |
|                      |   {                                                                                                                        |
|                      |     "output_value": "23.253.88.131",                                                                                       |
|                      |     "description": "public IP address of the deployed compute instance",                                                   |
|                      |     "output_key": "public_ip"                                                                                              |
|                      |   }                                                                                                                        |
|                      | ]                                                                                                                          |
| parameters           | {                                                                                                                          |
|                      |   "OS::stack_name": "Single-Server-Stack",                                                                                 |
|                      |   "OS::stack_id": "3bd2c230-b02a-45d8-9f16-88c9a9f64d2d"                                                                   |
|                      | }                                                                                                                          |
| stack_name           | Single-Server-Stack                                                                                                        |
| stack_status         | CREATE_COMPLETE                                                                                                            |
| stack_status_reason  | Stack CREATE completed successfully                                                                                        |
| template_description | No description                                                                                                             |
| timeout_mins         | 60                                                                                                                         |
| updated_time         | None                                                                                                                       |
+----------------------+----------------------------------------------------------------------------------------------------------------------------+


</computeroutput></screen>
                        </informalexample>
                    </step>
                </procedure>
                <para>Notice this is where you can see the information
                    created by the output parameter that you created
                    in the following section of your template file in
                        <xref linkend="Create_Simple_Stack_CS"/>:<example>
                        <title>outputs section for template
                            single_server.template</title>
                        <programlisting language="bash">outputs:
  public_ip:
    description: public IP address of the deployed compute instance
    value: { get_attr: [compute_instance, accessIPv4] } </programlisting>
                    </example>Locate the <code>outputs</code> property
                    in the table of information returned by the
                        <code>stack-show</code> heat client command
                    and look at the <code>output value</code> for the
                        <code>output_key</code>
                    <code>public_ip</code>. The
                        <code>output_value</code> in the preceding
                    example is <code>23.253.88.56</code>. That value
                    is the  public IP address for the server that was
                    created by the stack
                        <code>Single-Server-Stack</code>. If the
                    output parameter <code>public_ip</code> had not
                    been provided in the template, there would be no
                    easy way to access the new server (other than by
                    using the Cloud Control Panel). Using output
                    parameters provides a method for returning
                    important information to API users.</para>
            </section>
            <section xml:id="Show_Stack_Details_CURL">
                <title>Show stack details by using cURL</title>
                <procedure>
                    <title>To show details for the specified stack
                        using cURL:</title>
                    <step>
                        <para>Show stack details by executing the
                            following request.</para>
                        <para>This operation does not require a
                            request body.</para>
                        <example>
                            <?dbfo keep-together="always"?>
                            <title>cURL show stack details: JSON
                                request</title>
                            <programlisting language="bash"><command>curl</command> <option>-s</option> \
<option>-H "X-Auth-Token: $OS_AUTH_TOKEN"</option> \
<option>-H "Content-Type: application/json"</option> \
<uri>https://ord.orchestration.api.rackspacecloud.com/v1/</uri>$OS_TENANT_ID<uri>/stacks/</uri><emphasis role="bold">Single-Server-Stack</emphasis>/<emphasis role="bold">stack_id</emphasis> | python -m json.tool</programlisting>
                        </example>
                        <para>Remember to replace the following
                            example values with their actual values:
                                <itemizedlist spacing="compact">
                                <listitem>
                                   <para><emphasis role="bold"
                                   >Single-Server-Stack</emphasis>
                                   &mdash; If you used a different
                                   name for your stack, specify it
                                   (see the example in <xref
                                   linkend="Create_Simple_Stack_CS_CURL"
                                   />).</para>
                                </listitem>
                                <listitem>
                                   <para><emphasis role="bold"
                                   >stack_id</emphasis> &mdash;
                                   Specify the ID returned in your
                                   create stack response (see the
                                   example in <xref
                                   linkend="Create_Simple_Stack_CS_CURL"
                                   />).</para>
                                </listitem>
                            </itemizedlist></para>
                    </step>
                    <step>
                        <para>The following example shows the
                            response.</para>
                        <example>
                            <title>Show stack details: JSON
                                response</title>
                            <programlisting language="json">
{
  "stack": {
    "disable_rollback": true,
    "description": "No description",
    "parameters": {
      "OS::stack_name": "Single-Server-Stack",
      "OS::stack_id": "3bd2c230-b02a-45d8-9f16-88c9a9f64d2d" 
    },
    "stack_status_reason": "Stack CREATE completed successfully",
    "stack_name": "Single-Server-Stack",
    "outputs": [
      {
        "output_value": "23.253.88.131",
        "description": "public IP address of the deployed compute instance",
        "output_key": "public_ip"
      }
    ],
    "creation_time": "2014-01-24T20:12:47Z",
    "links": [
      {
        "href": "http://ord.orchestration.api.rackspacecloud.com/v1/1234/stacks/Single-Server-Stack/3bd2c230-b02a-45d8-9f16-88c9a9f64d2d",
        "rel": "self"
      }
    ],
    "capabilities": [
      
    ],
    "notification_topics": [
      
    ],
    "timeout_mins": 60,
    "stack_status": "CREATE_COMPLETE",
    "updated_time": null,
    "id": "3bd2c230-b02a-45d8-9f16-88c9a9f64d2d",
    "template_description": "No description"
  }
} 
</programlisting>
                        </example>
                    </step>
                </procedure>
                <para>The response shows the information created by
                    the output parameter that you created in the
                        <code>outputs</code> section of your template
                    file in <xref linkend="Create_Simple_Stack_CS"/>:<example>
                        <title>outputs section for template
                            single_server.template</title>
                        <programlisting language="bash">outputs:
  public_ip:
    description: public IP address of the deployed compute instance
    value: { get_attr: [compute_instance, accessIPv4] } </programlisting>
                    </example>Locate the <code>outputs</code> property
                    in the response information and look at the
                        <code>output value</code> for the
                        <code>output_key</code>
                    <code>public_ip</code>. The
                        <code>output_value</code> in the preceding
                    example is <code>23.253.88.56</code>. That value
                    is the public IP address for the server that was
                    created by the stack
                        <code>Single-Server-Stack</code>. If the
                    output parameter <code>public_ip</code> had not
                    been provided in the template, there would be no
                    easy way to access the new  server (other than by
                    using the Cloud Control Panel). Using output
                    parameters provides a method for returning
                    important information to API users.</para>
            </section>
        </section>
        <section xml:id="Delete_Stack">
            <title>Step 9. Delete a stack</title>
            <para>Since you are done using the stack, you can delete
                it.</para>
            <para>Choose one of the following methods:<itemizedlist>
                    <listitem>
                        <para><xref linkend="Delete_Stack_Heat"
                            /></para>
                    </listitem>
                    <listitem>
                        <para><xref linkend="Delete_Stack_Curl"
                            /></para>
                    </listitem>
                </itemizedlist></para>
            <section xml:id="Delete_Stack_Heat">
                <title>Delete a stack by using the heat client</title>
                <procedure>
                    <title>To delete the stack with the specified name
                        using the heat client:</title>
                    <step>
                        <para>Delete your stack
                                <code>Single-Server-Stack</code> by
                            issuing the following command:</para>
                        <programlisting language="bash" role="gutter: false"> heat stack-delete Single-Server-Stack</programlisting>
                        <para>The command returns the following
                            information for the stack:</para>
                        <informalexample>
                            <?dbfo pgwide="1"?>
                            <screen><computeroutput><?db-font-size 44%?>
+--------------------------------------+---------------------+--------------------+----------------------+
| id                                   | stack_name          | stack_status       | creation_time        |
+--------------------------------------+---------------------+--------------------+----------------------+
| bd2c230-b02a-45d8-9f16-88c9a9f64d2d  | Single-Server-Stack | DELETE_IN_PROGRESS | 2014-01-23T19:41:05Z |
+--------------------------------------+---------------------+--------------------+----------------------+

</computeroutput></screen>
                        </informalexample>
                    </step>
                </procedure>
                <para>The <code>stack_status</code> value shows that
                    the stack is in the process of being deleted.
                    After a minute or so, you can execute the list
                    stacks operation (refer to <xref
                        linkend="List_Stacks_Heat"/>) and observe that
                    the <code>Single-Server-Stack</code> stack is not
                    listed.</para>
            </section>
            <section xml:id="Delete_Stack_Curl">
                <title>Delete a stack by using cURL</title>
                <procedure>
                    <title>To delete the specified stack by using
                        cURL:</title>
                    <step>
                        <para>Delete your stack
                                <code>Single-Server-Stack</code> by
                            executing the following request.</para>
                        <para>This operation does not require a
                            request body. This operation does not
                            return a response body.</para>
                        <example>
                            <?dbfo keep-together="always"?>
                            <title>cURL delete stack: JSON
                                request</title>
                            <programlisting language="bash"><command>curl</command> <option> -i -X DELETE</option> \
<option>-H "X-Auth-Token: $OS_AUTH_TOKEN"</option> \
<option>-H "Content-Type: application/json"</option> \
<uri>https://ord.orchestration.api.rackspacecloud.com/v1/</uri>$OS_TENANT_ID<uri>/stacks/</uri><emphasis role="bold">Single-Server-Stack</emphasis>/<emphasis role="bold">stack_id</emphasis></programlisting>
                        </example>
                        <para> Remember to replace the following
                            example values with their actual
                            respective values:<itemizedlist
                                spacing="compact">
                                <listitem>
                                   <para><emphasis role="bold"
                                   >Single-Server-Stack</emphasis>
                                   &mdash; If you used a different
                                   name for your stack, specify it
                                   (see the example in <xref
                                   linkend="Create_Simple_Stack_CS_CURL"
                                   />)</para>
                                </listitem>
                                <listitem>
                                   <para><emphasis role="bold"
                                   >stack_id</emphasis> &mdash;
                                   Specify the ID returned in your
                                   create stack response (see the
                                   example in <xref
                                   linkend="Create_Simple_Stack_CS_CURL"
                                   />)</para>
                                </listitem>
                            </itemizedlist></para>
                    </step>
                    <step>
                        <para>The following example shows the
                            response.</para>
                        <example>
                            <title>Delete stack: JSON response</title>
                            <programlisting language="json">
HTTP/1.1 204 No Content
Server: nginx/1.2.1
Date: Fri, 31 Jan 2014 16:36:24 GMT
Content-Type: text/html;charset=UTF-8
Content-Length: 0
Connection: keep-alive
Via: 1.0 Repose (Repose/2.13.0) 
</programlisting>
                        </example>
                    </step>
                </procedure>
                <para>After a minute or so, you can execute the list
                    stacks operation (refer to <xref
                        linkend="List_Stacks_CURL"/>) and observe that
                    the <code>Single-Server-Stack</code>  is not
                    listed.</para>
            </section>
        </section>
        <section xml:id="Create_Stack_W_RGroup">
            <title>Step 10. Create a stack by using a resource
                group</title>
            <para>Assume that you would like to create a cloud load
                balancer to use with some cloud servers. You begin
                working on this task by creating a resource group to
                hold the servers. The advantage of this technique is
                that you can create the entire set of servers by
                creating one resource group, rather than specifying
                each server resource separately.</para>
            <para>First, use your text editor to create the following
                template and save it in a file named
                    <filename>servers-with-lb.template</filename>:</para>
            <example>
                <title><filename>servers-with-lb.template</filename>
                    Example</title>
                <programlisting language="bash">
heat_template_version: 2014-10-16

description: |   
  Heat Orchestration Template that spins up a
  resource group with 2 cloud servers.

resources:
  web_nodes:
    type: OS::Heat::ResourceGroup
    properties:
      count: 2
      resource_def:
        type: OS::Nova::Server
        properties:
          flavor: 1 GB General Purpose v1
          image: CentOS 6 (PV)
          name: LB-Compute Web Nodes    
                </programlisting>
            </example>
            <para>In the preceding example, a <code>description</code>
                is provided for the template. It is good practice to
                always provide a brief description for what a template
                does in order to inform potential future users about
                the template.</para>
            <para>The <code>resources</code> section contains a
                resource group named <code>web_nodes</code> of type
                    <code>OS::Heat::ResourceGroup</code>. In the
                    <code>properties</code> section for the group, the
                attribute <code>count</code> is set to <code>2</code>,
                which means that two resources of the type
                    <code>OS::Nova::Server</code> (as defined in the
                resource definition <code>resource_def</code>) will be
                created in the group. The <code>properties</code>
                section for the resource definition for each resource
                in the group specifies the following values:</para>
            <itemizedlist>
                <listitem>
                    <para><code>1 GB General Purpose v1</code>
                        flavor</para>
                </listitem>
                <listitem>
                    <para><code>CentOS 6 (PV)</code> image</para>
                </listitem>
                <listitem>
                    <para>the name <code>LB-Compute Web
                        Nodes</code></para>
                </listitem>
            </itemizedlist>
            <note>
                <para>The advantage of using a resource group to
                    define your servers is the fact that you can set
                    the desired number of servers to create by simply
                    setting the value of <code>count</code> in the
                    template. For example, to create three Cloud
                    Servers instead of two, you could modify the value
                    of count as
                    follows:<programlisting language="bash">count: 3</programlisting>This
                    technique enables you to quickly create an entire
                    set of identical servers.</para>
            </note>
            <para>Choose one of the following methods:<itemizedlist>
                    <listitem>
                        <para><xref
                                linkend="Create_Stack_W_RGroup_Heat"
                            /></para>
                    </listitem>
                    <listitem>
                        <para><xref
                                linkend="Create_Stack_W_RGroup_CURL"
                            /></para>
                    </listitem>
                </itemizedlist></para>
            <section xml:id="Create_Stack_W_RGroup_Heat">
                <title>Create a stack by using a resource group with
                    the heat client</title>
                <procedure>
                    <title>To create a stack with a resource group of
                        cloud servers using the heat client:</title>
                    <step>
                        <para>Create the stack using the heat client. </para>
                        <para>Issue the following command, which
                            includes the name of the template file
                            that you just created: </para>
                        <programlisting language="bash" role="gutter: false"> heat stack-create Servers-With-LB-Stack --template-file servers-with-lb.template</programlisting>
                        <para>The command returns the information
                            about the stack, including its status
                                <code>CREATE_IN_PROGRESS</code>:</para>
                        <informalexample>
                            <?dbfo pgwide="1"?>
                            <screen><computeroutput><?db-font-size 44%?>
+--------------------------------------+-----------------------+--------------------+----------------------+
| id                                   | stack_name            | stack_status       | creation_time        |
+--------------------------------------+-----------------------+--------------------+----------------------+
| e7b67698-3929-43af-8e59-9652d00b7250 | Servers-With-LB-Stack | CREATE_IN_PROGRESS | 2014-01-28T18:00:27Z |
+--------------------------------------+-----------------------+--------------------+----------------------+

</computeroutput></screen>
                        </informalexample>
                    </step>
                    <step>
                        <para>After a couple of minutes you can issue
                            the list stacks command (see <xref
                                linkend="List_Stacks_Heat"/>) to
                            confirm that your stack is now
                            created:</para>
                        <informalexample>
                            <?dbfo pgwide="1"?>
                            <screen><computeroutput><?db-font-size 44%?>
+--------------------------------------+-----------------------+-----------------+----------------------+
| id                                   | stack_name            | stack_status    | creation_time        |
+--------------------------------------+-----------------------+-----------------+----------------------+
| e7b67698-3929-43af-8e59-9652d00b7250 | Servers-With-LB-Stack | CREATE_COMPLETE | 2014-01-28T18:00:27Z |
+--------------------------------------+-----------------------+-----------------+----------------------+

</computeroutput></screen>
                        </informalexample>
                    </step>
                </procedure>
            </section>
            <section xml:id="Create_Stack_W_RGroup_CURL">
                <title>Create a stack by using a resource group with
                    cURL</title>
                <procedure>
                    <title>To create the stack with a resource group
                        of cloud servers using cURL:</title>
                    <step>
                        <para>Create the stack by executing the
                            following request.</para>
                        <example>
                            <?dbfo keep-together="always"?>
                            <title>cURL create stack: JSON
                                request</title>
                            <programlisting language="bash"><command>curl -i -X POST -H 'Accept: application/json' -H 'Content-Type: application/json' -H "X-Auth-Token: $OS_AUTH_TOKEN" -d</command> \
'{
  "stack_name": "Servers-With-LB-Stack", 
  "disable_rollback": true, 
  "parameters": {}, 
  "template": "heat_template_version: 2014-10-16\n\ndescription: |   \n  Heat Orchestration Template that spins up a\n  resource group with 2 cloud servers.\n\nresources:\n  web_nodes:\n    type: OS::Heat::ResourceGroup\n    properties:\n      count: 2\n      resource_def:\n        type: OS::Nova::Server\n        properties:\n          flavor: 1 GB General Purpose v1\n          image: CentOS 6 (PV)\n          name: LB-Compute Web Nodes  \n\n\n", 
  "timeout_mins": 60
}' \
<uri>https://ord.orchestration.api.rackspacecloud.com/v1/</uri>$OS_TENANT_ID<uri>/stacks</uri></programlisting>
                            <remark>Reviewer: As of 1-31-2014 I am
                                getting Bad Request if the credential
                                following credentials are not added
                                into the request: X-Auth-User &amp;
                                X-Auth-Key. This was not required
                                earlier this morning, but apparently
                                now is required so I have added it to
                                the above example. Is this in fact now
                                required for auth? An interesting
                                point is that although these
                                credentials seem to be required for
                                this call to Create Stack, they do not
                                seem to be required for the Create
                                Stack call shown in Example 10: Create
                                Stack with cURL in Step 6 "Create
                                Simple Stack for a Cloud Server".
                                Please explain. Note: this bug has
                                been fixed as of 11-21-2014 and the
                                example adjusted accordingly.</remark>
                        </example>
                        <example security="writeronly">
                            <?dbfo keep-together="always"?>
                            <title>cURL Create Stack Request:
                                JSON</title>
                            <programlisting language="bash">curl -i -X POST -H 'X-Auth-User: mikeasthalter' -H 'X-Auth-Token: 6dee509fec7b450dac339ab0646d069c' -H 'X-Region-Name: DFW' -H 'X-Auth-Key: pinkH201' -H 'Accept: application/json' -H 'User-Agent: python-heatclient' -H 'Content-Type: application/json' -d '{"stack_name": "Servers-With-LB-Stack", "disable_rollback": true, "parameters": {}, "template": "heat_template_version: 2014-10-16\n\ndescription: |   \n  Heat Orchestration Template that spins up a\n  resource group with 2 cloud servers.\n\nresources:\n  web_nodes:\n    type: OS::Heat::ResourceGroup\n    properties:\n      count: 2\n      resource_def:\n        type: OS::Nova::Server\n        properties:\n          flavor: 1GB Standard Instance\n          image: CentOS 6.4\n          name: LB-Compute Web Nodes  \n\n\n", "timeout_mins": 60}' https://ord.orchestration.api.rackspacecloud.com/v1/647683/stacks</programlisting>
                        </example>
                        <remark security="writeronly">Reviewer: There
                            is a working example above from the
                            stack-create debug output.</remark>
                    </step>
                    <step>
                        <para>The following example shows the
                            response.</para>
                        <example>
                            <title>Create stack: JSON response</title>
                            <programlisting language="json">HTTP/1.1 201 Created
Server: nginx/1.2.1
Date: Fri, 31 Jan 2014 17:09:37 GMT
Content-Type: application/json
Content-Length: 192
Location: https://ord.orchestration.api.rackspacecloud.com/v1/1234/stacks/Servers-With-LB-Stack/e7b67698-3929-43af-8e59-9652d00b7250
Connection: keep-alive
Via: 1.0 Repose (Repose/2.13.0)

{"stack": {"id": "e7b67698-3929-43af-8e59-9652d00b7250", "links": [{"href": "http://ord.orchestration.api.rackspacecloud.com/v1/1234/stacks/Servers-With-LB-Stack/e7b67698-3929-43af-8e59-9652d00b7250", "rel": "self"}]}}</programlisting>
                        </example>
                        <para>The stack
                                <code>Servers-With-LB-Stack</code> was
                            successfully created and has the id
                                <code>e7b67698-3929-43af-8e59-9652d00b7250</code>.</para>
                    </step>
                </procedure>
            </section>
        </section>
        <section xml:id="Update_Stack_W_LB">
            <title>Step 11. Update a stack with a load
                balancer</title>
            <para>In this section you update your stack by adding a
                load balancer to use with the two servers.</para>
            <orderedlist>
                <listitem>
                    <para>Make a copy of your
                            <filename>servers-with-lb.template</filename>
                        from the previous section and name the copy
                            <filename>servers-with-lb-add.template</filename>.
                    </para>
                </listitem>
                <listitem>
                    <para>Add the load balancer to your
                            <filename>servers-with-lb-add.template</filename>
                        file by adding the highlighted text in the
                        following example.</para>
                </listitem>
            </orderedlist>
            <example>
                <title>servers-with-lb-add.template with load balancer
                    added example</title>
                <programlisting language="txt">
heat_template_version: 2014-10-16

description: |   
  Heat Orchestration Template that spins up a
  resource group with 2 cloud servers
  <emphasis role="bold">and a cloud load balancer</emphasis>.

resources:
  web_nodes:
    type: OS::Heat::ResourceGroup
    properties:
      count: 2
      resource_def:
        type: OS::Nova::Server
        properties:
          flavor: 1 GB General Purpose v1
          image: CentOS 6 (PV)
          name: LB-Compute Web Nodes   

     
<emphasis role="bold">  lb:
    type: Rackspace::Cloud::LoadBalancer
    properties:
      name: LB-Compute load balancer
      nodes:
      - addresses: { get_attr: [web_nodes, accessIPv4]} # This is where the
                                                       # wiring magic happens
        port: 80
        condition: ENABLED
      healthMonitor:
        attemptsBeforeDeactivation: 3
        delay: 10
        timeout: 120
        type: HTTP
        path: "/"
        statusRegex: "."
        bodyRegex: "."
      protocol: HTTP
      port: 80
      virtualIps:
      - type: PUBLIC
        ipVersion: IPV4

outputs:
  lb_public_ip:
    description: The public IP address of the load balancer
    value: { get_attr: [lb, PublicIp]}  </emphasis>
    
            
                </programlisting>
            </example>
            <remark>Reviewer: the following extraneous text is placed
                into the HTML version of  the above example as a
                result of the emphasis: &lt;span class= "bold"
                &gt;&lt;strong&gt; . It is placed immediately before
                the lb: section. Need to ask David Cramer how to
                fix.</remark>
            <para>In the <code>description</code> section, you added
                the information that the template now also creates a
                load balancer.</para>
            <para>For the <code>lb</code> resource (in the
                    <code>resources</code> section), you added the
                information to create the load balancer. The resource
                type is <code>Rackspace::Cloud::LoadBalancer</code>.
                The load balancer has the following
                    <code>properties</code>:</para>
            <itemizedlist>
                <listitem>
                    <para>It is named <code>LB-Compute load
                            balancer</code>. </para>
                </listitem>
                <listitem>
                    <para>It defines a list of <code>addresses</code>
                        for the back-end nodes by calling the
                            <code>get_attr</code> intrinsic function,
                        passing it the name of the resource group
                            (<code>web_nodes</code>) and the IP
                        address for each server resource
                            (<code>accessIPv4</code>), as defined in
                        the resource group. These back-end nodes are
                        the servers that you created in <xref
                            linkend="Create_Stack_W_RGroup"/>. Each
                        node uses port 80, and all nodes are enabled.
                    </para>
                </listitem>
                <listitem>
                    <para>The load balancer protocol is HTTP and the
                        service is defined on port 80. </para>
                </listitem>
                <listitem>
                    <para>One public IPV4 virtual IP address should be
                        added for the load balancer.</para>
                    <note>
                        <para>To create a ServiceNet address for the
                            load balancer instead of a public virtual
                            IP address, use the following value for
                                <code>type</code>
                            instead:<programlisting>- type: SERVICENET</programlisting>You
                            will also need to change the
                                <code>outputs</code> as
                            follows:<programlisting>outputs:
  lb_servicenet_ip:
    description: The Servicenet IP address of the load balancer
    value: { get_attr: [lb, virtualIps, 0, address ]}</programlisting>Note
                            that since <code>virtualIps</code> is an
                            array, you need to request the
                                <code>address</code> in the first
                            element of the array (array subscript
                                <code>0</code>) to get the Servicenet
                            address.</para>
                    </note>
                </listitem>
                <listitem>
                    <para>A health monitor is defined with the
                        following attributes set:</para>
                    <itemizedlist>
                        <listitem>
                            <para><code>attemptsBeforeDeactivation</code>
                                &ndash; Number of attempts made before
                                the node is removed from the
                                rotation</para>
                        </listitem>
                        <listitem>
                            <para><code>delay</code> &ndash; Number of
                                seconds to wait before executing the
                                health monitor</para>
                        </listitem>
                        <listitem>
                            <para><code>timeout</code> &ndash; Number
                                of seconds to wait for a connection to
                                be made before timing out</para>
                        </listitem>
                        <listitem>
                            <para><code>type</code> &ndash; Type of
                                the health monitor</para>
                        </listitem>
                        <listitem>
                            <para><code>path</code> &ndash; HTTP path
                                used in the monitor request</para>
                        </listitem>
                        <listitem>
                            <para><code>statusRegex</code> &ndash;
                                Regular expression used to evaluate
                                the HTTP status code returned in the
                                response</para>
                        </listitem>
                        <listitem>
                            <para><code>bodyRegex</code> &ndash;
                                Regular expression used to evaluate
                                the contents of the body of the
                                response</para>
                        </listitem>
                    </itemizedlist>
                </listitem>
            </itemizedlist>
            <para>The <code>outputs</code> section defines a single
                output <code>lb_public_ip</code>, which is the public
                IP address for the load balancer. Its value is
                assigned to the result of calling the
                    <code>get_attr</code> intrinsic function with the
                name of the resource (<code>lb</code>) and its
                attribute (<code>PublicIp</code>).</para>
            <para>Choose one of the following methods:<itemizedlist>
                    <listitem>
                        <para><xref linkend="Update_Stack_W_LB_Heat"
                            /></para>
                    </listitem>
                    <listitem>
                        <para><xref linkend="Update_Stack_W_LB_Curl"
                            /></para>
                    </listitem>
                </itemizedlist></para>
            <section xml:id="Update_Stack_W_LB_Heat">
                <title>Update a stack with a load balancer by using
                    the heat client</title>
                <procedure>
                    <title>To update the specified stack by using the
                        heat client:</title>
                    <step>
                        <para>Update the stack using the heat client. </para>
                        <para>Issue the following command:</para>
                        <programlisting language="bash" role="gutter: false"> heat stack-update Servers-With-LB-Stack --template-file servers-with-lb-add.template</programlisting>
                        <para>The command returns the information
                            about the stack, including its status
                                <code>UPDATE_IN_PROGRESS</code>:</para>
                        <informalexample>
                            <?dbfo pgwide="1"?>
                            <screen><computeroutput><?db-font-size 44%?>
+--------------------------------------+-----------------------+--------------------+----------------------+
| id                                   | stack_name            | stack_status       | creation_time        |
+--------------------------------------+-----------------------+--------------------+----------------------+
| e7b67698-3929-43af-8e59-9652d00b7250 | Servers-With-LB-Stack | UPDATE_IN_PROGRESS | 2014-01-28T18:00:27Z |
+--------------------------------------+-----------------------+--------------------+----------------------+
</computeroutput></screen>
                        </informalexample>
                    </step>
                    <step>
                        <para>Wait a couple of minutes and then issue
                            the following command:</para>
                        <programlisting language="bash" role="gutter: false"><prompt>$</prompt> heat stack-show Servers-With-LB-Stack</programlisting>
                        <para>The command returns the details about
                            the stack, including its
                                <code>stack_status</code>
                            <code>UPDATE_COMPLETE</code>:</para>
                        <informalexample>
                            <?dbfo pgwide="1"?>
                            <screen><computeroutput><?db-font-size 44%?>
+----------------------+------------------------------------------------------------------------------------------------------------------------------+
| Property             | Value                                                                                                                        |
+----------------------+------------------------------------------------------------------------------------------------------------------------------+
| capabilities         | []                                                                                                                           |
| creation_time        | 2014-01-28T18:00:27Z                                                                                                         |
| description          | Heat Orchestration Template that spins up a resource                                                                         |
|                      | group with 2 cloud servers and a Cloud Load                                                                        |
|                      | Balancer.                                                                                                                    |
| disable_rollback     | True                                                                                                                         |
| id                   | e7b67698-3929-43af-8e59-9652d00b7250                                                                                         |
| links                | http://ord.orchestration.api.rackspacecloud.com/v1/1234/stacks/Servers-With-LB-Stack/e7b67698-3929-43af-8e59-9652d00b7250    |
| notification_topics  | []                                                                                                                           |
| outputs              | [                                                                                                                            |
|                      |   {                                                                                                                          |
|                      |     "output_value": "162.242.141.48",                                                                                        |
|                      |     "description": "The public IP address of the load balancer",                                                             |
|                      |     "output_key": "lb_public_ip"                                                                                             |
|                      |   }                                                                                                                          |
|                      | ]                                                                                                                            |
| parameters           | {                                                                                                                            |
|                      |   "OS::stack_name": "Servers-With-LB-Stack",                                                                                 |
|                      |   "OS::stack_id": "e7b67698-3929-43af-8e59-9652d00b7250"                                                                     |
|                      | }                                                                                                                            |
| stack_name           | Servers-With-LB-Stack                                                                                                        |
| stack_status         | UPDATE_COMPLETE                                                                                                              |
| stack_status_reason  | Stack successfully updated                                                                                                   |
| template_description | Heat Orchestration Template that spins up a resource                                                                         |
|                      | group with 2 cloud servers and a Cloud Load                                                                        |
|                      | Balancer.                                                                                                                    |
| timeout_mins         | 60                                                                                                                           |
| updated_time         | 2014-01-28T21:34:47Z                                                                                                         |
+----------------------+------------------------------------------------------------------------------------------------------------------------------+</computeroutput></screen>
                        </informalexample>
                        <para>The <code>outputs</code> property (set
                            in the <code>outputs</code> section of the
                            template), shows that the public IP
                            address of the new load balancer is
                            162.242.141.48.</para>
                    </step>
                </procedure>
            </section>
            <section xml:id="Update_Stack_W_LB_Curl">
                <title>Update a stack with a load balancer by using
                    cURL</title>
                <procedure>
                    <title>To update the specified stack with by using
                        cURL:</title>
                    <step>
                        <para>Update the stack by executing the
                            following request.</para>
                        <para>Remember to replace the names in the
                            example preceding with their actual
                            respective values:<itemizedlist
                                spacing="compact">
                                <listitem>
                                   <para><emphasis role="bold"
                                   >Servers-With-LB-Stack</emphasis>
                                   &mdash; The name of the stack, if
                                   you changed it</para>
                                </listitem>
                                <listitem>
                                   <para><emphasis role="bold"
                                   >stack_id</emphasis> &mdash; The ID
                                   of the stack, as returned in your
                                   create stack response (see the
                                   example in <xref
                                   linkend="Create_Simple_Stack_CS_CURL"
                                   />)</para>
                                </listitem>
                            </itemizedlist></para>
                        <example>
                            <?dbfo keep-together="always"?>
                            <title>cURL update stack with load
                                balancer: JSON request</title>
                            <programlisting language="bash"><command>curl</command> <option>-i -X PUT -H  'Accept: application/json' -H  'Content-Type: application/json' -H  "X-Auth-Token: $OS_AUTH_TOKEN" -d</option> \
'{
  "stack_name": "Servers-With-LB-Stack", 
  "disable_rollback": true, 
  "parameters": {}, 
  "template": "heat_template_version: 2014-10-16\n\ndescription: |   \n  Heat Orchestration Template that spins up a\n  resource group with 2 cloud servers\n  and a cloud load balancer.\n\nresources:\n  web_nodes:\n    type: OS::Heat::ResourceGroup\n    properties:\n      count: 2\n      resource_def:\n        type: OS::Nova::Server\n        properties:\n          flavor: 1 GB General Purpose v1\n          image: CentOS 6 (PV)\n          name: LB-Compute Web Nodes  \n\n  lb:\n    type: Rackspace::Cloud::LoadBalancer\n    properties:\n      name: LB-Compute load balancer\n      nodes:\n      - addresses: { get_attr: [web_nodes, accessIPv4]} # This is where the\n                                                       # wiring magic happens\n        port: 80\n        condition: ENABLED\n      healthMonitor:\n        attemptsBeforeDeactivation: 3\n        delay: 10\n        timeout: 120\n        type: HTTP\n        path: \"/\"\n        statusRegex: \".\"\n        bodyRegex: \".\"\n      protocol: HTTP\n      port: 80\n      virtualIps:\n      - type: PUBLIC\n        ipVersion: IPV4\n\noutputs:\n  lb_public_ip:\n    description: The public IP address of the load balancer\n    value: { get_attr: [lb, PublicIp]}  \n\n", 
  "timeout_mins": 60
}' \
<uri>https://ord.orchestration.api.rackspacecloud.com/v1/</uri>$OS_TENANT_ID<uri>/stacks/</uri><emphasis role="bold">Servers-With-LB-Stack/stack_id</emphasis></programlisting>
                        </example>
                    </step>
                    <step>
                        <para>The following example shows the response
                            for update stack with load
                            balancer:</para>
                        <example>
                            <title>Update stack with load balancer:
                                JSON response</title>
                            <programlisting language="json">HTTP/1.1 100 Continue

HTTP/1.1 202 Accepted
Server: nginx/1.2.1
Date: Fri, 31 Jan 2014 22:06:57 GMT
Content-Type: text/plain;charset=UTF-8
Content-Length: 58
Connection: keep-alive
Via: 1.0 Repose (Repose/2.13.0)

202 Accepted

The request is accepted for processing.
</programlisting>
                        </example>
                        <para>After a few minutes, you can execute the
                            show stack details operation to ensure
                            that the update completed
                            successfully:</para>
                        <para>Remember to replace the names in the
                            example with their actual respective
                                values:<itemizedlist spacing="compact">
                                <listitem>
                                   <para><emphasis role="bold"
                                   >Servers-With-LB-Stack</emphasis>
                                   &mdash; If you used a different
                                   name for your stack, specify it
                                   (see the example in <xref
                                   linkend="Create_Stack_W_RGroup_CURL"
                                   />)</para>
                                </listitem>
                                <listitem>
                                   <para><emphasis role="bold"
                                   >stack_id</emphasis> &mdash; The
                                   stack ID, as returned in your
                                   create stack response (see the
                                   example in <xref
                                   linkend="Create_Simple_Stack_CS_CURL"
                                   />)</para>
                                </listitem>
                            </itemizedlist></para>
                        <example>
                            <?dbfo keep-together="always"?>
                            <title>cURL show stack details: JSON
                                request</title>
                            <programlisting language="bash"><command>curl</command> <option>-s</option> \
<option>-H "X-Auth-Token: $OS_AUTH_TOKEN"</option> \
<option>-H "Content-Type: application/json"</option> \
<uri>https://ord.orchestration.api.rackspacecloud.com/v1/</uri>$OS_TENANT_ID<uri>/stacks</uri>/Servers-With-LB-Stack/<emphasis role="bold">stack_id</emphasis> | python -m json.tool</programlisting>
                        </example>
                    </step>
                </procedure>
                <para>The following example shows the response.</para>
                <example>
                    <?dbfo keep-together="always"?>
                    <title>Show stack details: JSON response</title>
                    <programlisting language="bash">{
    "stack": {
        "capabilities": [], 
        "creation_time": "2014-01-31T22:02:46Z", 
        "description": "Heat Orchestration Template that spins up a\nresource group with 2 cloud servers\nand a cloud load balancer.\n", 
        "disable_rollback": true, 
        "id": "6574e1b1-4c22-49f5-a06d-6d99eb8d87c6", 
        "links": [
            {
                "href": "http://ord.orchestration.api.rackspacecloud.com/v1/1234/stacks/Servers-With-LB-Stack/6574e1b1-4c22-49f5-a06d-6d99eb8d87c6", 
                "rel": "self"
            }
        ], 
        "notification_topics": [], 
        "outputs": [
            {
                "description": "The public IP address of the load balancer", 
                "output_key": "lb_public_ip", 
                "output_value": "184.106.100.140"
            }
        ], 
        "parameters": {
            "OS::stack_name": "Servers-With-LB-Stack", 
            "OS::stack_id": "6574e1b1-4c22-49f5-a06d-6d99eb8d87c6"
        }, 
        "stack_name": "Servers-With-LB-Stack", 
        "stack_status": "UPDATE_COMPLETE", 
        "stack_status_reason": "Stack successfully updated", 
        "template_description": "Heat Orchestration Template that spins up a\nresource group with 2 cloud servers\nand a cloud load balancer.\n", 
        "timeout_mins": 60, 
        "updated_time": "2014-01-31T22:08:01Z"
    }
}
</programlisting>
                </example>
            </section>
        </section>
        <section xml:id="Delete_Stack_W_LB">
            <title>Step 12. Delete a stack with a load
                balancer</title>
            <para>When you are finished using your stack, delete it by
                using the commands shown in <xref
                    linkend="Delete_Stack"/>. Be sure to adjust the
                stack name (and for cURL, the <code>stack_id</code>)
                as necessary to reflect the new
                    <code>Servers-With-LB-Stack</code> that you are
                deleting.</para>
            <para>This concludes the <citetitle>Getting
                    Started</citetitle> exercises.</para>
            <para>See the following section for a summary of the heat
                client commands.</para>
            <para>For more tutorials on using Cloud Orchestration, see
                the <link
                    xlink:href="https://github.com/rackerlabs/heat-tutorial"
                    >Heat Tutorial</link>.</para>
        </section></chapter>
    <chapter xml:id="Orch_Doc_Change_History">
        <title>Document change history</title>
        <para>This version of the guide replaces and obsoletes all
            previous versions. The most recent changes are described
            in the following table:</para>
        <?rax revhistory?>
    </chapter>
    
    <appendix xmlns="http://docbook.org/ns/docbook"
        xmlns:xi="http://www.w3.org/2001/XInclude"
        xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0"
        xml:id="heat_summary">
        <title>heat Client command summary</title>
        <para>Use the following heat client commands to perform API
            operations: </para>
        <section xml:id="heat_summary_stacks">
            <title>Stack operations</title>
            <variablelist wordsize="10%">
                <varlistentry>
                    <term><emphasis role="bold">Create
                            stack</emphasis></term>
                    <listitem>
                        <programlisting language="bash" role="gutter: false"><prompt>$</prompt> heat stack-create &lt;STACK_NAME&gt; 
[-f &lt;FILE&gt;] [-e &lt;FILE&gt;] [-u &lt;URL&gt;] [-o &lt;URL&gt;]  
[-c &lt;TIMEOUT&gt;] [-c &lt;TIMEOUT&gt;] [-r ] [-P &lt;KEY1=VALUE1;KEY2=VALUE2...>] </programlisting>
                        <itemizedlist>
                            <title>Positional arguments</title>
                            <listitem>
                                <para>
                                   <parameter>STACK_NAME</parameter>.
                                   The name of the stack to create.
                                </para>
                            </listitem>
                        </itemizedlist>
                        <itemizedlist>
                            <title>Optional arguments</title>
                            <listitem>
                                <para>
                                   <option>-f &lt;FILE&gt; ,
                                   --template-file
                                   &lt;FILE&gt;</option>. The path to
                                   the template. </para>
                            </listitem>
                            <listitem>
                                <para><option>-e &lt;FILE&gt; ,
                                   --environment-file
                                   &lt;FILE&gt;</option>. The path to
                                   the environment. </para>
                            </listitem>
                            <listitem>
                                <para><option>-u &lt;URL&gt; ,
                                   --template-url
                                   &lt;URL&gt;</option>. The URL of
                                   the template. </para>
                            </listitem>
                            <listitem>
                                <para><option>-o &lt;URL&gt; ,
                                   --template-object
                                   &lt;URL&gt;</option>. The URL to
                                   retrieve the template object (for
                                   example from Swift). </para>
                            </listitem>
                            <listitem>
                                <para><option>-c &lt;TIMEOUT&gt; ,
                                   --create-timeout
                                   &lt;TIMEOUT&gt;</option>. The stack
                                   creation timeout in minutes.
                                   Default: 60. (DEPRECATED. Use -t
                                   instead) </para>
                            </listitem>
                            <listitem>
                                <para><option>-t &lt;TIMEOUT&gt; ,
                                   --timeout
                                   &lt;TIMEOUT&gt;</option>. The stack
                                   creation timeout in minutes.
                                   Default: 60. </para>
                            </listitem>
                            <listitem>
                                <para><option>-r ,
                                   --enable-rollback</option>. Enable
                                   rollback on a create or update
                                   failure.</para>
                            </listitem>
                            <listitem>
                                <para><option>-P
                                   &lt;KEY1=VALUE1;KEY2=VALUE2...&gt;
                                   , --parameters
                                   &lt;KEY1=VALUE1;KEY2=VALUE2...&gt;</option>.
                                   Parameter values used to create the
                                   stack. This argument can be
                                   specified multiple times, or once
                                   with parameters separated by
                                   semicolon. </para>
                            </listitem>
                        </itemizedlist>
                    </listitem>
                </varlistentry>
            </variablelist>
            <variablelist wordsize="10%">
                <varlistentry>
                    <term><emphasis role="bold">List stack
                            data</emphasis></term>
                    <listitem>
                        <programlisting language="bash" role="gutter: false"><prompt>$</prompt> heat stack-list</programlisting>
                    </listitem>
                </varlistentry>
            </variablelist>
            <variablelist wordsize="10%">
                <varlistentry>
                    <term><emphasis role="bold">Get stack
                            data</emphasis></term>
                    <listitem>
                        <programlisting language="bash" role="gutter: false"><prompt>$</prompt> heat stack-show &lt;NAME or ID&gt;</programlisting>
                        <para><parameter>NAME</parameter> is the name
                            of the stack, or <parameter>ID</parameter>
                            is the ID of the stack to show. </para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <variablelist wordsize="10%">
                <varlistentry>
                    <term><emphasis role="bold">Delete
                            stack</emphasis></term>
                    <listitem>
                        <programlisting language="bash" role="gutter: false"><prompt>$</prompt> heat stack-delete &lt;NAME or ID&gt;</programlisting>
                        <para><parameter>NAME</parameter> is the name
                            of the stack, or <parameter>ID</parameter>
                            is the ID of the stack to delete. </para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <variablelist wordsize="10%">
                <varlistentry>
                    <term><emphasis role="bold">Abandon
                            stack</emphasis></term>
                    <listitem>
                        <programlisting language="bash" role="gutter: false"><prompt>$</prompt> heat stack-abandon &lt;NAME or ID&gt;</programlisting>
                        <para><parameter>NAME</parameter> is the name
                            of the stack, or <parameter>ID</parameter>
                            is the ID of the stack to abandon. This
                            command deletes a specified stack, but
                            leaves its resources intact, and returns
                            data describing the stack and its
                            resources.</para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <variablelist wordsize="10%">
                <varlistentry>
                    <term><emphasis role="bold">Cancel
                            stack update</emphasis></term>
                    <listitem>
                        <programlisting language="bash" role="gutter: false"><prompt>$</prompt> heat stack-cancel-update &lt;NAME or ID&gt;</programlisting>
                        <para><parameter>NAME</parameter> is the name
                            of the stack, or <parameter>ID</parameter>
                            is the ID of the stack. </para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <variablelist wordsize="10%">
                <varlistentry>
                    <term><emphasis role="bold">Preview
                            stack</emphasis></term>
                    <listitem>
                        <programlisting language="bash" role="gutter: false"><prompt>$</prompt> heat stack-preview &lt;STACK_NAME&gt; 
[-f &lt;FILE&gt;] [-e &lt;FILE&gt;] [-u &lt;URL&gt;] [-o &lt;URL&gt;]  
[-c &lt;TIMEOUT&gt;] [-t &lt;TIMEOUT&gt;][-r ] [-P &lt;KEY1=VALUE1;KEY2=VALUE2...>] </programlisting>
                        <itemizedlist>
                            <title>Positional arguments</title>
                            <listitem>
                                <para>
                                   <parameter>STACK_NAME</parameter>.
                                   The name of the stack to preview.
                                </para>
                            </listitem>
                        </itemizedlist>
                        <itemizedlist>
                            <title>Optional arguments</title>
                            <listitem>
                                <para>
                                   <option>-f &lt;FILE&gt; ,
                                   --template-file
                                   &lt;FILE&gt;</option>. The path to
                                   the template. </para>
                            </listitem>
                            <listitem>
                                <para><option>-e &lt;FILE&gt; ,
                                   --environment-file
                                   &lt;FILE&gt;</option>. The path to
                                   the environment. </para>
                            </listitem>
                            <listitem>
                                <para><option>-u &lt;URL&gt; ,
                                   --template-url
                                   &lt;URL&gt;</option>. The URL of
                                   the template. </para>
                            </listitem>
                            <listitem>
                                <para><option>-o &lt;URL&gt; ,
                                   --template-object
                                   &lt;URL&gt;</option>. The URL to
                                   retrieve the template object (for
                                   example from Swift). </para>
                            </listitem>
                            <listitem>
                                <para><option>-c &lt;TIMEOUT&gt; ,
                                   --create-timeout
                                   &lt;TIMEOUT&gt;</option>. The stack
                                   creation timeout in minutes.
                                   Default: 60. (DEPRECATED. Use -t
                                   instead.) </para>
                            </listitem>
                            <listitem>
                                <para><option>-t &lt;TIMEOUT&gt; ,
                                   --timeout
                                   &lt;TIMEOUT&gt;</option>. The stack
                                   creation timeout in minutes.
                                   Default: 60. </para>
                            </listitem>
                            <listitem>
                                <para><option>-r ,
                                   --enable-rollback</option>. Enable
                                   rollback on a create or update
                                   failure.</para>
                            </listitem>
                            <listitem>
                                <para><option>-P
                                   &lt;KEY1=VALUE1;KEY2=VALUE2...&gt;
                                   , --parameters
                                   &lt;KEY1=VALUE1;KEY2=VALUE2...&gt;</option>.
                                   Parameter values used to create the
                                   stack. This can be specified
                                   multiple times, or once with
                                   parameters separated by semicolon.
                                </para>
                            </listitem>
                        </itemizedlist>
                    </listitem>
                </varlistentry>
            </variablelist>
            <variablelist wordsize="10%">
                <varlistentry>
                    <term><emphasis role="bold">Adopt
                            stack</emphasis></term>
                    <listitem>
                        <programlisting language="bash" role="gutter: false"><prompt>$</prompt> heat stack-adopt &lt;STACK_NAME&gt; 
[-e &lt;FILE&gt;] [-c &lt;TIMEOUT&gt;] [-t &lt;TIMEOUT&gt;] [-a &lt;FILE&gt;]  
[-r ] [-P &lt;KEY1=VALUE1;KEY2=VALUE2...>] </programlisting>
                        <itemizedlist>
                            <title>Positional argument</title>
                            <listitem>
                                <para>
                                   <parameter>STACK_NAME</parameter>.
                                   The name of the stack to adopt.
                                   This operation creates a stack from
                                   existing resources.</para>
                            </listitem>
                        </itemizedlist>
                        <itemizedlist>
                            <title>Optional arguments</title>
                            <listitem>
                                <para><option>-e &lt;FILE&gt; ,
                                   --environment-file
                                   &lt;FILE&gt;</option>. The path to
                                   the environment. </para>
                            </listitem>
                            <listitem>
                                <para><option>-c &lt;TIMEOUT&gt; ,
                                   --create-timeout
                                   &lt;TIMEOUT&gt;</option>. The stack
                                   creation timeout in minutes.
                                   Default: 60. (DEPRECATED. Use -t
                                   instead.) </para>
                            </listitem>
                            <listitem>
                                <para><option>-t &lt;TIMEOUT&gt; ,
                                   --timeout
                                   &lt;TIMEOUT&gt;</option>. The stack
                                   creation timeout in minutes.
                                   Default: 60. </para>
                            </listitem>
                            <listitem>
                                <para><option>-a &lt;FILE&gt; ,
                                   --adopt-file &lt;FILE&gt;</option>.
                                   The path to the data file to adopt. </para>
                            </listitem>
                            <listitem>
                                <para><option>-r ,
                                   --enable-rollback</option>. Enable
                                   rollback on create/update
                                   failure.</para>
                            </listitem>
                            <listitem>
                                <para><option>-P
                                   &lt;KEY1=VALUE1;KEY2=VALUE2...&gt;
                                   , --parameters
                                   &lt;KEY1=VALUE1;KEY2=VALUE2...&gt;</option>.
                                   Parameter values used to create the
                                   stack. This can be specified
                                   multiple times, or once with
                                   parameters separated by semicolon.
                                </para>
                            </listitem>
                        </itemizedlist>
                    </listitem>
                </varlistentry>
            </variablelist>            
            <variablelist wordsize="10%">
                <varlistentry>
                    <term><emphasis role="bold">Update
                            stack</emphasis></term>
                    <listitem>
                        <programlisting language="bash" role="gutter: false"><prompt>$</prompt> heat stack-update &lt;NAME or ID&gt; 
[-f &lt;FILE&gt;] [-e &lt;FILE&gt;] [-u &lt;URL&gt;] [-o &lt;URL&gt;]  
[-P &lt;KEY1=VALUE1;KEY2=VALUE2...>] </programlisting>
                        <para><parameter>NAME</parameter> is the name
                            of the stack, or <parameter>ID</parameter>
                            is the ID of the stack to update. </para>
                    </listitem>
                </varlistentry>
            </variablelist>
        </section>
        <section xml:id="heat_summary_stack_actions" security="writeronly">
            <title>Stack Actions</title>
            <variablelist wordsize="10%">
                <varlistentry>
                    <term><emphasis role="bold">Resume
                            stack</emphasis></term>
                    <listitem>
                        <programlisting language="bash" role="gutter: false"><prompt>$</prompt> heat action-resume &lt;NAME or ID&gt;</programlisting>
                        <para> Where <parameter>NAME</parameter> is
                            the name of the stack, or
                                <parameter>ID</parameter> is the ID of
                            the stack to resume. </para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <variablelist wordsize="10%">
                <varlistentry>
                    <term><emphasis role="bold">Suspend
                            stack</emphasis></term>
                    <listitem>
                        <programlisting language="bash" role="gutter: false"><prompt>$</prompt> heat action-suspend &lt;NAME or ID&gt;</programlisting>
                        <para> Where <parameter>NAME</parameter> is
                            the name of the stack, or
                                <parameter>ID</parameter> is the ID of
                            the stack to suspend. </para>
                    </listitem>
                </varlistentry>
            </variablelist>
        </section>
        <section xml:id="heat_summary_stack_resources">
            <title>Stack resources</title>
            <variablelist wordsize="10%">
                <varlistentry>
                    <term><emphasis role="bold">List stack
                            resources</emphasis></term>
                    <listitem>
                        <programlisting language="bash" role="gutter: false"><prompt>$</prompt> heat resource-list &lt;NAME or ID&gt;</programlisting>
                        <para><parameter>NAME</parameter> is the name
                            of the stack, or <parameter>ID</parameter>
                            is the ID of the stack for which to list
                            resources. </para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <variablelist wordsize="10%">
                <varlistentry>
                    <term><emphasis role="bold">List resource
                            metadata</emphasis></term>
                    <listitem>
                        <programlisting language="bash" role="gutter: false"><prompt>$</prompt> heat resource-metadata &lt;NAME or ID&gt; &lt;RESOURCE></programlisting>
                        <para><parameter>NAME</parameter> is the name
                            of the stack, or <parameter>ID</parameter>
                            is the ID of the stack for which to show
                            resource metadata. </para>
                        <para><parameter>RESOURCE</parameter> is the
                            name of the resource for which to show
                            metadata. </para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <variablelist wordsize="10%">
                <varlistentry>
                    <term><emphasis role="bold">Show
                            resource</emphasis></term>
                    <listitem>
                        <programlisting language="bash" role="gutter: false"><prompt>$</prompt> heat resource-show &lt;NAME or ID&gt; &lt;RESOURCE></programlisting>
                        <para><parameter>NAME</parameter> is the name
                            of the stack, or <parameter>ID</parameter>
                            is the ID of the stack for which to show
                            the resource. </para>
                        <para><parameter>RESOURCE</parameter> is the
                            name of the resource for which to show the
                            details. </para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <variablelist wordsize="10%">
                <varlistentry>
                    <term><emphasis role="bold">Generate template
                            based on resource</emphasis></term>
                    <listitem>
                        <programlisting language="bash" role="gutter: false"><prompt>$</prompt> heat resource-template [-F &lt;FORMAT>] &lt;RESOURCE_TYPE></programlisting>
                        <para> DEPRECATED. Use
                                <code>resource-type-template</code>
                            instead </para>
                        <itemizedlist>
                            <title>Positional arguments</title>
                            <listitem>
                                <para><parameter>RESOURCE_TYPE</parameter>
                                   is the type of resource for which
                                   to generate a template. </para>
                            </listitem>
                        </itemizedlist>
                        <itemizedlist>
                            <title>Optional arguments</title>
                            <listitem>
                                <para><option>-F &lt;FORMAT></option>,
                                   <option>--format
                                   &lt;FORMAT></option>. The template
                                   output format: yaml or json. </para>
                            </listitem>
                        </itemizedlist>
                    </listitem>
                </varlistentry>
            </variablelist>
            <variablelist wordsize="10%">
                <varlistentry>
                    <term><emphasis role="bold">List resource
                            types</emphasis></term>
                    <listitem>
                        <programlisting language="bash" role="gutter: false"><prompt>$</prompt> heat resource-type-list</programlisting>
                    </listitem>
                </varlistentry>
            </variablelist>
            <variablelist wordsize="10%">
                <varlistentry>
                    <term><emphasis role="bold">Show resource
                            type</emphasis></term>
                    <listitem>
                        <programlisting language="bash" role="gutter: false"><prompt>$</prompt> heat resource-type-show &lt;RESOURCE_TYPE></programlisting>
                        <para><parameter>RESOURCE_TYPE</parameter> is
                            the type of the resource to show. </para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <variablelist wordsize="10%">
                <varlistentry>
                    <term><emphasis role="bold">Generate a template based 
                            on a resource type</emphasis></term>
                    <listitem>
                        <programlisting language="bash" role="gutter: false"><prompt>$</prompt> heat resource-type-template &lt;RESOURCE_TYPE> -F &lt;FORMAT></programlisting>
                        <para><parameter>RESOURCE_TYPE</parameter> is
                            the type of the resource. </para>
                        <itemizedlist>
                            <title>Optional arguments</title>
                            <listitem>
                                <para>
                                   <option>-F &lt;FORMAT&gt; ,
                                   --format &lt;FORMAT&gt;</option>.
                                   The template output format: yaml or
                                   json. </para>
                            </listitem>
                        </itemizedlist>
                    </listitem>
                </varlistentry>
            </variablelist>
            <variablelist wordsize="10%" security="writeronly">
                <varlistentry>
                    <term><emphasis role="bold">Send signal to a 
                            resource</emphasis></term>
                    <listitem>
                        <programlisting language="bash" role="gutter: false"><prompt>$</prompt> heat resource-signal &lt;NAME or ID&gt; &lt;RESOURCE&gt; -D &lt;DATA&gt; -f &lt;FILE&gt;  </programlisting>
                        <para> Where <parameter>NAME</parameter> is
                            the name of the stack, or
                                <parameter>ID</parameter> is the ID of
                            the stack for which to show resource
                            metadata. </para>
                        <para> And <parameter>RESOURCE</parameter> is
                            the name of the resource for which to show
                            metadata. </para>
                        <itemizedlist>
                            <title>Optional Arguments</title>
                            <listitem>
                                <para><option>-D &lt;DATA></option>,
                                   <option>--data
                                   &lt;DATA></option>. JSON data to
                                   send to the signal handler. </para>
                            </listitem>
                            <listitem>
                                <para><option>-F &lt;FILE></option>,
                                   <option>--data-file
                                   &lt;FILE></option>. File containing JSON 
                                   data to send to the signal handler. </para>
                            </listitem>
                        </itemizedlist>
                    </listitem>
                </varlistentry>
            </variablelist>            
        </section>
        <section xml:id="heat_summary_events">
            <title>Events</title>
            <variablelist wordsize="10%">
                <varlistentry>
                    <term><emphasis role="bold">List events for a
                            stack</emphasis></term>
                    <listitem>
                        <programlisting language="bash" role="gutter: false"><prompt>$</prompt> heat event-list [-r &lt;RESOURCE>] &lt;NAME or ID></programlisting>
                        <itemizedlist>
                            <title>Positional arguments</title>
                            <listitem>
                                <para>
                                   <parameter>&lt;NAME or
                                   ID></parameter>. NAME is the name
                                   of the stack, or ID is the ID of
                                   the stack for which to show the
                                   events.</para>
                            </listitem>
                        </itemizedlist>
                        <itemizedlist>
                            <title>Optional arguments</title>
                            <listitem>
                                <para><option>-r
                                   &lt;RESOURCE></option>,
                                   <option>--resource
                                   &lt;RESOURCE></option>. The name of
                                   the resource by which to filter
                                   events.</para>
                            </listitem>
                        </itemizedlist>
                    </listitem>
                </varlistentry>
            </variablelist>
            <variablelist wordsize="10%">
                <varlistentry>
                    <term><emphasis role="bold">Describe
                            event</emphasis></term>
                    <listitem>
                        <programlisting language="bash" role="gutter: false"><prompt>$</prompt> heat event-show &lt;NAME or ID> &lt;RESOURCE> &lt;EVENT></programlisting>
                        <itemizedlist>
                            <title>Positional arguments</title>
                            <listitem>
                                <para>
                                   <parameter>&lt;NAME or
                                   ID></parameter>. NAME is the name
                                   of the stack, or ID is the ID of
                                   the stack for which to show the
                                   events.</para>
                            </listitem>
                            <listitem>
                                <para>
                                   <parameter>&lt;RESOURCE></parameter>.
                                   The name of the resource to which
                                   the event belongs.</para>
                            </listitem>
                            <listitem>
                                <para>
                                   <parameter>&lt;EVENT></parameter>.
                                   The ID of the event for which to
                                   display details.</para>
                            </listitem>
                        </itemizedlist>
                    </listitem>
                </varlistentry>
            </variablelist>
            <?hard-pagebreak?>
        </section>
        <section xml:id="heat_summary_templates">
            <title>Templates</title>
            <variablelist wordsize="10%">
                <varlistentry>
                    <term><emphasis role="bold">Get template for a
                            stack</emphasis></term>
                    <listitem>
                        <programlisting language="bash" role="gutter: false"><prompt>$</prompt> heat template-show &lt;NAME or ID></programlisting>
                        <para><parameter>&lt;NAME or ID></parameter>
                            NAME is the name of the stack, or ID is
                            the ID of the stack for which to get the
                            template. </para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <variablelist wordsize="10%">
                <varlistentry>
                    <term><emphasis role="bold">Validate template with
                            parameters</emphasis></term>
                    <listitem>
                        <programlisting language="bash" role="gutter: false"><prompt>$</prompt> heat template-validate [-u &lt;URL>] [-f &lt;FILE>] [-e &lt;FILE>] [-o &lt;URL>]
                              [-P &lt;KEY1=VALUE1;KEY2=VALUE2...>]</programlisting>
                        <itemizedlist>
                            <title>Optional arguments</title>
                            <listitem>
                                <para><option>-u &lt;URL></option>,
                                   <option>--template-url
                                   &lt;URL></option>. The URL of the
                                   template.</para>
                            </listitem>
                            <listitem>
                                <para><option>-f &lt;FILE></option>,
                                   <option>--template-file
                                   &lt;FILE></option>. The path to the
                                   template.</para>
                            </listitem>
                            <listitem>
                                <para><option> -e &lt;FILE></option>,
                                   <option>--environment-file</option>.
                                   The path to the environment.</para>
                            </listitem>
                            <listitem>
                                <para><option>-o &lt;URL></option>,
                                   <option>--template-object
                                   &lt;URL></option>. The URL from
                                   which to retrieve the template
                                   object (for example, from
                                   Swift).</para>
                            </listitem>
                            <listitem>
                                <para><option>-P
                                   &lt;KEY1=VALUE1;KEY2=VALUE2...></option>,
                                   <option>--parameters
                                   &lt;KEY1=VALUE1;KEY2=VALUE2...></option>.
                                   The parameter values to validate.
                                   This argument can be specified
                                   multiple times, or once with
                                   parameters separated by
                                   semicolons.</para>
                            </listitem>
                        </itemizedlist>
                    </listitem>
                </varlistentry>
            </variablelist>
            <?hard-pagebreak?>
        </section>
        <section xml:id="heat_summary_miscellaneous">
            <title>Miscellaneous</title>
            <variablelist wordsize="10%">
                <varlistentry>
                    <term><emphasis role="bold">Display help for heat
                            client</emphasis></term>
                    <listitem>
                        <programlisting language="bash" role="gutter: false"><prompt>$</prompt> heat help</programlisting>
                    </listitem>
                </varlistentry>
            </variablelist>
            <variablelist wordsize="10%">
                <varlistentry>
                    <term><emphasis role="bold">Display help for heat
                            client command</emphasis></term>
                    <listitem>
                        <programlisting language="bash" role="gutter: false"><prompt>$</prompt> heat help &lt;COMMAND&gt;</programlisting>
                        <para><parameter>COMMAND</parameter> is the
                            name of the command for which to display
                            help. </para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <variablelist wordsize="10%">
                <varlistentry>
                    <term><emphasis role="bold">Display build
                            information for heat
                        client</emphasis></term>
                    <listitem>
                        <programlisting language="bash" role="gutter: false"><prompt>$</prompt> heat build-info</programlisting>
                    </listitem>
                </varlistentry>
            </variablelist>
            <variablelist wordsize="10%">
                <varlistentry>
                    <term><emphasis role="bold">Provide bash
                            completion for heat</emphasis></term>
                    <listitem>
                        <programlisting language="bash" role="gutter: false"><prompt>$</prompt> heat bash-completion</programlisting>
                        <note>
                            <para>To provide bash completion for heat
                                for the current session, enter the
                                following command:</para>
                            <para><code>$ complete -W "`heat
                                   bash-completion`"
                                heat</code></para>
                        </note>
                    </listitem>
                </varlistentry>
            </variablelist>
        </section>
</appendix>
    
</book>
