<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book [
        <!-- Some useful entities borrowed from HTML -->
        <!ENTITY ndash  "&#x2013;">
        <!ENTITY mdash  "&#x2014;">
        <!ENTITY hellip "&#x2026;">

        <!-- Useful for describing APIs -->
        <!ENTITY GET    '<command xmlns="http://docbook.org/ns/docbook">GET</command>'>
        <!ENTITY PUT    '<command xmlns="http://docbook.org/ns/docbook">PUT</command>'>
        <!ENTITY POST   '<command xmlns="http://docbook.org/ns/docbook">POST</command>'>
        <!ENTITY DELETE '<command xmlns="http://docbook.org/ns/docbook">DELETE</command>'>
        
        <!-- changing authentication endpoints; define entities for US & UK rather than maintaining in text -->
        <!ENTITY ENDPOINT-US "https://identity.api.rackspacecloud.com/v1.1/">
        <!ENTITY ENDPOINT-UK "https://lon.identity.api.rackspacecloud.com/v1.1/">
        <!ENTITY ENDPOINT-US-20 "https://identity.api.rackspacecloud.com/v2.0/">
        <!ENTITY ENDPOINT-UK-20 "https://lon.identity.api.rackspacecloud.com/v2.0/">
        
        <!-- changing product name; define entity for product name rather than maintaining in text -->
        <!ENTITY Checkmate "Cloud Orchestration">
        <!ENTITY Deployment "Cloud Orchestration">
        <!ENTITY DeploymentG "orchestration">

]>
<book xmlns="http://docbook.org/ns/docbook"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:svg="http://www.w3.org/2000/svg"
    xmlns:m="http://www.w3.org/1998/Math/MathML"
    xmlns:html="http://www.w3.org/1999/xhtml" xml:id="orchestration-api-v1-reference"
    version="5.0">
    <?rax title.font.size="35px" subtitle.font.size="20px"?>
    <title>Rackspace Cloud Orchestration Developer Guide</title>

    <info>
        <author>
            <personname>
                <firstname/>
                <surname/>
            </personname>
            <affiliation>
                <orgname>OpenStack LLC</orgname>
            </affiliation>
        </author>
        <copyright>
            <year>2012</year>
            <year>2013</year>
            <year>2014</year>
            <holder>Rackspace US, Inc.</holder>
        </copyright>
        <releaseinfo>API v1</releaseinfo>
        <productname>Rackspace Cloud Orchestration</productname>
        <pubdate>2014-03-11</pubdate>
        <legalnotice role="rs-api">
            <annotation>
                <remark>Copyright details are filled in by the template.</remark>
            </annotation>
        </legalnotice>
        <abstract>
            <para>This document is intended for software developers
                interested in developing applications using the
                Rackspace Cloud Orchestration Application Programming
                Interface (<abbrev>API</abbrev>). </para>
        </abstract>
        
        
        
        <revhistory>
            <revision>
                <date>2014-03-11</date>
                <revdescription>
                    <itemizedlist spacing="compact">
                        <listitem>
                            <para>Initial release.</para>
                        </listitem>
                    </itemizedlist>
                </revdescription>
            </revision>
        </revhistory>
	<raxm:metadata
	    xmlns:raxm="http://docs.rackspace.com/api/metadata">
	  <raxm:displayname>API Developer Guide</raxm:displayname>
	  <raxm:product version="v1">orchestration</raxm:product>
	  <raxm:priority>20</raxm:priority>
	</raxm:metadata>
    </info>
    
   
    
    <chapter xml:id="overview">
        <title>Overview</title>
        <para>Rackspace &Deployment; is the name of the Rackspace
            orchestration, and application architecture management
            service.  &Deployment; provides a software API and a User
            Interface (through the Cloud Control Panel) to create and
            manipulate stacks of resources (for example load
            balancers, web servers, databases, and so forth) and
            software that operates as part of those stacks (for
            example apache, PHP, MySQL, Wordpress, and so
            forth). &Deployment; is an engine that understands Cloud
            topologies, unlike Chef or Puppet, which are concerned
            with software on servers. Where applicable, &Deployment;
            leverages software configuration management tools such as
            Chef. Using simple template syntax, you can define a cloud
            stack, deploy the stack, scale the stack (for example
            add/remove resources), delete the stack, clone the stack,
            and more. </para>
        <para>Systems Engineers, DevOps, and Developers who manage
            application infrastructure in the cloud, want a simple way
            to deploy and manage the resources of their application.
            &Deployment; provides the ability to declare resource
            provisioning and software configuration from a template
            file to allow you to automate deployment of your
            applications in a repeatable push-button method in order
            to spend less time managing infrastructure and more time
            developing and operating your application. Other solutions
            overly compartmentalize the work necessary to deploy and
            manage an application’s cloud infrastructure.  Choosing to
            use &Deployment; at Rackspace provides for:<itemizedlist>
                <listitem>
                    <para>Portability of deployments between public
                        and private OpenStack clouds</para>
                </listitem>
                <listitem>
                    <para> A declarative resource specification within
                        a simple template syntax for better
                        flexibility in repeated deployment of an
                        application across varied environments</para>
                </listitem>
                <listitem>
                    <para>Standardized application deployments based
                        on determined best practices by Rackspace and
                        backed by expertise in Fanatical
                        Support</para>
                </listitem>
            </itemizedlist></para>
        <para>&Deployment; is not meant to replace software
            configuration tools such as Chef, Puppet, Ansible, Salt,
            and so forth. Instead, the orchestration service works
            with existing tools you are familiar with to accomplish
            software configuration management. Rackspace &Deployment;,
            purposely built for any OpenStack cloud, not only eases
            deployments across multiple environments, but also
            provides basic configuration verification and eases
            application scaling. This is possible because template
            authors can integrate knowledge of the design of an
            application stack and the scripts that deploy and
            configure it. </para>
        <para>Rackspace &Deployment; Services
            are available to Rackspace Cloud customers. Interactions
            with Rackspace &Deployment; occur programmatically via the
            Rackspace &Deployment; API as described in the
                <citetitle>&Deployment; Developer
            Guide</citetitle>.</para>
        <para security="writeronly">The following figure shows an
            overview of  &Deployment; Infrastructure: <informalfigure
                security="writeronly">
                <mediaobject>
                    <imageobject>
                        <imagedata
                            fileref="images/Cloud_DNS_Infographic-1.svg"
                            contentwidth="6in"/>
                    </imageobject>
                </mediaobject>
            </informalfigure>
        </para>
        <remark>Writer: a diagram is available here:
            https://one.rackspace.com/display/heat/Architecture+Diagram.
            Investigate turning it into a svg format later for use in
            this guide.</remark>
        <section xml:id="Intended_Audience-d1e122">
            <title>Intended Audience</title>
            <para> This Reference is intended to assist support teams,
                DevOps Engineers, and software developers who want to
                manage cloud applications with non-trivial
                architectures that leverage multiple Rackspace
                services.</para>
            <para>To use the information provided here, you should
                first have a general understanding of the &Deployment;
                service. You should also be familiar with: </para>
            <itemizedlist spacing="compact">
                <listitem>
                    <para>Other Rackspace services applicable to your
                        cloud application architecture (Cloud Servers,
                        Cloud Load Balancers, Cloud Databases, and so
                        forth)</para>
                </listitem>
                <listitem>
                    <para>ReSTful web services</para>
                </listitem>
                <listitem>
                    <para>JSON and/or YAML data serialization
                        formats</para>
                </listitem>
            </itemizedlist>
        </section>
        <?hard-pagebreak?>
        <section xml:id="Document_Change_History-d1e166">
            <title>Document Change History</title>
            <para>This version of the Reference replaces and obsoletes
                all previous versions. The most recent changes are
                described in the table below:</para>
        <?rax revhistory?>
        </section>
        <section xml:id="Additional_Resources-d1e532">
            <title>Additional Resources</title>
            <para>You can find information for developing templates in
                the <citetitle>Rackspace Cloud Orchestration Template
                    Developer Guide</citetitle> at <link
                    xlink:href="http://docs.rackspace.com"
                        >http://docs.rackspace.com</link>. </para>
            <para>You can download the most current versions of
                templates at <link
                    xlink:href="https://github.com/rackspace-heat-templates"
                    >https://github.com/rackspace-heat-templates</link>. </para>
            <para>For information about Rackspace services, refer to
                <link xlink:href="http://docs.rackspace.com"
                    >http://docs.rackspace.com</link>.</para>
            <para> Issues and bug reports can be directed to your
                support team via ticket, chat, email, or phone.</para>
            <remark>Reviewer: is the previous sentence OK for product
                launch? Ask Keith Bray to ok this.</remark>
        </section>
        <section xml:id="Pricing_SLA-d1e1362">
            <title>Pricing and Service Level</title>
            <para>&Deployment; is part of the Rackspace Cloud and
                although you will not be billed for using
                &Deployment;, you will be billed for the stack
                resources you create using &Deployment;.</para>
            <para>&Deployment; is a Non-Standard Rackspace Service.
                Applicable SLAs for the underlying infrastructure
                apply for successfully launched cloud products.</para>
            
            <para security="writeronly">The Service Level Agreement (SLA) for &Deployment;
                is available at <link
                    xlink:href="http://www.rackspace.com/information/legal/cloud/sla#cloud_orchestration"
                    >http://www.rackspace.com/information/legal/cloud/sla#cloud_orchestration</link>.</para>
        </section>
    </chapter>
    <chapter xml:id="Concepts-d1e565">
        <title>Concepts</title>
        <?dbhtml stop-chunking?>
        <para> To use &Deployment; effectively, you should understand
            several key concepts: </para>
        <section xml:id="Blueprint-d1e588">
            <title>Template</title>
            <para>A &Deployment; template is a portable file, written
                in a user-readable language, that describes how a set
                of resources should be assembled and what software
                should be installed in order to produce a working
                deployment. The template specifies what resources
                should be used, what attributes can be set, and other
                parameters that are critical to the successful,
                repeatable automation of a specific application
                deployment.</para>
        </section>
        <section xml:id="Resource-d1e607">
            <title>Resource</title>
            <para>A resource is a template artifact that represents
                some component of your desired architecture (a Cloud
                Server, a group of scaled Cloud Servers, a load
                balancer, some configuration management system, and so
                forth).</para>
        </section>
        <section xml:id="Stack-d1e573">
            <title>Stack</title>
            <para>A stack is a group of resources (servers, load
                balancers, databases, and so forth) combined to
                fulfill a useful purpose. Based on a template, Heat
                orchestration engine creates an instantiated set of
                resources (a stack) to run the application framework
                or component specified (in the template). A stack is a
                running instance of a template. The result of creating
                a stack is a deployment of the application framework
                or component.</para>
        </section>
    </chapter>
    <chapter xml:id="General_API_Information-d1e843">
        <title>General API Information</title>
        <para> The &Deployment; API is implemented using a ReSTful web
            service interface. Like other Rackspace services, the
            &Deployment; Service shares a common token-based
            authentication system that allows seamless access between
            products and services. </para>
        <section xml:id="Authentication-d1e647">
            <title>Authentication</title>
            <para> Every ReST request against the &Deployment; Service
                requires the inclusion of a specific authorization
                token, supplied by the <code>X-Auth-Token</code> HTTP
                header. Customers obtain this token by first using the
                Rackspace Cloud Authentication Service and supplying a
                valid username and API access key. </para>
            <section xml:id="Geographic_Endpoints">
                <title>Geographic Endpoints</title>
                <para> The Rackspace Cloud Authentication Service
                    serves as the entry point to all Rackspace Cloud
                    APIs and is itself a ReSTful web service. </para>
                <para> You can use either of the following endpoints
                    to access the Authentication Service, regardless
                    of US or UK identities: </para>
                <itemizedlist spacing="compact">
                    <listitem>
                        <para><link xlink:href="&ENDPOINT-US-20;"
                                >&ENDPOINT-US-20;</link>
                        </para>
                    </listitem>
                    <listitem>
                        <para><link xlink:href="&ENDPOINT-UK-20;"
                                >&ENDPOINT-UK-20;</link></para>
                    </listitem>
                </itemizedlist>
                <para> Your account may be based in either the US or
                    the UK; this is not determined by your physical
                    location but by the location of the Rackspace
                    retail site which was used to create your account: </para>
                <itemizedlist spacing="compact">
                    <listitem>
                        <para> If your account was created via <link
                                xlink:href="http://www.rackspacecloud.com"
                                >http://www.rackspacecloud.com</link>,
                            it is a US-based account. </para>
                    </listitem>
                    <listitem>
                        <para> If your account was created via <link
                                xlink:href="http://www.rackspace.co.uk"
                                >http://www.rackspace.co.uk</link>, it
                            is a UK-based account. </para>
                    </listitem>
                </itemizedlist>
            </section>
            <section xml:id="Retrieving_Auth_Token">
                <title>Retrieving the Authentication Token</title>
                <informaltable rules="all">
                    <tbody>
                        <tr>
                            <td colspan="1">&POST; </td>
                            <td colspan="1"> v2.0/tokens </td>
                            <td colspan="4"> Authenticate to receive a
                                token and a service catalog. </td>
                        </tr>
                    </tbody>
                </informaltable>
                <simpara> Normal Response Code(s):
                        <returnvalue>200</returnvalue>,
                        <returnvalue>203</returnvalue>
                </simpara>
                <simpara> Error Response Code(s): unauthorized
                        (<errorcode>401</errorcode>), userDisabled
                        (<errorcode>403</errorcode>), badRequest
                        (<errorcode>400</errorcode>), authFault
                        (<errorcode>500</errorcode>),
                    serviceUnavailable (<errorcode>503</errorcode>) </simpara>
                <para> The authenticate operation provides clients
                    with an authentication token and a list of
                    regional cloud endpoints. The sample requests and
                    responses in this section illustrate a general
                    case. In your authentication request, use your own
                    credentials rather than the sample values shown
                    here for <code>username</code> and
                        <code>apiKey</code>. When you authenticate
                    successfully, the response to your authentication
                    request will include a catalog of the services to
                    which you have subscribed rather than the sample
                    values shown here.</para>
                <example security="writeronly">
                    <title>Auth Request for US Endpoint: XML</title>
                    <programlistingco>
                        <areaspec>
                            <area xml:id="credentials.xml.user"
                                units="linecolumn" coords="13 17"/>
                            <area xml:id="credentials.xml.key"
                                units="linecolumn" coords="14 15"/>
                        </areaspec>
                        <programlisting language="xml">
<xi:include href="samples/db-credentials-20.xml" parse="text"/>
                    </programlisting>
                    </programlistingco>
                </example>
                <example>
                    <title>Auth Request for US Endpoint: JSON</title>
                    <programlistingco>
                        <areaspec>
                            <area xml:id="credentials.json.user"
                                units="linecolumn" coords="14 22"/>
                            <area xml:id="credentials.json.key"
                                units="linecolumn" coords="15 20"/>
                        </areaspec>
                        <programlisting language="json">
<xi:include href="samples/db-credentials-20.json" parse="text"/>
                    </programlisting>
                    </programlistingco>
                </example>
                <calloutlist>
                    <callout arearefs="credentials.json.user">
                        <para> The username supplied here is your
                            common Rackspace Cloud username. </para>
                    </callout>
                    <callout arearefs="credentials.json.key">
                        <para> The key is your API access key.</para>
                        <para><emphasis role="bold">To find your API
                                Key:</emphasis></para>
                        <orderedlist>
                            <listitem>
                                <para>Log in to the Cloud Control
                                   Panel (<link
                                   xlink:href="https://mycloud.rackspace.com"
                                   >https://mycloud.rackspace.com</link>).</para>
                            </listitem>
                            <listitem>
                                <para>On the upper-right side of the
                                   top navigation pane, click your
                                   username.</para>
                            </listitem>
                            <listitem>
                                <para>From the menu, select
                                   <guimenuitem>Account
                                   Settings</guimenuitem>.</para>
                            </listitem>
                            <listitem>
                                <para>In the Login Details section of
                                   the Account Settings page, locate
                                   the <guilabel>API Key</guilabel>
                                   field and click
                                   <guibutton>Show</guibutton>.</para>
                            </listitem>
                            <listitem>
                                <para>Copy the value of the API Key
                                   and paste it into a text editor of
                                   your choice.</para>
                            </listitem>
                            <listitem>
                                <para>Click
                                   <guibutton>Hide</guibutton> to hide
                                   the value of the API Key. </para>
                            </listitem>
                        </orderedlist>
                    </callout>
                </calloutlist>
                <example security="writeronly">
                    <title>Auth Response for US Endpoint: XML</title>
                    <programlistingco>
                        <areaspec>
                            <area xml:id="response.xml.namespaces"
                                units="linecolumn" coords="7 9"/>
                            <area xml:id="response.xml.token"
                                units="linecolumn" coords="15 10"/>
                            <area xml:id="response.xml.dfltregion"
                                units="linecolumn" coords="16 67"/>
                            <area xml:id="response.xml.role"
                                units="linecolumn" coords="17 12"/>
                            <area xml:id="response.xml.catalog"
                                units="linecolumn" coords="22 21"/>
                            <area xml:id="response.xml.servicetype"
                                units="linecolumn" coords="51 34"/>
                            <area xml:id="response.xml.servicename"
                                units="linecolumn" coords="51 54"/>
                            <area xml:id="response.xml.region"
                                units="linecolumn" coords="52 30"/>
                            <area xml:id="response.xml.tenant"
                                units="linecolumn" coords="53 66"/>
                            <area xml:id="response.xml.url"
                                units="linecolumn" coords="54 9"/>
                        </areaspec>
                        <programlisting language="xml"><xi:include href="samples/db-auth-20.xml" parse="text"/></programlisting>
                    </programlistingco>
                </example>
                <example xml:id="auth-response-example-json">
                    <title>Auth Response for US Endpoint: JSON</title>
                    <programlistingco>
                        <areaspec>
                            <area xml:id="response.json.token"
                                units="linecolumn" coords="9 8"/>
                            <area xml:id="response.json.dfltregion"
                                units="linecolumn" coords="16 45"/>
                            <area xml:id="response.json.role"
                                units="linecolumn" coords="17 12"/>
                            <area xml:id="response.json.catalog"
                                units="linecolumn" coords="30 8"/>
                            <area xml:id="response.json.servicetype"
                                units="linecolumn" coords="114 16"/>
                            <area xml:id="response.json.servicename"
                                units="linecolumn" coords="113 16"/>
                            <area xml:id="response.json.region"
                                units="linecolumn" coords="104 24"/>
                            <area xml:id="response.json.tenant"
                                units="linecolumn" coords="101 24"/>
                            <area xml:id="response.json.url"
                                units="linecolumn" coords="102 24"/>
                        </areaspec>
                        <programlisting language="json"><xi:include href="samples/db-auth-20.json" parse="text"/>
                    </programlisting>
                    </programlistingco>
                </example>
                <note>
                    <para>The information shown in the Auth Response
                        example is for US-based accounts. If you
                        authenticate against the UK-endpoint for auth,
                        you will see the service catalog information
                        for UK-based accounts.</para>
                </note>
                <calloutlist>
                    <callout arearefs="response.json.token">
                        <para> This token can be presented to a
                            service as evidence of authentication.
                            Tokens are valid for a finite duration; a
                            token's default lifespan is twenty-four
                            hours. </para>
                        <para> The token's <code>expires</code>
                            attribute denotes the time after which the
                            token will automatically become invalid. A
                            token may be manually revoked before the
                            time identified by the
                                <code>expires</code> attribute;
                                <code>expires</code> predicts a
                            token's maximum possible lifespan but does
                            not guarantee that it will reach that
                            lifespan. Clients are encouraged to cache
                            a token until it expires. </para>
                        <note>
                            <para>The token's expiration time is
                                formatted differently in the US and
                                UK. These response examples show the
                                US format. For examples of the UK
                                format please refer to the <link
                                    xlink:href="http://docs.rackspace.com/auth/api/v2.0/auth-client-devguide/content/POST_authenticate_v2.0_tokens_Token_Calls.html#POST_authenticate_v2.0_tokens_Token_Calls-Response"
                                    >auth response examples in the Identity Guide</link>.</para>
                        </note>
                        <para> </para>
                    </callout>
                    <callout arearefs="response.json.dfltregion">
                        <para> Users can be assigned a default region
                            so that, when there is a choice between
                            multiple endpoints associated with a
                            service in the user's catalog, the
                            endpoint for the user's default region
                            will be selected if it is available. In
                            this example, the user's default region is
                            DFW and several of the services in the
                            user's catalog offer endpoints in that
                            region and the ORD region; this user's
                            work will be directed to the DFW region
                            whenever possible. </para>
                        <para> </para>
                    </callout>
                    <callout arearefs="response.json.role">
                        <para> Users can be assigned multiple roles,
                            with each role providing specific
                            privileges. In this example,
                                <code>jsmith</code> is the
                            administrative user for the account,
                            holding the fully-privileged
                                <code>identity:admin</code> role.
                            Other users might hold other roles with
                            different privileges. Roles need not be
                            associated with actual job functions such
                            as Administrator, Operator, Developer,
                            Tester, or Trainer. </para>
                        <para> </para>
                    </callout>
                    <callout arearefs="response.json.catalog">
                        <para> The service catalog lists the services
                            this user can access. In this example, the
                            user can access one database service, one
                            loadbalancing service, two compute
                            services (Cloud Servers OpenStack and
                            Cloud Servers), two object storage
                            services (Cloud Files Content Distribution
                            Network (CDN), and Cloud Files), the
                            orchestration service (Cloud
                            Orchestration), and one DNS service. The
                            catalog listing for each service provides
                            at least one endpoint URL for that
                            service. Other information, such as
                            regions, versions, and tenants, is
                            provided if it's relevant to this user's
                            access to this service. </para>
                        <para> </para>
                    </callout>
                    <callout arearefs="response.json.servicetype">
                        <para> The service type attribute identifies
                            services that perform similar functions,
                            whatever those services might be named. In
                            this example, the services named
                            cloudServers and cloudServersOpenstack are
                            both identified as
                                <code>type="compute"</code>,
                            identifying them as compute services even
                            though the word "compute" does not appear
                            in their names. </para>
                        <important>
                            <para>Use service type as the primary
                                value for locating a service. If
                                multiple endpoints of the same service
                                type exist in the same region, use
                                service name as the tiebreaker.</para>
                        </important>
                        <para> </para>
                    </callout>
                    <callout arearefs="response.json.servicename">
                        <para> The service name attribute identifies
                            each unique service in the catalog. Once a
                            service is created, its name does not
                            change. However, new services of the same
                            service type may be added to the catalog
                            with new names. </para>
                        <important>
                            <para> If you are programmatically parsing
                                an authentication response, use
                                service type rather than service name
                                as the basis for determining whether a
                                user has access to a particular kind
                                of service. Service type is stable
                                across all releases; new service types
                                may be developed, but existing service
                                types are not renamed. In this
                                example, <code>type="compute"</code>
                                identifies all the available compute
                                services, one of which is named
                                cloudServers and one of which is named
                                cloudServersOpenStack. New compute
                                service names may be added in future
                                releases; whatever the compute
                                services are named, you can always
                                recognize them by parsing for
                                   <code>type="compute"</code> in the
                                authentication response's service
                                catalog. </para>
                        </important>
                        <para> </para>
                    </callout>
                    <callout arearefs="response.json.region">
                        <para> A service may expose endpoints in
                            different regions. Regional endpoints
                            allow clients to provision resources in a
                            manner that provides high availability. </para>
                        <para> Some services are not region-specific.
                            These services supply a single
                            non-regional endpoint and do not provide
                            access to internal URLs. </para>
                        <para> </para>
                    </callout>
                    <callout arearefs="response.json.tenant">
                        <para> Some services recognize specification
                            of a tenant. If a service does recognize
                            tenants, the format of the tenant
                            specification is defined only by the
                            service; for details about whether and how
                            to specify a tenant, check the
                            documentation for the service you are
                            using.</para>
                        <para> </para>
                    </callout>
                    <callout arearefs="response.json.url">
                        <para> An endpoint can be assigned public and
                            internal URLs. A public URL is accessible
                            from anywhere. Access to a public URL
                            usually incurs traffic charges. Internal
                            URLs are only accessible to services
                            within the same region. Access to an
                            internal URL is free of charge. </para>
                        <para> </para>
                    </callout>
                </calloutlist>
                <para>Authentication tokens are typically valid for 24
                    hours. Applications should be designed to
                    re-authenticate after receiving a 401
                    (Unauthorized) response from a service endpoint. </para>
                <important>
                    <para>If you are programmatically parsing an
                        authentication response, please be aware that
                        service names are stable for the life of the
                        particular service and can be used as keys.
                        You should also be aware that a user's service
                        catalog can include multiple uniquely-named
                        services which perform similar functions. For
                        example, cloudServersOpenStack is the
                        OpenStack version of compute whereas
                        cloudServers is the legacy version of compute;
                        the same user can have access to both
                        services. In Auth 2.0, the service type
                        attribute can be used as a key by which to
                        recognize similar services; see the tip
                        below.</para>
                </important>
                <tip>
                    <para>Beginning with Auth 2.0, the service catalog
                        includes a service type attribute to identify
                        services that perform similar functions but
                        have different names; for example,
                            <code>type="compute"</code> identifies
                        compute services such as cloudServers and
                        cloudServersOpenStack. Also note that the
                        service type for &Deployment; is
                            <code>orchestration</code>. Some
                        developers have found the service type
                        attribute to be useful in parsing the service
                        catalog. For additional information on Auth
                        2.0 (also known as the Cloud Identity
                        Service), refer to the <citetitle>Cloud
                            Identity Client Developer
                            Guide</citetitle> at <link
                            xlink:href="http://docs.rackspace.com"
                            >http://docs.rackspace.com/</link>.</para>
                </tip>
                <para>&Deployment; service endpoints are published in
                    the service catalog in the Auth response with the
                    account number, which is a required element of the
                    service endpoints. The examples shown here are for
                    authentication for US customers. Customers with
                    UK-based accounts will see different values in the
                    service catalog. Refer to the next section for
                    more information about service endpoints. </para>
            </section>
        </section>
        <section xml:id="Service_Access_Endpoints-d1e753">
            <title>Service Access/Endpoints</title>
            <para>The &Deployment; Service is a regionalized
                service.</para>
            <para>You can find the available service access/endpoints
                for &Deployment; summarized in the table below.</para>
            <?rax-fo keep-with-next?>
            <para>
                <table rules="all">
                    <caption>Regionalized Service Endpoints</caption>
                    <thead>
                        <tr align="center">
                            <td colspan="2">Region</td>
                            <td colspan="5">Endpoint</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr align="left">
                            <td colspan="2">Chicago (ORD)</td>
                            <td colspan="5"
                                   ><code>https://ord.orchestration.api.rackspacecloud.com/v1/</code><parameter>1234</parameter>/
                            </td>
                        </tr>
                        <tr align="left">
                            <td colspan="2">Dallas/Ft. Worth
                                (DFW)</td>
                            <td colspan="5"
                                   ><code>https://dfw.orchestration.api.rackspacecloud.com/v1/</code><parameter>1234</parameter>/
                            </td>
                        </tr>
                        <tr align="left">
                            <td colspan="2">Northern Virginia
                                (IAD)</td>
                            <td colspan="5"
                                   ><code>https://iad.orchestration.api.rackspacecloud.com/v1/</code><parameter>1234</parameter>/
                            </td>
                        </tr>
                        <tr align="left">
                            <td colspan="2">London (LON)</td>
                            <td colspan="5">
                                <code>https://lon.orchestration.api.rackspacecloud.com/v1/</code><parameter>1234</parameter>/
                            </td>
                        </tr>
                        <tr align="left">
                            <td colspan="2">Sydney (SYD)</td>
                            <td colspan="5">
                                <code>https://syd.orchestration.api.rackspacecloud.com/v1/</code><parameter>1234</parameter>/
                            </td>
                        </tr>
                        <tr align="left">
                            <td colspan="2">Hong Kong (HKG)</td>
                            <td colspan="5">
                                <code>https://hkg.orchestration.api.rackspacecloud.com/v1/</code><parameter>1234</parameter>/
                            </td>
                        </tr>
                    </tbody>
                </table>
            </para>
            <para>Replace the sample account ID number,
                    <parameter>1234</parameter>, with your actual
                account number (also referred to as tenant ID)
                returned as part of the authentication service
                response.</para>
            <para>You will find the actual account number after the
                final '/' in the <code>publicURL</code> field returned
                by the authentication response. For example, in <xref
                    linkend="auth-response-example-json"/> you can see
                from the <code>publicURL</code> field for
                    <code>cloudServers</code>
                    ("https://servers.api.rackspacecloud.com/v1.0/<emphasis
                    role="bold">1100111</emphasis>") that the account
                number (also referred to as tenant ID) is
                1100111.</para>
        </section>
        <section xml:id="Contract_Version-d1e825">
            <title>Contract Version</title>
            <para> The contract version denotes the data model and
                behavior that the API supports. The current contract
                version is <code>v1</code>. The requested contract
                version is included in all request URLs. Different
                contract versions of the API may be available at any
                given time and are not guaranteed to be compatible
                with one another. </para>
            <example>
                <title>Example Request URL (contract version in
                        <emphasis role="strong"
                    >bold</emphasis>)</title>
                <programlisting>https://rackspace.example.com/<emphasis role="bold">v1</emphasis>/1234</programlisting>
            </example>
            <note>
                <para>This document pertains to contract version
                    1.</para>
            </note>
        </section>
        <?hard-pagebreak?>
        <section xml:id="Request_Response_Types-d1e903">
            <title>Request/Response Types</title>
            <para> The &Deployment; API supports both the JSON and
                YAML data serialization formats. The request format is
                specified using the <code>Content-Type</code> header
                and is <emphasis>required</emphasis> for calls that
                have a request body. The response format can be
                specified in requests either by using the
                    <code>Accept</code> header or by adding a
                    <code>.yaml</code> or <code>.json</code> extension
                to the request URI. Note that it is possible for a
                response to be serialized using a format different
                from the request. If no response format is specified,
                JSON is the default. If conflicting formats are
                specified using both an <code>Accept</code> header and
                a query extension, the query extension takes
                precedence.</para>
            <table rules="all">
                <caption>Response Formats</caption>
                <?dbfo keep-together="always"?>
                <thead>
                    <tr align="center">
                        <td>Format</td>
                        <td>Accept Header</td>
                        <td>Query Extension</td>
                        <td>Default</td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>JSON</td>
                        <td>application/json</td>
                        <td>.json</td>
                        <td>Yes</td>
                    </tr>
                    <tr>
                        <td>YAML</td>
                        <td>application/yaml</td>
                        <td>.yaml</td>
                        <td>No</td>
                    </tr>
                </tbody>
            </table>
            <remark security="writeronly">Reviewer: need new examples
                below: one for "Request with Headers: JSON" and one
                for "Request with Headers: YAML".</remark>
            <para security="writeronly">In the request example below,
                notice that <parameter>Content-Type</parameter> is set
                to <parameter>application/json</parameter>, but
                    <parameter>application/yaml</parameter> is
                requested via the <parameter>Accept</parameter>
                header:</para>
            <para security="writeronly"
                ><?rax-fo keep-with-next?>Therefore a YAML response
                format is returned:</para>
        </section>
        <section xml:id="datetimeformat">
            <title>Date/Time Format</title>
            <para> The &Deployment; Service uses an ISO-8601 compliant
                date format for the display and consumption of
                date/time values. </para>
            <para>The system timezone is in UTC. MySQL converts
                TIMESTAMP values from the current time zone to UTC for
                storage, and back from UTC to the current time zone
                for retrieval. This does not occur for other types,
                such as DATETIME. </para>
            <example>
                <title>&Deployment; Service Date/Time Format</title>
                <programlisting>yyyy-MM-dd'T'HH:mm:ssZ</programlisting>
                <para>See the table below for a description of the
                    date/time format codes.</para>
                <para>May 19th, 2011 at 8:07:08 AM, GMT-5 would have
                    the following format:</para>
                <programlisting>2011-05-19T08:07:08-05:00</programlisting>
            </example>
            <table rules="all">
                <caption>Explanation of Date/Time Format
                    Codes</caption>
                <thead>
                    <tr>
                        <td>Code</td>
                        <td>Description</td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>yyyy</td>
                        <td>Four digit year</td>
                    </tr>
                    <tr>
                        <td>MM</td>
                        <td>Two digit month</td>
                    </tr>
                    <tr>
                        <td>dd</td>
                        <td>Two digit day of month</td>
                    </tr>
                    <tr>
                        <td>T</td>
                        <td>Separator for date/time</td>
                    </tr>
                    <tr>
                        <td>HH</td>
                        <td>Two digit hour of day (00-23)</td>
                    </tr>
                    <tr>
                        <td>mm</td>
                        <td>Two digit minutes of hour</td>
                    </tr>
                    <tr>
                        <td>ss</td>
                        <td>Two digit seconds of the minute</td>
                    </tr>
                    
                    <tr>
                        <td>Z</td>
                        <td>RFC-822 timezone</td>
                    </tr>
                </tbody>
            </table>
        </section>
        <section xml:id="pagination">
            <title>Pagination</title>
            <para> Pagination provides the ability to limit the size
                of the returned data in the response body as well as
                retrieve a specified subset of a large data set.
                Pagination has two key concepts:
                    <emphasis>limit</emphasis> and
                    <emphasis>marker</emphasis>. </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>Limit is the restriction on the maximum
                            number of items for that type that can be
                            returned. </para>
                    </listitem>
                    <listitem>
                        <para>Marker is the ID of the last item in the
                            previous list returned. </para>
                        <para>The ID is the UUID in the case of
                            stacks. For example, a query could request
                            the next 10 stacks after the stack "1234"
                            as follows:
                                <code>?limit=10&amp;marker=1234</code>.
                            Items are displayed sorted by ID. </para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>If the content returned by a call is paginated, the
                response includes a structured link with the basic
                structure <code>{"href": "&lt;url>", "rel":
                    "next"}</code>. Any response that is truncated by
                pagination will have a <emphasis>next</emphasis> link,
                which points to the next item in the collection. If
                there are no more items, no <emphasis>next</emphasis>
                link is returned.</para>
            <para>Pagination applies only to the calls listed in the
                following table: </para>
            <informaltable rules="all">
                <thead>
                    <tr align="center">
                        <td colspan="1">Verb</td>
                        <td colspan="2">URI</td>
                        <td colspan="3">Description</td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td colspan="1">&GET;</td>
                        <td colspan="2">/stacks/</td>
                        <td colspan="3">Lists the information for all
                            stacks.</td>
                    </tr>
                </tbody>
            </informaltable>
            <para security="writeronly">&Deployment; has a paging limit of XX for stacks,
                with the default limit set to the paging limit. If a
                request supplies no limit or one that exceeds the
                configured default limit, the default is used
                instead.</para>
            <remark>Writer: &Deployment; does not currently have a
                paging limit for stacks.</remark>
            <para>See the example for a paged List Stacks call that
                follows.</para>
            <example>
                <title>List Stacks Paged Request: JSON</title>
                <?dbfo keep-together="always"?>
                <programlisting language="json"><xi:include href="samples/list-stacks-paged-request.json" parse="text"/></programlisting>
            </example>
            <para>Notice that the paged request example above sets the
                limit to 2 (<code>?limit=2</code>), so the response
                that follows shows 2 stacks and returns a
                    <emphasis>marker</emphasis> set to the UUID of the
                last stack in the returned list
                    (<code>?marker=5d0daddb-2a24-475b-853d-4ab4e1522c63</code>).
                Also a link is provided to retrieve the next 2 results
                    (<code>limit=2</code>) in the link element
                identified by the attribute
                <code>"rel":"next"</code>:</para>
            
            <example>
                <title>List Stacks Paged Response: JSON</title>
                
                <programlisting language="json"><xi:include href="samples/list-stacks-paged-response.json" parse="text"/></programlisting>
            </example>
        </section>
        <section xml:id="DB_faults">
            <title>Faults</title>
            <para> The &Deployment; Service returns the following
                error codes: </para>
            <informaltable rules="all">
                <thead>
                    <tr align="center">
                        
                        <td colspan="1">Error Code</td>
                        <td colspan="3">Description</td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        
                        <td colspan="1">400 Bad Request</td>
                        <td colspan="3">Invalid parameter values,
                            un-parsable data, or missing required
                            values.</td>
                    </tr>
                    <tr>
                        
                        <td colspan="1">404 Not Found</td>
                        <td colspan="3">The stack or resource cannot
                            be found.</td>
                    </tr>
                    <tr>
                        
                        <td colspan="1">409 Conflict</td>
                        <td colspan="3">Invalid action is requested
                            for the current stack status; more than
                            one object exists for the specified
                            non-unique identifier.</td>
                    </tr>
                    <tr>
                        
                        <td colspan="1">413 Request Entity Too
                            Large</td>
                        <td colspan="3">When more than the allowed
                            number of resources is specified for a
                            given stack or the supplied template
                            exceeds the size limit. Also returned when
                            the number of requests per time slice
                            exceeds the limit.</td>
                    </tr>
                    <tr>
                        
                        <td colspan="1">500 Internal Server Error</td>
                        <td colspan="3">Reverting the previously
                            failed action encountered an error, an
                            operation failed on one or more resources,
                            an unexpected error occurred.</td>
                    </tr>
                </tbody>
            </informaltable>
            <remark security="writeronly">Reviewer: Need new
                orchestration examples to replace the fault response
                examples below.</remark>
            <para security="writeronly">The following two <code>instanceFault</code>
                examples show errors when the server has erred or
                cannot perform the requested operation:</para>
            <para security="writeronly"> The error code (<code>code</code>) is returned in
                the body of the response for convenience. The
                    <code>message</code> element returns a
                human-readable message that is appropriate for display
                to the end user. The <code>details</code> element is
                optional and may contain information that is useful
                for tracking down an error, such as a stack trace. The
                    <code>details</code> element may or may not be
                appropriate for display to an end user, depending on
                the role and experience of the end user.</para>
            <para security="writeronly">The fault's root element (for example,
                    <code>instanceFault</code>) may change depending
                on the type of error. </para>
            <para security="writeronly"><?rax-fo keep-with-next?>The following two
                    <code>badRequest</code> examples show errors when
                the volume size is invalid:</para>
            <para security="writeronly">  The next two examples show
                    <code>itemNotFound</code> errors:</para>
        </section>
        <section xml:id="stack_status_dle264">
            <title>Stack Status</title>
            <para><?rax-fo keep-with-next?>Stacks and resources have a
                state and a status as described in the lists that
                follow:</para>
            <para>State:</para>
            <itemizedlist spacing="compact">
                <listitem>
                    <para>INIT &ndash; (Resources only) The resource
                        has not been provisioned.</para>
                </listitem>
                <listitem>
                    <para>CREATE &ndash; The stack/resource is
                        new.</para>
                </listitem>
                <listitem>
                    <para>UPDATE &ndash; The stack/resource is
                        changed.</para>
                </listitem>
                <listitem>
                    <para>DELETE &ndash; The stack/resource is
                        deleted.</para>
                </listitem>
                <listitem>
                    <para>ROLLBACK &ndash; A previously failed change
                        is being reverted.</para>
                </listitem>
                <listitem>
                    <para>SUSPEND &ndash; (Stacks only) The stack is
                        suspended.</para>
                </listitem>
                <listitem>
                    <para>RESUME &ndash; (Stacks only) The stack is
                        resumed.</para>
                </listitem>
            </itemizedlist>
            <para>Status:</para>
            <itemizedlist spacing="compact">
                <listitem>
                    <para>IN-PROGRESS &ndash; The operation is in
                        progress.</para>
                </listitem>
                <listitem>
                    <para>COMPLETE &ndash; The operation is
                        compete.</para>
                </listitem>
                <listitem>
                    <para>FAILED &ndash; The operation failed.</para>
                </listitem>
            </itemizedlist>
            <para>So, if you create a new stack and something goes
                wrong, your stack would be CREATE FAILED. One or more
                resources of that stack may be in the following
                states:</para>
            <itemizedlist spacing="compact">
                <listitem>
                    <para>INIT COMPLETE</para>
                </listitem>
                <listitem>
                    <para>CREATE FAILED</para>
                </listitem>
                <listitem>
                    <para>CREATE COMPLETE</para>
                </listitem>
            </itemizedlist>
        </section>
        <section xml:id="role_based_access_control">
            <title>Role Based Access Control (RBAC)</title>
            <para>Role Based Access Control (RBAC) restricts access to
                the capabilities of Rackspace Cloud services,
                including the &Deployment; API, to authorized users
                only. RBAC enables Rackspace Cloud customers to
                specify which account users of their Cloud account
                have access to which &Deployment; API service
                capabilities, based on roles defined by Rackspace (see
                    <xref linkend="cloud_dbs_roles_capabilities"/>).
                The permissions to perform certain operations in
                &Deployment; API – create, read, update, delete  – are
                assigned to specific roles. The account owner user
                assigns these roles, either global (multiproduct) or
                product-specific (for example &Deployment;), to
                account users. </para>
            <section xml:id="assigning_roles_to_account_users">
                <title>Assigning Roles to Account Users</title>
                <para>The account owner (identity:user-admin) can
                    create account users on the account and then
                    assign roles to those users. The roles grant the
                    account users specific permissions for accessing
                    the capabilities of the &Deployment; service. Each
                    account has only one account owner, and that role
                    is assigned by default to any Rackspace Cloud
                    account when the account is created.</para>
                <para> See the <citetitle>Cloud Identity Client
                        Developer Guide</citetitle> for information
                    about how to perform the following tasks:<itemizedlist>
                        <listitem>
                            <para><link
                                   xlink:href="http://docs.rackspace.com/auth/api/v2.0/auth-client-devguide/content/POST_addUser_v2.0_users_.html"
                                   >Create account users</link></para>
                        </listitem>
                        <listitem>
                            <para>
                                <link
                                   xlink:href="http://docs.rackspace.com/auth/api/v2.0/auth-client-devguide/content/PUT_addUserRole_v2.0_users__userId__roles_OS-KSADM__roleId__.html"
                                   >Assign roles to account
                                   users</link></para>
                        </listitem>
                        <listitem>
                            <para><link
                                   xlink:href="http://docs.rackspace.com/auth/api/v2.0/auth-client-devguide/content/DELETE_deleteUserRole_v2.0_users__userId__roles_OS-KSADM__roleId__.html"
                                   >Delete roles from account
                                   users</link></para>
                        </listitem>
                    </itemizedlist></para>
                <note>
                    <para>The account owner (identity:user-admin) role
                        cannot hold any additional roles because it
                        already has full access to all capabilities.
                    </para>
                </note>
            </section>
            <section xml:id="roles_for_cloud_dbs">
                <title>Roles Available for &Deployment;</title>
                <para>Three roles (observer, creator, and admin) can
                    be used to access the &Deployment; API
                    specifically. The following table describes these
                    roles and their permissions. </para>
                <table rules="all" width="70%"
                    xml:id="cloud_dbs_roles_capabilities">
                    <caption>&Deployment; Product Roles and
                        Capabilities</caption>
                    <col width="30%"/>
                    <col width="70%"/>
                    <?dbfo keep-together="always"?>
                    <thead>
                        <tr align="center">
                            <td>Role Name</td>
                            <td>Role Permissions</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>heat:admin</td>
                            <td>This role provides Create, Read,
                                Update, and Delete permissions in
                                &Deployment;, where access is
                                granted.</td>
                        </tr>
                        <tr>
                            <td>heat:creator</td>
                            <td>This role provides Create, Read and
                                Update permissions in &Deployment;,
                                where access is granted.</td>
                        </tr>
                        <tr>
                            <td>heat:observer</td>
                            <td>This role provides Read permission in
                                &Deployment;, where access is
                                granted.</td>
                        </tr>
                    </tbody>
                </table>
                <para>Additionally, two multiproduct roles apply to
                    all products. Users with multiproduct roles
                    inherit access to future products when those
                    products become RBAC-enabled. The following table
                    describes these roles and their
                    permissions.</para>
                <table rules="all" width="70%">
                    <caption>Multiproduct (Global Roles) and
                        Permissions</caption>
                    <col width="30%"/>
                    <col width="70%"/>
                    <?dbfo keep-together="always"?>
                    <thead>
                        <tr align="center">
                            <td>Role Name</td>
                            <td>Role Permissions</td>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>admin</td>
                            <td>This role provides Create, Read,
                                Update, and Delete permissions in all
                                products, where access is
                                granted.</td>
                        </tr>
                        <tr>
                            <td>observer</td>
                            <td>This role provides Read permission in
                                all products, where access is
                                granted.</td>
                        </tr>
                    </tbody>
                </table>
            </section>
            <section version="5.0" xml:id="RBAC_Role_Conflict_3">
                <title>Resolving Conflicts Between RBAC Multiproduct
                    vs. Custom (Product-specific) Roles</title>
                <para> The account owner can set roles for
                    multiproduct and &Deployment; scope, and it is
                    important to understand how any potential
                    conflicts among these roles are resolved. When two
                    roles appear to conflict, the role that provides
                    the more extensive permissions takes precedence.
                    Therefore, admin roles take precedence over
                    observer and creator roles, because admin roles
                    provide more permissions. </para>
                <para> The following table shows two examples of how
                    potential conflicts between user roles in the
                    Control Panel are resolved: </para>
                <para>
                    <informaltable rules="all">
                        <thead>
                            <tr align="center">
                                <td>Permission Configuration</td>
                                <td>View of Permission in the Control
                                   Panel </td>
                                <td>Can the User Perform Product Admin
                                   Functions in the Control
                                   Panel?</td>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>User is assigned the following
                                   roles: multiproduct <emphasis
                                   role="bold"><emphasis role="bold"
                                   >observer</emphasis></emphasis> and
                                   &Deployment; <emphasis role="bold"
                                   >admin</emphasis></td>
                                <td>Appears that the user has only the
                                   multiproduct <emphasis role="bold"
                                   >observer</emphasis> role</td>
                                <td>Yes, for &Deployment; only. The
                                   user has the <emphasis role="bold"
                                   >observer</emphasis> role for the
                                   rest of the products.</td>
                            </tr>
                            <tr>
                                <td>User is assigned the following
                                   roles: multiproduct <emphasis
                                   role="bold">admin</emphasis> and
                                   &Deployment; <emphasis role="bold"
                                   >observer</emphasis></td>
                                <td>Appears that the user has only the
                                   multiproduct <emphasis role="bold"
                                   >admin</emphasis> role</td>
                                <td>Yes, for all of the products. The
                                   &Deployment; <emphasis role="bold"
                                   >observer</emphasis> role is
                                   ignored.</td>
                            </tr>
                        </tbody>
                    </informaltable>
                </para>
            </section>
            <section version="5.0" xml:id="RBAC_API_XREF_3">
                <title>RBAC Permissions Cross-reference to
                    &Deployment; API Operations</title>
                <para> API operations for &Deployment; may or may not
                    be available to all roles. To see which operations
                    are permitted to invoke which calls, please review
                        <link
                        xlink:href="http://www.rackspace.com/knowledge_center/article/permissions-matrix-for-role-based-access-control-rbac"
                        >the Knowledge Center article</link>.</para>
            </section>
        </section>
    </chapter>
    
    <chapter xml:id="API_Operations_dle7023">
        <title>API Operations</title>
        <para>This section describes the Orchestration API operations. </para>
        
        <remark>Reviewer: I have removed the Get resource metadata
            call from the Stack Resources section at the request of
            Randall, who said it is for CFN rather than Heat. Here is
            the code to add it back if needed: method:
            resource_metadata </remark>
        
        
        
        <section xml:id="Stack_Operations">
            <title>Stack Operations</title>
            <para>This section describes the operations that are supported for stacks.</para>
            <wadl:resources xmlns:wadl="http://wadl.dev.java.net/2009/02">
                <wadl:resource href="../../../wadl/orchestration-api.wadl#stacks">
                    <wadl:method href="stack_create"/>
                    <wadl:method href="stack_adopt"/>
                    <wadl:method href="stack_list"/>
                </wadl:resource> 
                
                <wadl:resource href="../../../wadl/orchestration-api.wadl#stack_name">
                    <wadl:method href="stack_find"/>
                </wadl:resource> 
                
                <wadl:resource href="../../../wadl/orchestration-api.wadl#stack_id">
                    <wadl:method href="stack_show"/>
                    <wadl:method href="stack_update"/>
                    <wadl:method href="stack_delete"/>
                </wadl:resource> 
              
                <wadl:resource href="../../../wadl/orchestration-api.wadl#preview">
                    <wadl:method href="stack_preview"/>
                </wadl:resource>

                <wadl:resource href="../../../wadl/orchestration-api.wadl#abandon">
                    <wadl:method href="stack_abandon"/>
                </wadl:resource>
                
                
                
            </wadl:resources>               
        </section>
        
        <section xml:id="Stack_Actions" security="writeronly">
            <title>Stack Actions</title>
            <para>This section describes the operations that are supported for stack actions.</para>
            
            <wadl:resources xmlns:wadl="http://wadl.dev.java.net/2009/02">                            
                <wadl:resource href="../../../wadl/orchestration-api.wadl#actions">
                    <wadl:method href="stack_action_suspend"/>
                    <wadl:method href="stack_action_resume"/>
                </wadl:resource> 
            </wadl:resources> 
        </section>  


        <section xml:id="Stack_Resources">
            <title>Stack Resources</title>
            <para>This section describes the operations that are supported for stack resources.</para>
            
            <wadl:resources xmlns:wadl="http://wadl.dev.java.net/2009/02">
                
                <wadl:resource href="../../../wadl/orchestration-api.wadl#resources">
                    <wadl:method href="stack_resources_find"/>
                </wadl:resource>
                
                <wadl:resource href="../../../wadl/orchestration-api.wadl#resources2">
                    <wadl:method href="resource_list"/>
                </wadl:resource> 
                
                <wadl:resource href="../../../wadl/orchestration-api.wadl#resource_name">
                    <wadl:method href="resource_show"/>
                </wadl:resource>
                
                <wadl:resource href="../../../wadl/orchestration-api.wadl#resource_types">
                    <wadl:method href="resource_type_list"/>
                </wadl:resource>
                
                <wadl:resource href="../../../wadl/orchestration-api.wadl#resource_schema">
                    <wadl:method href="resource_type_get"/>
                </wadl:resource>
                
                <wadl:resource href="../../../wadl/orchestration-api.wadl#resource_template">
                    <wadl:method href="resource_type_template"/>
                </wadl:resource>
                
            </wadl:resources> 
        </section>  
        
        <section xml:id="Stack_Events">
            <title>Stack Events</title>
            <para>This section describes the operations that are supported for stack events.</para>
            
            <wadl:resources xmlns:wadl="http://wadl.dev.java.net/2009/02">
                
                <wadl:resource href="../../../wadl/orchestration-api.wadl#events">
                    <wadl:method href="stack_events_find"/>
                </wadl:resource>
                
                <wadl:resource href="../../../wadl/orchestration-api.wadl#events2">
                    <wadl:method href="stack_event_list"/>
                </wadl:resource> 
                
                <wadl:resource href="../../../wadl/orchestration-api.wadl#events4">
                    <wadl:method href="resource_event_list"/>
                </wadl:resource>
                
                <wadl:resource href="../../../wadl/orchestration-api.wadl#event_id">
                    <wadl:method href="event_show"/>
                </wadl:resource>
                
            </wadl:resources> 
        </section>  
        
        <section xml:id="Templates">
            <title>Templates</title>
            <para>This section describes the operations that are supported for templates.</para>
            
            <wadl:resources xmlns:wadl="http://wadl.dev.java.net/2009/02">
                
                <wadl:resource href="../../../wadl/orchestration-api.wadl#template">
                    <wadl:method href="stack_template"/>
                </wadl:resource>
                
                <wadl:resource href="../../../wadl/orchestration-api.wadl#validate_template">
                    <wadl:method href="template_validate"/>
                </wadl:resource> 
                
            </wadl:resources> 
        </section>  
        
        <section xml:id="Build_Info">
            <title>Build Info</title>
            <para>This section describes the operations that are supported for build info.</para>
            
            <wadl:resources xmlns:wadl="http://wadl.dev.java.net/2009/02">
                
                <wadl:resource href="../../../wadl/orchestration-api.wadl#build_info">
                    <wadl:method href="build_info_get"/>
                </wadl:resource>
                
            </wadl:resources> 
        </section>  
        

    </chapter>
    <chapter xml:id="using-heat-client-d1e019" security="writeronly">
        <title>Using the Heat Client</title>
        <para> While the Rackspace &Deployment; Service has a defined
            RESTful API interface, we recommend using the service from
            a command line client executable for its ease of use.  The
            OpenStack community has developed a command line client
            called “<link
                xlink:href="https://pypi.python.org/pypi/python-heatclient"
                >python-heatclient</link>” and for our examples here
            we will use this client. </para>
        <section xml:id="Install_Heat_Client">
            <title>Install the Heat Client</title>
            <para>To manage your stacks from the command line, you can
                use the open-source heat client application. </para>
            <para>To install the heat client, you first install the
                    <literal>python-heatclient</literal> package. </para>
            <note>
                <para>The heat client is not maintained by Rackspace
                    and should be considered software in development.
                    </para>
                <para>Bugs can be submitted at <link
                        xlink:href="https://bugs.launchpad.net/heat"
                        >https://bugs.launchpad.net/heat</link>.</para>
            </note>
            <para>Before you begin, install the following prerequisite
                    software:<table rules="all" width="90%">
                    <caption>heat Client Prerequisite
                        Software</caption>
                    <col width="25%"/>
                    <col width="75%"/>
                    <thead>
                        <tr>
                            <th>Prerequisite</th>
                            <th>Description</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td valign="top">
                                <para>Python 2.7 or later</para>
                            </td>
                            <td>
                                <para>Currently, the heat client is
                                   tested with Python 2.7. </para>
                                <procedure>
                                   <title>To check if python 2.7 is
                                   installed on your machine:</title>
                                   <step>
                                   <para> Open shell terminal (Cmd
                                   prompt on Windows), type
                                   <code>python</code> and press
                                   Enter. </para>
                                   </step>
                                   <step>
                                   <para> If you see output similar to
                                   the one shown below, python is
                                   installed. The first line in the
                                   output below shows the installed
                                   python version: </para>
                                   <programlisting><emphasis role="italic">Python <emphasis role="bold">2.7</emphasis>.1</emphasis>  (r271:86832, Aug  5 2011, 03:30:24) 
[GCC 4.2.1 (Based on Apple Inc. build 5658) (LLVM build 2335.15.00)] on darwin 
Type "help", "copyright", "credits" or "license" for more information. 
&gt;&gt;&gt;  </programlisting>
                                   <note>
                                   <para> To exit the python
                                   interpreter prompt, type
                                   <code>exit()</code>. </para>
                                   </note>
                                   </step>
                                   <step>
                                   <para> If the version information
                                   displayed does not start with 2.7,
                                   you need to install python2.7.
                                   Follow the procedure below to
                                   install it.</para>
                                   </step>
                                </procedure>
                                <procedure>
                                   <title>To install python
                                   2.7:</title>
                                   <step>
                                   <para> If python was not installed,
                                   run the command below to install
                                   python2.7 (on Ubuntu Linux):</para>
                                   <programlisting>sudo apt-get install python2.7-dev</programlisting>
                                   <note>
                                   <para>On Windows and Mac download
                                   the python 2.7 installation file
                                   from <link
                                   xlink:href="http://www.python.org/getit/"
                                   >http://www.python.org/getit/</link>
                                   and install it.</para>
                                   </note>
                                   </step>
                                </procedure>
                            </td>
                        </tr>
                        <tr>
                            <td valign="top">
                                <para><command>setuptools</command>
                                   package </para>
                            </td>
                            <td>
                                <para>Installed by default on Mac OS
                                   X. </para>
                                <para>Many Linux distributions provide
                                   packages to make
                                   <command>setuptools</command> easy
                                   to install.</para>
                                <para>Search your package manager for
                                   <command>setuptools</command> to
                                   find an installation package. If
                                   you cannot find one, download the
                                   <command>setuptools</command>
                                   package directly from <link
                                   xlink:href="http://pypi.python.org/pypi/setuptools"
                                   >http://pypi.python.org/pypi/setuptools</link>.
                                </para>
                            </td>
                        </tr>
                        <tr>
                            <td valign="top"><command>pip</command>
                                package</td>
                            <td>
                                <para>To install the heat client on a
                                   Mac OS X or Linux system, use
                                   <command>pip</command> because it
                                   is easy and ensures that you get
                                   the latest version of the heat
                                   client from the <link
                                       xlink:href="https://pypi.python.org/pypi/python-heatclient/"
                                   >Python Package Index</link>. Also,
                                   it lets you update the package
                                   later on.</para>
                                <para> If <command>pip</command> is
                                   not installed, install it as
                                   described below.</para>
                                <para>Install <command>pip</command>
                                   through the package manager for
                                   your system:<itemizedlist>
                                   <listitem>
                                   <para>Mac OS X
                                   <programlisting language="bash" role="gutter: false"><prompt>$</prompt> sudo easy_install pip</programlisting></para>
                                   </listitem>
                                   <listitem>
                                   <para>Ubuntu
                                   <programlisting language="bash" role="gutter: false"><prompt>$</prompt> apt get install python-pip </programlisting></para>
                                   </listitem>
                                   <listitem>
                                   <para>Debian
                                   <programlisting language="bash" role="gutter: false"><prompt>$</prompt> aptitude install python-pip </programlisting></para>
                                   </listitem>
                                   <listitem>
                                   <para>Fedora
                                   <programlisting language="bash" role="gutter: false"><prompt>$</prompt> yum install python-pip</programlisting></para>
                                   </listitem>
                                   <listitem>
                                   <para>CentOS, or RHEL (from EPEL or
                                   another 3rd party repository)
                                   <programlisting language="bash" role="gutter: false"><prompt>$</prompt> yum install python-pip</programlisting></para>
                                   </listitem>
                                   </itemizedlist>
                                </para>
                            </td>
                        </tr>
                    </tbody>
                </table></para>
            <?hard-pagebreak?>
            <procedure>
                <title>To install the heat client:</title>
                <step>
                    <title>Install or update the heat client
                        package</title>
                    <para>The <literal>python-heatclient</literal>
                        package contains the heat client. </para>
                    <para>Run the following command for your operating
                        system to install the
                            <literal>python-heatclient</literal>
                        package:</para>
                    <para>For Ubuntu, Debian, or OS X: </para>
                    <programlisting language="bash" role="gutter: false"><prompt>$</prompt> sudo pip install python-heatclient</programlisting>
                    <para>For RHEL, CentOS, or Fedora: </para>
                    <programlisting language="bash" role="gutter: false"><prompt>$</prompt> sudo python-pip install python-heatclient</programlisting>
                    <note>
                        <para>If you previously installed the
                                <literal>python-heatclient</literal>
                            package, run the following command for
                            your operating system to upgrade
                            it:</para>
                        <para> For Ubuntu, Debian, or OS X:
                            <programlisting language="bash" role="gutter: false"><prompt>$</prompt> sudo pip install --upgrade python-heatclient</programlisting>
                            For RHEL, CentOS, or Fedora:
                            <programlisting language="bash" role="gutter: false"><prompt>$</prompt> sudo python-pip install --upgrade python-heatclient</programlisting>
                        </para>
                    </note>
                </step>
                <step>
                    <title>Set environment variables</title>
                    <para>Edit your .bash_profile file (or .bashrc) to
                        add and set environment variables that enable
                        the heat client to connect to your Rackspace
                        Cloud account. Use nano or a text editor of
                        your choice to edit your
                            <filename>.bash_profile</filename> or
                            <filename>.bashrc</filename> file
                        (whichever is used in your
                        environment):</para>
                    <programlisting language="bash" role="gutter: false"><prompt>$</prompt> nano ~/.bash_profile </programlisting>
                    <para audience="gs">Depending on your account
                        location, add one of the following sets of
                        lines to your bash profile and save the file:<example>
                            <title>US Data Center Example</title>
                            <screen><computeroutput><?db-font-size 65%?>export OS_AUTH_URL=https://identity.api.rackspacecloud.com/v2.0/
export OS_USERNAME=&lt;username>
export OS_TENANT_ID=&lt;tenant_id>
export HEAT_URL=<link xlink:href="https://ord.orchestration.api.rackspacecloud.com/v1/">https://ord.orchestration.api.rackspacecloud.com/v1/</link>${OS_TENANT_ID}  
export OS_PASSWORD=&lt;password>
</computeroutput></screen>
                        </example><example>
                            <title>UK Data Center Example</title>
                            <screen><computeroutput><?db-font-size 65%?>export OS_AUTH_URL=https://lon.identity.api.rackspacecloud.com/v2.0/
export OS_USERNAME=&lt;username>
export OS_TENANT_ID=&lt;tenant_id>
export HEAT_URL=<link xlink:href="https://ord.orchestration.api.rackspacecloud.com/v1/">https://ord.orchestration.api.rackspacecloud.com/v1/</link>${OS_TENANT_ID}
export OS_PASSWORD=&lt;password>
</computeroutput></screen>
                        </example></para>
                    <para audience="admin">In the environment
                        variables above, <code>username</code>,
                            <code>password</code>, and
                            <code>tenant_id</code> refer to your
                        Rackspace cloud account username, password,
                        and tenant_id, respectively. Edit the values
                        for <code>username</code>,
                            <code>password</code>,
                            <code>tenant_id</code> to provide your
                        information as appropriate. Please also set
                        the HEAT_URL endpoint to the appropriate
                        regional endpoint where you want to deploy
                        resources, if it is different that ORD. Refer
                        to <xref
                            linkend="Service_Access_Endpoints-d1e753"
                        /> for details. Remember to source the file
                        containing the environment variables after
                        editing (for example: <code>source
                            .bashrc</code>) so that the new settings
                        will take effect immediately. </para>
                    <para audience="admin">The following table
                        describes the environment variables: <table
                            xml:id="Trove_Client_Env_Vars" rules="all"
                            width="100%">
                            <caption>heat Client Environment
                                Variables</caption>
                            <col width="25%"/>
                            <col width="75%"/>
                            <thead>
                                <tr>
                                   <th>Environment Variable</th>
                                   <th>Description</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                   <td>OS_AUTH_URL</td>
                                   <td>
                                   <para>The endpoint for the
                                   Rackspace Identity Service, which
                                   the heat client uses for
                                   authentication. </para>
                                   </td>
                                </tr>
                                <tr>
                                   <td>OS_USERNAME</td>
                                   <td>Your Rackspace Cloud user
                                   name.</td>
                                </tr>
                                <tr>
                                   <td>OS_TENANT_ID</td>
                                   <td>Your Rackspace Cloud tenant id
                                   (account number).</td>
                                </tr>
                                <tr>
                                   <td>HEAT_URL</td>
                                   <td>The service endpoint where you
                                   want to deploy the &Deployment;
                                   resources.</td>
                                </tr>
                                <tr>
                                   <td>OS_PASSWORD</td>
                                   <td>Your Rackspace Cloud
                                   password.</td>
                                </tr>
                            </tbody>
                        </table><note><title>Note for Windows Users</title>
                            <para>You need to set the following
                                environment
                                variables:<programlisting>set OS_USERNAME=user-name
set OS_PASSWORD=password
set OS_TENANT_ID=tenant-id
set OS_AUTH_URL=https://identity.api.rackspacecloud.com/v2.0/
set HEAT_URL=https://ord.orchestration.api.rackspacecloud.com/v1/${OS_TENANT_ID}</programlisting></para>
                        </note></para>
                </step>
                <step>
                    <title>Set permissions on the bash profile or
                        .bashrc file</title>
                    <para>Because the bash profile (or .bashrc)
                        contains a password, set permissions on it so
                        other people cannot read it:</para>
                    <programlisting language="bash" role="gutter: false"><prompt>$</prompt> chmod 600 ~/.bash_profile </programlisting>
                </step>
                <step>
                    <title>Source the environment variables</title>
                    <para>To source the variables to make them
                        available in your current shell, run the
                        following command if you set your environment
                        variables in the .bash_profile file:</para>
                    <programlisting language="bash" role="gutter: false"><prompt>$</prompt> source ~/.bash_profile </programlisting>
                    <para>Otherwise, run the following command if you
                        set your environment variables in the .bashrc
                        file:</para>
                    <programlisting language="bash" role="gutter: false"><prompt>$</prompt> source ~/.bashrc </programlisting>
                </step>
                <step>
                    <title>Test the heat client</title>
                    <para>To verify that you can talk to the API
                        server, authenticate and list
                        stacks:<programlisting language="bash" role="gutter: false"><prompt>$</prompt> heat stack-list </programlisting></para>
                </step>
                <step>
                    <title>Get help for heat client commands</title>
                    <para>To get help for heat client commands, run
                        the following command:</para>
                    <programlisting language="bash" role="gutter: false"><prompt>$</prompt> heat help </programlisting>
                    <para>To get help for a specific command, type the
                        command name after the
                            <parameter>help</parameter> parameter, as
                        follows:</para>
                    <programlisting language="bash" role="gutter: false"><prompt>$</prompt> heat help &lt;command_name> </programlisting>
                    <note>
                        <para>To show and become familiar with the
                            underlying API request for a command,
                            specify the <literal>--debug</literal>
                            parameter as the first parameter on any
                            command. For example:
                            <programlisting language="bash" role="gutter: false"><prompt>$</prompt> heat --debug stack-list</programlisting></para>
                    </note>
                    <para>If you can run the heat commands
                        successfully, skip the Troubleshooting step
                        below. Otherwise, continue to the
                        Troubleshooting step below.</para>
                </step>
                <step>
                    <title>Troubleshooting</title>
                    <para>Rackspace does not maintain the heat client,
                        which is considered to be software in
                        development. </para>
                    <itemizedlist>
                        <listitem>
                            <para>If you cannot run commands
                                successfully, make sure that you
                                entered your user name, password, and
                                tenant ID correctly in the bash
                                profile (or .bashrc) file. </para>
                        </listitem>
                        <listitem>
                            <para>Enter the following command
                                   <command>heat --debug
                                   stack-list</command> and check the
                                corresponding cURL command that is
                                displayed to confirm that your
                                settings for user name, password, and
                                tenant ID are correct. </para>
                        </listitem>
                        <listitem>
                            <para>If you need to change any
                                environment variables, either log out
                                and back in or source your bash
                                profile (or .bashrc) file. </para>
                        </listitem>
                        <listitem>
                            <para>To override some environment
                                variable settings, you can use the
                                options that are listed at the end of
                                the <command>heat help</command>
                                output. For example, you can override
                                the <literal>OS_PASSWORD</literal>
                                setting in the bash profile by
                                specifying a password on a heat
                                command, as follows: </para>
                            <programlisting language="bash" role="gutter: false"><prompt>$</prompt> heat --os-password &lt;password> stack-list </programlisting>
                            <para>Where
                                   <parameter>password</parameter> is
                                your Rackspace Cloud password.</para>
                        </listitem>
                        <listitem>
                            <para>Try entering the following command
                                (using the --debug
                                option):<programlisting language="bash" role="gutter: false"><prompt>$</prompt> heat --debug stack-list </programlisting>Then
                                inspect the values reported in the
                                corresponding cURL command that is
                                displayed. Are the values you entered
                                for <code>username</code>,
                                   <code>password</code>, and
                                   <code>tenant_id</code> correct? If
                                not you need to correct the settings
                                you saved to the .bash_profile or
                                .bashrc file, source the file, and
                                retry the command.</para>
                        </listitem>
                    </itemizedlist>
                </step>
            </procedure>
        </section>
        <section xml:id="heat-client-cmd-summary-d1e143">
            <title>Heat Client Command Summary</title>
            <para>Use the following heat client commands to perform
                API operations: </para>
            <section xml:id="heat_summary_stacks">
                <title>Stack Operations</title>
                <variablelist wordsize="10%">
                    <varlistentry>
                        <term><emphasis role="bold">Create
                                stack</emphasis></term>
                        <listitem>
                            <programlisting language="bash" role="gutter: false"><prompt>$</prompt> heat stack-create &lt;STACK_NAME&gt; 
[-f &lt;FILE&gt;] [-e &lt;FILE&gt;] [-u &lt;URL&gt;] [-o &lt;URL&gt;]  
[-c &lt;TIMEOUT&gt;] [-r ] [-P &lt;KEY1=VALUE1;KEY2=VALUE2...>] </programlisting>
                            <itemizedlist>
                                <title>Positional Arguments</title>
                                <listitem>
                                   <para>
                                   <parameter>STACK_NAME</parameter>.
                                   The name of the stack to create.
                                   </para>
                                </listitem>
                            </itemizedlist>
                            <itemizedlist>
                                <title>Optional Arguments</title>
                                <listitem>
                                   <para>
                                   <option>-f &lt;FILE&gt; ,
                                   --template-file
                                   &lt;FILE&gt;</option>. The path to
                                   the template. </para>
                                </listitem>
                                <listitem>
                                   <para><option>-e &lt;FILE&gt; ,
                                   --environment-file
                                   &lt;FILE&gt;</option>. The path to
                                   the environment. </para>
                                </listitem>
                                <listitem>
                                   <para><option>-u &lt;URL&gt; ,
                                   --template-url
                                   &lt;URL&gt;</option>. The URL of
                                   the template. </para>
                                </listitem>
                                <listitem>
                                   <para><option>-o &lt;URL&gt; ,
                                   --template-object
                                   &lt;URL&gt;</option>. The URL to
                                   retrieve the template object (for
                                   example from swift). </para>
                                </listitem>
                                <listitem>
                                   <para><option>-c &lt;TIMEOUT&gt; ,
                                   --create-timeout
                                   &lt;TIMEOUT&gt;</option>. The stack
                                   creation timeout in minutes.
                                   Default: 60. </para>
                                </listitem>
                                <listitem>
                                   <para><option>-r ,
                                   --enable-rollback</option>. Enable
                                   rollback on create/update
                                   failure.</para>
                                </listitem>
                                <listitem>
                                   <para><option>-P
                                   &lt;KEY1=VALUE1;KEY2=VALUE2...&gt;
                                   , --parameters
                                   &lt;KEY1=VALUE1;KEY2=VALUE2...&gt;</option>.
                                   Parameter values used to create the
                                   stack. This can be specified
                                   multiple times, or once with
                                   parameters separated by semicolon.
                                   </para>
                                </listitem>
                            </itemizedlist>
                        </listitem>
                    </varlistentry>
                </variablelist>
                <variablelist wordsize="10%">
                    <varlistentry>
                        <term><emphasis role="bold">List stack
                                data</emphasis></term>
                        <listitem>
                            <programlisting language="bash" role="gutter: false"><prompt>$</prompt> heat stack-list</programlisting>
                        </listitem>
                    </varlistentry>
                </variablelist>
                <variablelist wordsize="10%">
                    <varlistentry>
                        <term><emphasis role="bold">Get stack
                                data</emphasis></term>
                        <listitem>
                            <programlisting language="bash" role="gutter: false"><prompt>$</prompt> heat stack-show &lt;NAME or ID&gt;</programlisting>
                            <para> Where <parameter>NAME</parameter>
                                is the name of the stack or
                                   <parameter>ID</parameter> is the ID
                                of the stack to show. </para>
                        </listitem>
                    </varlistentry>
                </variablelist>
                <variablelist wordsize="10%">
                    <varlistentry>
                        <term><emphasis role="bold">Delete
                                stack</emphasis></term>
                        <listitem>
                            <programlisting language="bash" role="gutter: false"><prompt>$</prompt> heat stack-delete &lt;NAME or ID&gt;</programlisting>
                            <para> Where <parameter>NAME</parameter>
                                is the name of the stack or
                                   <parameter>ID</parameter> is the ID
                                of the stack to delete. </para>
                        </listitem>
                    </varlistentry>
                </variablelist>
                <variablelist wordsize="10%">
                    <varlistentry>
                        <term><emphasis role="bold">Update
                                stack</emphasis></term>
                        <listitem>
                            <programlisting language="bash" role="gutter: false"><prompt>$</prompt> heat stack-update &lt;NAME or ID&gt; 
[-f &lt;FILE&gt;] [-e &lt;FILE&gt;] [-u &lt;URL&gt;] [-o &lt;URL&gt;]  
[-P &lt;KEY1=VALUE1;KEY2=VALUE2...>] </programlisting>
                            <para> Where <parameter>NAME</parameter>
                                is the name of the stack or
                                   <parameter>ID</parameter> is the ID
                                of the stack to update. </para>
                        </listitem>
                    </varlistentry>
                </variablelist>
            </section>
            <section xml:id="heat_summary_stack_actions" security="writeronly">
                <title>Stack Actions</title>
                <variablelist wordsize="10%">
                    <varlistentry>
                        <term><emphasis role="bold">Suspend
                                stack</emphasis></term>
                        <listitem>
                            <programlisting language="bash" role="gutter: false"><prompt>$</prompt> heat action-suspend &lt;NAME or ID&gt;</programlisting>
                            <para> Where <parameter>NAME</parameter>
                                is the name of the stack or
                                   <parameter>ID</parameter> is the ID
                                of the stack to suspend. </para>
                        </listitem>
                    </varlistentry>
                </variablelist>
                <variablelist wordsize="10%">
                    <varlistentry>
                        <term><emphasis role="bold">Resume
                                stack</emphasis></term>
                        <listitem>
                            <programlisting language="bash" role="gutter: false"><prompt>$</prompt> heat action-resume &lt;NAME or ID&gt;</programlisting>
                            <para> Where <parameter>NAME</parameter>
                                is the name of the stack or
                                   <parameter>ID</parameter> is the ID
                                of the stack to resume. </para>
                        </listitem>
                    </varlistentry>
                </variablelist>
            </section>
            <section xml:id="heat_summary_stack_resources">
                <title>Stack Resources</title>
                <variablelist wordsize="10%">
                    <varlistentry>
                        <term><emphasis role="bold">List stack
                                resources</emphasis></term>
                        <listitem>
                            <programlisting language="bash" role="gutter: false"><prompt>$</prompt> heat resource-list &lt;NAME or ID&gt;</programlisting>
                            <para> Where <parameter>NAME</parameter>
                                is the name of the stack or
                                   <parameter>ID</parameter> is the ID
                                of the stack for which to list
                                resources. </para>
                        </listitem>
                    </varlistentry>
                </variablelist>
                <variablelist wordsize="10%">
                    <varlistentry>
                        <term><emphasis role="bold">List resource
                                metadata</emphasis></term>
                        <listitem>
                            <programlisting language="bash" role="gutter: false"><prompt>$</prompt> heat resource-metadata &lt;NAME or ID&gt; &lt;RESOURCE></programlisting>
                            <para> Where <parameter>NAME</parameter>
                                is the name of the stack or
                                   <parameter>ID</parameter> is the ID
                                of the stack for which to show
                                resource metadata. </para>
                            <para> And <parameter>RESOURCE</parameter>
                                is the name of the resource for which
                                to show metadata. </para>
                        </listitem>
                    </varlistentry>
                </variablelist>
                <variablelist wordsize="10%">
                    <varlistentry>
                        <term><emphasis role="bold">Show
                                resource</emphasis></term>
                        <listitem>
                            <programlisting language="bash" role="gutter: false"><prompt>$</prompt> heat resource-show &lt;NAME or ID&gt; &lt;RESOURCE></programlisting>
                            <para> Where <parameter>NAME</parameter>
                                is the name of the stack or
                                   <parameter>ID</parameter> is the ID
                                of the stack for which to show the
                                resource. </para>
                            <para> And <parameter>RESOURCE</parameter>
                                is the name of the resource for which
                                to show the details. </para>
                        </listitem>
                    </varlistentry>
                </variablelist>
                <variablelist wordsize="10%">
                    <varlistentry>
                        <term><emphasis role="bold">Generate template
                                based on resource</emphasis></term>
                        <listitem>
                            <programlisting language="bash" role="gutter: false"><prompt>$</prompt> heat resource-template [-F &lt;FORMAT>] &lt;RESOURCE></programlisting>
                            <itemizedlist>
                                <title>Positional Arguments</title>
                                <listitem>
                                   <para> Where
                                   <parameter>RESOURCE</parameter> is
                                   the name of the resource for which
                                   to generate a template. </para>
                                </listitem>
                            </itemizedlist>
                            <itemizedlist>
                                <title>Optional Arguments</title>
                                <listitem>
                                   <para><option>-F
                                   &lt;FORMAT></option>,
                                   <option>--format
                                   &lt;FORMAT></option>. The template
                                   output format. <code>{'yaml':
                                   &lt;function safe_dump at
                                   0x1df7668>, 'json': &lt;function
                                   &lt;lambda> at
                                   0x1dfc230>}</code></para>
                                </listitem>
                            </itemizedlist>
                        </listitem>
                    </varlistentry>
                </variablelist>
            </section>
            <section xml:id="heat_summary_events">
                <title>Events</title>
                <variablelist wordsize="10%">
                    <varlistentry>
                        <term><emphasis role="bold">List events for a
                                stack</emphasis></term>
                        <listitem>
                            <programlisting language="bash" role="gutter: false"><prompt>$</prompt> heat event-list [-r &lt;RESOURCE>] &lt;NAME or ID></programlisting>
                            <itemizedlist>
                                <title>Positional Arguments</title>
                                <listitem>
                                   <para>
                                   <parameter>&lt;NAME or
                                   ID></parameter>. The name or ID of
                                   the stack for which to show the
                                   events.</para>
                                </listitem>
                            </itemizedlist>
                            <itemizedlist>
                                <title>Optional Arguments</title>
                                <listitem>
                                   <para><option>-r
                                   &lt;RESOURCE></option>,
                                   <option>--resource
                                   &lt;RESOURCE></option>. The name of
                                   the resource by which to filter
                                   events.</para>
                                </listitem>
                            </itemizedlist>
                        </listitem>
                    </varlistentry>
                </variablelist>
                <variablelist wordsize="10%">
                    <varlistentry>
                        <term><emphasis role="bold">Describe
                                event</emphasis></term>
                        <listitem>
                            <programlisting language="bash" role="gutter: false"><prompt>$</prompt> heat event-show &lt;NAME or ID> &lt;RESOURCE> &lt;EVENT></programlisting>
                            <itemizedlist>
                                <title>Positional Arguments</title>
                                <listitem>
                                   <para>
                                   <parameter>&lt;NAME or
                                   ID></parameter>. The name or ID of
                                   the stack for which to show the
                                   events.</para>
                                </listitem>
                                <listitem>
                                   <para>
                                   <parameter>&lt;RESOURCE></parameter>.
                                   The name of the resource to which
                                   the event belongs.</para>
                                </listitem>
                                <listitem>
                                   <para>
                                   <parameter>&lt;EVENT></parameter>.
                                   The ID of the event for which to
                                   display details.</para>
                                </listitem>
                            </itemizedlist>
                        </listitem>
                    </varlistentry>
                </variablelist>
                <?hard-pagebreak?>
            </section>
            <section xml:id="heat_summary_templates">
                <title>Templates</title>
                <variablelist wordsize="10%">
                    <varlistentry>
                        <term><emphasis role="bold">Get template for a
                                stack</emphasis></term>
                        <listitem>
                            <programlisting language="bash" role="gutter: false"><prompt>$</prompt> heat template-show &lt;NAME or ID></programlisting>
                            <para>Where <parameter>&lt;NAME or
                                   ID></parameter> is the name or ID
                                of the stack for which to get the
                                template. </para>
                        </listitem>
                    </varlistentry>
                </variablelist>
                <variablelist wordsize="10%">
                    <varlistentry>
                        <term><emphasis role="bold">Validate template
                                with parameters</emphasis></term>
                        <listitem>
                            <programlisting language="bash" role="gutter: false"><prompt>$</prompt> heat template-validate [-u &lt;URL>] [-f &lt;FILE>] [-e &lt;FILE>] [-o &lt;URL>]
                              [-P &lt;KEY1=VALUE1;KEY2=VALUE2...>]</programlisting>
                            <itemizedlist>
                                <title>Optional Arguments</title>
                                <listitem>
                                   <para><option>-u &lt;URL></option>,
                                   <option>--template-url
                                   &lt;URL></option>. The URL of the
                                   template.</para>
                                </listitem>
                                <listitem>
                                   <para><option>-f
                                   &lt;FILE></option>,
                                   <option>--template-file
                                   &lt;FILE></option>. The path to the
                                   template.</para>
                                </listitem>
                                <listitem>
                                   <para><option> -e
                                   &lt;FILE></option>,
                                   <option>--environment-file</option>.
                                   The path to the environment.</para>
                                </listitem>
                                <listitem>
                                   <para><option>-o &lt;URL></option>,
                                   <option>--template-object
                                   &lt;URL></option>. The URL from
                                   which to retrieve the template
                                   object (for example from
                                   swift).</para>
                                </listitem>
                                <listitem>
                                   <para><option>-P
                                   &lt;KEY1=VALUE1;KEY2=VALUE2...></option>,
                                   <option>--parameters
                                   &lt;KEY1=VALUE1;KEY2=VALUE2...></option>.
                                   The parameter values to validate.
                                   This can be specified multiple
                                   times, or once with parameters
                                   separated by semicolons.</para>
                                </listitem>
                            </itemizedlist>
                        </listitem>
                    </varlistentry>
                </variablelist>
                <?hard-pagebreak?>
            </section>
            <section xml:id="heat_summary_miscellaneous">
                <title>Miscellaneous</title>
                <variablelist wordsize="10%">
                    <varlistentry>
                        <term><emphasis role="bold">Display help for
                                heat client</emphasis></term>
                        <listitem>
                            <programlisting language="bash" role="gutter: false"><prompt>$</prompt> heat help</programlisting>
                        </listitem>
                    </varlistentry>
                </variablelist>
                <variablelist wordsize="10%">
                    <varlistentry>
                        <term><emphasis role="bold">Display help for
                                heat client command</emphasis></term>
                        <listitem>
                            <programlisting language="bash" role="gutter: false"><prompt>$</prompt> heat help &lt;COMMAND&gt;</programlisting>
                            <para> Where
                                   <parameter>COMMAND</parameter> is
                                the name of the command for which to
                                display help. </para>
                        </listitem>
                    </varlistentry>
                </variablelist>
            </section>
        </section>
    </chapter>
    <glossary>
        <title>Glossary</title>
        <glossentry xml:id="template-d1e016">
            <glossterm>template</glossterm>
            <glossdef>
                <para>A &Deployment; template is a portable file,
                    written in a user-readable language, that
                    describes how a set of resources should be
                    assembled and what software should be installed in
                    order to produce a working deployment. The
                    template specifies what resources should be used,
                    what attributes can be set, and other parameters
                    that are critical to the successful, repeatable
                    automation of a specific application
                    deployment.</para>
            </glossdef>
        </glossentry>
        <glossentry xml:id="resource-d1e019">
            <glossterm>resource</glossterm>
            <glossdef>
                <para>A resource is a template artifact that
                    represents some component of your desired
                    architecture (a Cloud Server, a group of scaled
                    Cloud Servers, a load balancer, some configuration
                    management system, and so forth).</para>
            </glossdef>
        </glossentry>
        <glossentry xml:id="stack-d1e017">
            <glossterm>stack</glossterm>
            <glossdef>
                <para>A stack is a group of resources (servers, load
                    balancers, databases, and so forth) combined to
                    fulfill a useful purpose. Based on a template,
                    Heat orchestration engine creates an instantiated
                    set of resources (a stack) to run the application
                    framework or component specified (in the
                    template). A stack is a running instance of a
                    template. The result of creating a stack is a
                    deployment of the application framework or
                    component.</para>
            </glossdef>
        </glossentry>
    </glossary>
</book>
