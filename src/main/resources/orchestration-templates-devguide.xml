<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book [
        <!-- Some useful entities borrowed from HTML -->
        <!ENTITY ndash  "&#x2013;">
        <!ENTITY mdash  "&#x2014;">
        <!ENTITY hellip "&#x2026;">

        <!-- Useful for describing APIs -->
        <!ENTITY GET    '<command xmlns="http://docbook.org/ns/docbook">GET</command>'>
        <!ENTITY PUT    '<command xmlns="http://docbook.org/ns/docbook">PUT</command>'>
        <!ENTITY POST   '<command xmlns="http://docbook.org/ns/docbook">POST</command>'>
        <!ENTITY DELETE '<command xmlns="http://docbook.org/ns/docbook">DELETE</command>'>
        
        <!-- changing authentication endpoints; define entities for US & UK rather than maintaining in text -->
        <!ENTITY ENDPOINT-US "https://identity.api.rackspacecloud.com/v1.1/">
        <!ENTITY ENDPOINT-UK "https://lon.identity.api.rackspacecloud.com/v1.1/">
        <!ENTITY ENDPOINT-US-20 "https://identity.api.rackspacecloud.com/v2.0/">
        <!ENTITY ENDPOINT-UK-20 "https://lon.identity.api.rackspacecloud.com/v2.0/">
        
        <!-- changing product name; define entity for product name rather than maintaining in text -->
        <!ENTITY Checkmate "Cloud Orchestration">

]>
<book xmlns="http://docbook.org/ns/docbook"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:svg="http://www.w3.org/2000/svg"
    xmlns:m="http://www.w3.org/1998/Math/MathML"
    xmlns:html="http://www.w3.org/1999/xhtml" xml:id="orchestration-templates-devguide"
    version="5.0">
    
    <?rax title.font.size="35px" subtitle.font.size="20px"?>
    <title>Rackspace Cloud Orchestration Templates Developer Guide</title>

    <info>
        <author>
            <personname>
                <firstname/>
                <surname/>
            </personname>
            <affiliation>
                <orgname>Rackspace Cloud</orgname>
            </affiliation>
        </author>
        <copyright>
            <year>2012</year>
            <year>2013</year>
            <year>2014</year>
            <holder>Rackspace US, Inc.</holder>
        </copyright>
        <releaseinfo>API v1.0</releaseinfo>
        <productname>Rackspace Cloud Orchestration</productname>
        <pubdate>2014-01-31</pubdate>
        <legalnotice role="rs-api">
            <annotation>
                <remark>Copyright details are filled in by the template.</remark>
            </annotation>
        </legalnotice>
        <abstract>
            <para>This document is intended for software developers
                interested in developing templates for use with
                Rackspace Cloud Orchestration Services. </para>
        </abstract>
        
        
        
        <revhistory>
            <revision>
                <date>2014-01-31</date>
                <revdescription>
                    <itemizedlist spacing="compact">
                        <listitem>
                            <para>Initial release.</para>
                        </listitem>
                    </itemizedlist>
                </revdescription>
            </revision>
        </revhistory>
	<raxm:metadata
	    xmlns:raxm="http://docs.rackspace.com/api/metadata">
	  <raxm:displayname>Templates Developer Guide</raxm:displayname>
	  <raxm:product version="v1.0">deployments</raxm:product>
	  <raxm:priority>2</raxm:priority>
	</raxm:metadata>
    </info>
    
   
    
    <chapter xml:id="overview">
        <title>Overview</title>
        <para>Rackspace &Checkmate; is a RESTful API Service that can
            be used to create and manage cloud resources (for example:
            servers + software installation, databases, load
            balancers, and so forth) by declaring what you want
            deployed using a simple template language, as described in
            this guide. &Checkmate; is based on the OpenStack open
            source project named Heat. Rackspace &Checkmate; currently
            supports only the HOT (Heat Orchestration Template) syntax
            specification of Heat.  <note>
                <para> The "Deployments" feature within the Rackspace
                    Control Panel (<link
                        xlink:href="https://mycloud.rackspace.com/"
                        >https://mycloud.rackspace.com/</link>) is
                    provided by an orchestration system similar to
                    Heat.</para>
            </note></para>
        <itemizedlist>
            <title>How &Checkmate; Works</title>
            <listitem>
                <para>A &Checkmate; template describes the
                    infrastructure for a cloud application in a YAML
                    or JSON text file that is readable and writable by
                    humans, and can be checked into version control,
                    diffed, and so forth. </para>
            </listitem>
            <listitem>
                <para>Infrastructure resources that can be described
                    include: servers, floating IPs, volumes, security
                    groups, users, and so forth.</para>
            </listitem>
            <listitem>
                <para>&Checkmate; also provides an autoscaling service
                    that integrates with <link
                        xlink:href="https://wiki.openstack.org/wiki/Ceilometer"
                        >Ceilometer</link>, so you can include a
                    scaling group as a resource in a template. </para>
            </listitem>
            <listitem>
                <para>Templates can also specify the relationships
                    between resources (for example this volume is
                    connected to this server). This enables
                    &Checkmate; to call out to the Rackspace APIs to
                    create all of your infrastructure in the correct
                    order to completely launch your
                    application.</para>
            </listitem>
            <listitem>
                <para>&Checkmate; manages the whole lifecycle of the
                    application. When you need to change your
                    infrastructure, simply modify the template and use
                    it to update your existing stack. &Checkmate;
                    knows how to make the necessary changes. It will
                    also delete all of the resources when you are
                    finished with the application. </para>
            </listitem>
            <listitem>
                <para>&Checkmate; primarily manages infrastructure,
                    but the templates integrate well with software
                    configuration management tools such as <link
                        xlink:href="https://s3.amazonaws.com/cloudformation-examples/IntegratingAWSCloudFormationWithPuppet.pdf"
                        >Puppet</link> and <link
                        xlink:href="http://www.full360.com/blogs/integrating-aws-cloudformation-and-chef"
                        >Chef</link>. <remark>Reviewer: Note that the
                        first link in the previous bullet refers to
                        AWS. Is that OK, or should the link be
                        deleted?</remark></para>
            </listitem>
        </itemizedlist>
        <remark>Writer: need to move description paragraphs below to
            API Devguide.</remark>
        <para security="writeronly">Rackspace &Checkmate; is the name of Rackspace's
            deployment, orchestration, and deployment management
            service.  &Checkmate; provides a software API and a User
            Interface (through the Cloud Control Panel) to create and
            manipulate stacks of resources (for example load
            balancers, web servers, databases, and so forth) and
            software that operates as part of those stacks (for
            example apache, PHP, MySQL, Wordpress, and so forth).
             &Checkmate; is an engine that understands Cloud
            topologies, unlike Chef or Puppet, which are concerned
            with software on servers.  Where applicable, &Checkmate;
            leverages software configuration management tools such as
            Chef.  Using simple template syntax, you can define a
            cloud stack, deploy the stack, scale the stack (for
            example add/remove resources), delete the stack, clone the
            stack, and more. </para>
        <para security="writeronly">Systems Engineers, DevOps, and Developers who manage
            application infrastructure in the cloud, want a simple way
            to deploy and manage the resources of their application. 
            &Checkmate; provides the ability to declare resource
            provisioning and software configuration from a template
            file to allow you to automate deployment of your
            applications in a repeatable push-button method in order
            to spend less time managing infrastructure and spend more
            time developing and operating your application. Other
            solutions overly compartmentalize the work necessary to
            deploy and manage an application’s cloud infrastructure. 
            Choosing to use &Checkmate; at Rackspace provides for:<itemizedlist>
                <listitem>
                    <para>Portability of deployments between public
                        and private OpenStack clouds</para>
                </listitem>
                <listitem>
                    <para> A declarative (instead of imperative)
                        resource specification within a simple
                        template syntax for better flexibility in
                        repeated deployment of an application across
                        varied environments</para>
                </listitem>
                <listitem>
                    <para>Standardized application deployments based
                        on determined best practices by Rackspace and
                        backed by expertise in Fanatical
                        Support</para>
                </listitem>
            </itemizedlist></para>
        <para security="writeronly">&Checkmate; is not meant to replace software
            configuration tools such as Chef, Puppet, Ansible, Salt,
            and so forth. Instead, the orchestration service works
            with existing tools you are familiar with to accomplish
            software configuration management. Rackspace Cloud
            Orchestration, purposely built for any OpenStack cloud,
            not only eases deployments across multiple environments,
            but also provides basic configuration verification and
            eases application scaling. This is possible because
            template authors can integrate knowledge of the design of
            an application stack and the scripts that deploy and
            configure it. </para>
        <para security="writeronly">Rackspace &Checkmate; Services are available to
            Rackspace Cloud customers. Interactions with Rackspace
            &Checkmate; occur programmatically via the Rackspace
            &Checkmate; API as described in the <citetitle>&Checkmate;
                Developer Guide</citetitle>.</para>
        <para security="writeronly">The following figure shows an overview of &Checkmate;
            Infrastructure: <informalfigure security="writeronly">
                <mediaobject>
                    <imageobject>
                        <imagedata
                            fileref="images/Cloud_DNS_Infographic-1.svg"
                            contentwidth="6in"/>
                    </imageobject>
                </mediaobject>
            </informalfigure>
        </para>
        <remark>Reviewer: do we have an Orchestration architecture
            diagram. If so, please email it to me and I'll add it
            here.</remark>
        <para>We welcome feedback, comments, and bug reports by
            sending email to
                <email>mailto:checkmate@lists.rackspace.com</email>.</para>
        <remark>Reviewer: will the feedback link will be supported for
            Orchestration? If so, please email me the correct
            link.</remark>
        <para security="writeronly">Issues and bug reports can be directed to your support team via ticket, chat, email,
            or phone.</para>
        <section xml:id="Intended_Audience-d1e122">
            <title>Intended Audience</title>
            <para> This guide is intended to assist support teams,
                DevOps Engineers, and software developers who want to
                develop templates for use on the &Checkmate; Service.
                This service is intended to automate tasks in a manner
                that will speed deployment and provide a method that
                allows users to deploy a complete application instead
                of having to manually deploy individual resources.
                This will remove barriers that have historically
                prevented customers from deploying resources in the
                Rackspace Cloud. </para>
            <para>To use the information provided here, you should
                first have a general understanding of the &Checkmate;
                service. You should also be familiar with: </para>
            <itemizedlist spacing="compact">
                <listitem>
                    <para>Software deployments</para>
                </listitem>
                <listitem>
                    <para>Software installations on server
                        infrastructure</para>
                </listitem>
                <listitem>
                    <para>Infrastructure components such as Cloud Load
                        Balancers and Cloud Databases</para>
                </listitem>
                <listitem>
                    <para>Chef configuration management</para>
                    <remark>Reviewer: Is Chef config management
                        knowledge required for developing
                        templates?</remark>
                </listitem>
                <listitem>
                    <para>JSON and/or YAML data serialization
                        formats</para>
                </listitem>
            </itemizedlist>
        </section>
        <?hard-pagebreak?>
        <section xml:id="Document_Change_History-d1e166">
            <title>Document Change History</title>
            <para>This version of the Developer Guide replaces and
            obsoletes all previous versions.  The most recent changes
            are described in the table below:</para>
        <?rax revhistory?>
        </section>
        <section xml:id="Additional_Resources-d1e532">
            <title>Additional Resources</title>
            <para>You can download the most current versions of
                templates from <link
                    xlink:href="https://github.com/openstack/heat-templates"
                    >https://github.com/openstack/heat-templates</link>.</para>
            <para>For information about Rackspace Cloud products,
                refer to <link
                    xlink:href="http://www.rackspace.com/cloud/"
                    >http://www.rackspace.com/cloud/</link>.</para>
        </section>
    </chapter>
    <chapter xml:id="Concepts-d1e565">
        <title>Concepts</title>
        <?dbhtml stop-chunking?>
        <para> To use &Checkmate; effectively, you should understand
            several key concepts: </para>
        <section xml:id="Deployment-d1e573">
            <title>Orchestration</title>
            <para>A &Checkmate; is a group of resources (servers, load
                balancers, databases, and so forth) combined to
                fulfill a useful purpose. A &Checkmate; is the end
                result of successfully executing a template. A
                &Checkmate; contains a template and an environment and
                generates resources to run the application framework
                or component specified.</para>
        </section>
        <section xml:id="Stack-d1e185">
            <title>Stack</title>
           <para>A stack is a set of cloud resources that are related
                and logically grouped. Sometimes this is also referred
                to as a <emphasis role="italic"
                >deployment</emphasis>.</para>
        </section>
        <section xml:id="Template-d1e588">
            <title>Template</title>
            <para>A &Checkmate; template is a portable file, written
                in YAML or JSON, which defines cloud resources and
                their relationships. It describes how a set of
                resources should be assembled and what software should
                be installed in order to produce a working deployment.
                The template specifies what resources should be used,
                what attributes can be set, and other parameters that
                are critical to the successful, repeatable automation
                of a specific application deployment.  When a template
                is deployed at Rackspace, the result is referred to as
                a deployment. (When a template is deployed using
                OpenStack Heat, the result is referred to as a
                stack).</para>
        </section>
        <section xml:id="Deployment-d1e265">
            <title>Deployment</title>
            <para>
                <emphasis role="italic">Deployment </emphasis> is a
                term sometimes used to describe a stack. Since many
                templates include software installation/configuration
                in addition to cloud resources, developers often refer
                to a stack as an <emphasis>application
                    deployment</emphasis> instead of just a
                deployment.</para>
        </section>
        <section xml:id="environment_dle765" security="writeronly">
            <title>Environment</title>
            <para>The <code>environment</code> section of a template
                describes where you want to install the applications
                and any constraints of the environment. This section
                is typically unique to each template author, so you
                will create and manage your own environment. For
                example, you might want to install your applications
                on a server running Debian located in a specific cloud
                environment or geographic location.</para>
        </section>
        <section xml:id="Cookbook-d1e607" security="writeronly">
            <title>Cookbook</title>
            <para>Refer to <link
                    xlink:href="http://docs.opscode.com/essentials_cookbooks.html"
                    >http://docs.opscode.com/essentials_cookbooks.html</link>
                for information about cookbooks, including the
                following definition: "A cookbook is the fundamental
                unit of configuration and policy distribution in Chef.
                Each cookbook defines a scenario, such as everything
                needed to install and configure MySQL, and then it
                contains all of the components that are required to
                support that scenario ...".</para>
        </section>
        <section xml:id="Mapfile-d1e607" security="writeronly">
            <title>Map File</title>
            <para>A map file is responsible for translating the
                options and inputs from templates into the
                corresponding Chef cookbook attributes. </para>
        </section>
        <section xml:id="Resource-d1e607">
            <title>Resource</title>
            <para>A resource is a component that can be deployed, for
                example Apache.</para>
        </section>
        <section xml:id="Provider-d1e607" security="writeronly">
            <title>Provider</title>
            <para>Providers are services that &Checkmate; has on hand
                and are key building blocks for your deployment.
                Providers consist of common infrastructure elements,
                such as Load Balancer, Nova (server), and Database
                (Cloud Databases).</para>
        </section>
    </chapter>
    <chapter xml:id="Intro_to_Templates-d1e633">
        <title>Introduction to Templates</title>
        <section xml:id="What_is_Template-d1e633">
            <title>What is a Template?</title>
            <para>A &Checkmate; template is a portable and scalable
                file that describes how to configure a set of
                resources and install the appropriate applications.
                It describes the best practices for a particular type
                of deployment. </para>
            <para>The template author (&Checkmate; architect) makes
                decisions about the resources required for a
                deployment and describes how the resources should be
                configured using YAML. In the template, the author
                defines several important pieces of information that
                drive the installation, such as parameters, resources,
                and relationships among the resources.</para>
            <para>Once you have created a template, check it into your
                local github repository. If you would rather not start
                from scratch, browse the &Checkmate; github repository
                    (<link
                    xlink:href="https://github.com/openstack/heat-templates"
                    >https://github.com/openstack/heat-templates</link>)
                for a template that closely matches your needs, clone
                it to a local repository, and then modify it for your
                unique architecture.<remark security="writeronly">Writer: need to add info
                    about Submitting Templates section referred to
                    above.  If you create a template that can be
                    valuable for other users, refer to <xref
                        linkend="Submitting_Templates-d1e565"/> for
                    information about getting it submitted to the
                    Templates organization.</remark></para>
        </section>
        <section xml:id="Defining_Template_dle245">
            <title>Defining a Template</title>
            <remark>Should this section be called Template Structure
                instead?</remark>
            <para>Templates are composed of 6 possible sections, some
                of which are optional as noted. Templates are defined
                in YAML and follow the structure outlined
                below:</para>
            <programlisting> heat_template_version: 2013-05-23

description:
  # a description of the template
  # optional

parameter_groups:
  # a declaration of input parameter groups and order
  # optional

parameters:
  # declaration of input parameters
  # optional

resources:
  # declaration of template resources

outputs:
  # declaration of output parameters
  # optional </programlisting>
            <?dbhtml stop-chunking?>
            <para>The description for each section follows
                below:</para>
            <variablelist>
                <varlistentry>
                    <term><code>heat_template_version</code></term>
                    <listitem>
                        <para>This key with value <emphasis
                                role="italic">2013-05-23</emphasis>
                            (or a later date) indicates that the YAML
                            document is an Orchestration template of
                            the specified version.</para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <variablelist>
                <varlistentry>
                    <term><code>description</code></term>
                    <listitem>
                        <para>This <emphasis role="italic"
                                >optional</emphasis> section allows
                            for giving a description of the template,
                            or the workload that can be deployed using
                            the template. Although this section is
                                <emphasis role="italic"
                                >optional</emphasis>, it is good
                            practice to provide a brief description
                            for the template.</para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <variablelist>
                <varlistentry>
                    <term><code>parameter_groups</code></term>
                    <listitem>
                        <para>This section allows for specifying how
                            the input parameters should be grouped and
                            the order in which to provide the
                            parameters. This section is <emphasis
                                role="italic">optional</emphasis> and
                            can be omitted when necessary.</para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <variablelist>
                <varlistentry>
                    <term><code>parameters</code></term>
                    <listitem>
                        <para>This section allows for specifying input
                            parameters that have to be provided when
                            instantiating the template. The section is
                                <emphasis role="italic"
                                >optional</emphasis> and can be
                            omitted when no input is required.</para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <variablelist>
                <varlistentry>
                    <term><code>resources</code></term>
                    <listitem>
                        <para>This section contains the declaration of
                            the resources of the template. This
                            section is mandatory and at least one
                            resource must be defined in any
                            Orchestration template.</para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <variablelist>
                <varlistentry>
                    <term><code>outputs</code></term>
                    <listitem>
                        <para>This section allows for specifying
                            output parameters available to users once
                            the template has been instantiated. This
                            section is <emphasis role="italic"
                                >optional</emphasis> and can be
                            omitted when no output values are
                            required.</para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <para>These sections are independent from each other and
                can be arranged in any order, except as described in
                the following sections. Each section name must be
                followed immediately by a colon.</para>
            <section xml:id="template_version_dle154">
                <title>Template Version</title>
                <para>The <code>heat_template_version</code> with
                    value <code>2013-05-23</code> (or a later date)
                    indicates that the YAML document is a &Checkmate;
                    template of the specified version.</para>
                <screen language="bash">heat_template_version: 2013-05-23</screen>
            </section>
            <section xml:id="template_description_dle145">
                <title>Description</title>
                <para>The <code>description</code> section specifies
                    the description of the template and is optional.
                    The value is a collection of YAML strings up to a
                    maximum total length of 4K. This value must be a
                    literal and cannot be defined as the result of a
                    function call or parameter evaluation. An example
                    valid <code>description</code> declaration
                    is:</para>
                <screen language="bash">description: >
  Hello world HOT template that just defines a single compute instance.
  Contains just base features to verify base HOT support.</screen>
                <para>Note that the right angle bracket
                        (<code>></code>) after
                        <code>description:</code> allows the
                    description to be continued over multiple
                    lines.</para>
            </section>
            <section xml:id="parameter_groups_d1e436">
                <title>Parameter Groups</title>
                <para>The <code>parameter_groups</code> section allows
                    for specifying how the input parameters should be
                    grouped and the order in which to provide the
                    parameters. These groups are typically used to
                    describe expected behavior for downstream user
                    interfaces.</para>
                <para>These groups are specified in a list with each
                    group containing a list of associated parameters.
                    The lists are used to denote the expected order of
                    the parameters. Each parameter should be
                    associated to a specific group only once using the
                    parameter name to bind it to a defined parameter
                    in the <code>parameters</code> section.</para>
                <screen language="bash"> parameter_groups:
- label: &lt;human-readable label of parameter group>
  description: &lt;description of the parameter group>
  parameters:
  - &lt;param name>
  - &lt;param name> </screen>
                <variablelist>
                    <varlistentry>
                        <term><code>label</code></term>
                        <listitem>
                            <para>A human-readable label that defines
                                the associated group of
                                parameters.</para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><code>description</code></term>
                        <listitem>
                            <para>This attribute allows for giving a
                                human-readable description of the
                                parameter group.</para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><code>parameters</code></term>
                        <listitem>
                            <para>A list of parameters associated with
                                this parameter group.</para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><replaceable>param name</replaceable></term>
                        <listitem>
                            <para>The name of the parameter that is
                                defined in the associated
                                   <code>parameters</code>
                                section.</para>
                        </listitem>
                    </varlistentry>
                </variablelist>
            </section>
            <section xml:id="parameters_section_d1e753">
                <title>Parameters</title>
                <para>The <code>parameters</code> section allows for
                    specifying input parameters that must be provided
                    when instantiating the template. Such parameters
                    are typically used to customize each deployment,
                    for example by setting custom user names or
                    passwords or for binding to environment-specifics
                    like certain images. Each parameter is specified
                    in a separated nested block with the name of the
                    parameter defined in the first line and additional
                    attributes such as <code>type</code> or
                        <code>default</code> defined as nested
                    elements.</para>
                <screen language="bash"> parameters:
  &lt;param name>:
    type: &lt;string | number | json | comma_delimited_list>
    description: &lt;description of the parameter>
    default: &lt;default value for parameter>
    hidden: &lt;true | false>
    constraints:
      &lt;parameter constraints> </screen>
                <para>The <replaceable>param name</replaceable> and
                        <code>type</code> attributes are required for
                    each parameter. Other attributes are
                    optional.</para>
                <variablelist>
                    <varlistentry>
                        <term><replaceable>param name</replaceable></term>
                        <listitem>
                            <para>The name of the parameter is defined
                                at the top of each parameter
                                block.</para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><code>type</code></term>
                        <listitem>
                            <para>This attribute specifies the type of
                                parameter. Currently supported types
                                are <code>string</code>,
                                   <code>number</code>,
                                   <code>comma_delimited_list</code>,
                                or <code>json</code>.</para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><code>description</code></term>
                        <listitem>
                            <para>This <emphasis role="italic"
                                   >optional</emphasis> attribute
                                allows for giving a human readable
                                description of the parameter.</para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><code>default</code></term>
                        <listitem>
                            <para>This <emphasis role="italic"
                                   >optional</emphasis> attribute
                                allows for defining a default value
                                for the parameters that will be used
                                in the case when the parameter is not
                                specified by the user during
                                deployment.</para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><code>hidden</code></term>
                        <listitem>
                            <para>This <emphasis role="italic"
                                   >optional</emphasis> attribute
                                allows for specifying whether the
                                parameters should be hidden when
                                showing information about a stack
                                created from the template at runtime
                                (for example to support hiding
                                passwords that were specified as
                                parameters). If not specified, the
                                default value <code>false</code> will
                                be used.</para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><code>constraints</code></term>
                        <listitem>
                            <para>This <emphasis role="italic"
                                   >optional</emphasis> block allows
                                for specifying additional constraints
                                on the parameter, such as minimum or
                                maximum values for numeric
                                parameters.</para>
                        </listitem>
                    </varlistentry>
                </variablelist>
                <para>The following example shows a simple definition
                    of two parameters: <code>user_name</code> and
                        <code>port_number</code>. Note that the
                    description is actually optional, but it is good
                    practice to provide a useful description for each
                    parameter.</para>
                <screen language="bash"> parameters:
  user_name:
    type: string
    description: User name to be configured for the application
  port_number:
    type: number
    description: Port number to be configured for the web server </screen>
            </section>
            <section xml:id="parameter_constraints_d1e264">
                <title>Parameter Constraints</title>
                <para>The <code>constraints</code> block of a
                    parameter definition allows for defining
                    additional validation constraints that apply to
                    the value of the parameter. At instantiation time
                    of the template, user-provided parameter values
                    are validated against those constraints to make
                    sure the values provided match the requirements
                    specified by the template author. Constraints are
                    defined in the form of a bulleted list according
                    to the following syntax:</para>
                <screen language="bash"> constraints:
  - &lt;constraint type>: &lt;constraint definition>
    description: &lt;constraint description> </screen>
                <variablelist>
                    <varlistentry>
                        <term><replaceable>constraint type</replaceable></term>
                        <listitem>
                            <para>The <replaceable>constraint
                                   type</replaceable> specifies the
                                kind of constraint defined in the
                                current bulleted list item (marked by
                                the dash '-' in the example). </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><replaceable>constraint
                            definition</replaceable></term>
                        <listitem>
                            <para>This value defines the actual
                                constraint, depending on the
                                constraint type. </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><code>description</code></term>
                        <listitem>
                            <para>This <emphasis role="italic"
                                   >optional</emphasis> attribute
                                allows for specifying a concrete
                                description of the current constraint.
                                This text will be presented to the
                                user, for example, when the provided
                                input value for a parameter violates
                                the constraint. If omitted, a default
                                validation message will be presented
                                to the user.</para>
                        </listitem>
                    </varlistentry>
                </variablelist>
                <para>The set of currently supported constraints and
                    the concrete syntax for each constraint type is
                    shown following the example below.</para>
                <para>The following example shows the definition of a
                    string parameter with two constraints. Note that
                    while the descriptions for each constraint are
                    optional, it is good practice to provide concrete
                    descriptions so useful messages can be presented
                    to the user at deployment time.</para>
                <screen language="bash"> parameters:
  user_name:
    type: string
    description: User name to be configured for the application
    constraints:
      - length: { min: 6, max: 8 }
        description: User name must be between 6 and 8 characters
      - allowed_pattern: "[A-Z]+[a-zA-Z0-9]*"
        description: User name must start with an uppercase character </screen>
                <para>The supported types of parameter constraints,
                    along with the concrete syntax for each type, are
                    as follows:</para>
                <variablelist>
                    <varlistentry>
                        <term><code>length</code></term>
                        <listitem>
                            <para>The <code>length</code> constraint
                                applies to parameters of type
                                   <code>string</code> and allows for
                                defining a lower and upper limit for
                                the length of the string value. The
                                syntax for the length constraint
                                is:<screen language="bash">  length: { min: &lt;lower limit>, max: &lt;upper limit> } </screen>It
                                is possible to define a length
                                constraint with only a lower limit or
                                an upper limit, however, at least one
                                of <code>min</code> or
                                   <code>max</code> must be
                                specified.</para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><code>range</code></term>
                        <listitem>
                            <para>The <code>range</code> constraint
                                applies to parameters of type
                                   <code>number</code> and allows for
                                defining a lower and upper limit for
                                the numeric value of the parameter.
                                The syntax of the range constraint
                                is:<screen language="bash">   range: { min: &lt;lower limit>, max: &lt;upper limit> } </screen>It
                                is possible to define a range
                                constraint with only a lower limit or
                                an upper limit, however, at least one
                                of <code>min</code> or
                                   <code>max</code> must be specified.
                                The minimum or maximum boundaries are
                                included in the range. For example,
                                the following range constraint would
                                allow for all numeric values between 0
                                and
                                10:<screen language="bash">    range: { min: 0, max: 10 } </screen></para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><code>allowed_values</code></term>
                        <listitem>
                            <para>The <code>allowed_values</code>
                                constraint applies to parameters of
                                type <code>string</code> or
                                   <code>number</code> and allows for
                                specifying a set of possible values
                                for a parameter. At deployment time,
                                the user-provided value for the
                                respective parameter must match one of
                                the elements of the specified list.
                                The syntax of the
                                   <code>allowed_values</code>
                                constraint
                                is:<screen language="bash"> allowed_values: [ &lt;value>, &lt;value>, ... ] </screen>Alternatively,
                                the YAML bulleted list notation can be
                                used:<screen language="bash"> allowed_values:
  - &lt;value>
  - &lt;value>
  - ... </screen>For
                                example:<screen language="bash"> parameters:
  instance_type:
    type: string
    description: Instance type for compute instances
    constraints:
      allowed_values:
        - m1.small
        - m1.medium
        - m1.large </screen></para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><code>allowed_pattern</code></term>
                        <listitem>
                            <para>The <code>allowed_pattern</code>
                                constraint applies to parameters of
                                type <code>string</code> and allows
                                for specifying a regular expression
                                that a user-provided parameter value
                                must match at deployment. The syntax
                                of the <code>allowed_pattern</code>
                                constraint
                                is:<screen language="bash">  allowed_pattern: &lt;regular expression> </screen>For
                                example:<screen language="bash">  parameters:
  user_name:
    type: string
    description: User name to be configured for the application
    constraints:
      - allowed_pattern: "[A-Z]+[a-zA-Z0-9]*"
        description: User name must start with an uppercase character
  </screen></para>
                        </listitem>
                    </varlistentry>
                </variablelist>
            </section>
            <section xml:id="resources_d1e142">
                <title>Resources</title>
                <para>In the <code>resources</code> section, the
                    templates for actual resources that will make up a
                    stack deployed from the Orchestration template
                    (for example compute instances, networks, storage
                    volumes) are defined. Each resource is defined as
                    a separate block in the resources section
                    according to the syntax below:</para>
                <screen language="bash"> resources:
  &lt;resource ID>:
    type: &lt;resource type>
    properties:
      &lt;property name>: &lt;property value>
    # more resource-specific metadata </screen>
                <variablelist>
                    <varlistentry>
                        <term><replaceable>resource ID</replaceable></term>
                        <listitem>
                            <para>A resource block is headed by the
                                   <replaceable>resource
                                   ID</replaceable>, which must be
                                unique within the resource section of
                                a template.</para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><code>type</code></term>
                        <listitem>
                            <para>This attribute specifies the type of
                                resource, such as
                                   <code>OS::Nova::Server</code>.</para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><code>properties</code></term>
                        <listitem>
                            <para>This section contains a list of
                                resource-specific properties. The
                                property value can be provided in
                                place, or can be provided via a
                                function (see  <xref
                                   linkend="intrinsic_functions_d1e725"
                                />). Depending on the type of
                                resource, the resource block might
                                include more resource-specific
                                metadata. Basically all resource types
                                that can be used in CFN templates can
                                also be used in Orchestration
                                templates, adapted to the YAML
                                structure as outlined above. Below is
                                an example of a simple compute
                                resource definition with some property
                                values
                                fixed.<screen language="bash"> resources:
  my_instance:
    type: OS::Nova::Server
    properties:
      flavor: m1.small
      image: F18-x86_64-cfntools </screen></para>
                        </listitem>
                    </varlistentry>
                </variablelist>
            </section>
            <section xml:id="outputs_d1e725">
                <title>Outputs</title>
                <para>In the <code>outputs</code> section, any output
                    parameters that should be available to the user
                    can be defined. Typically, this would be
                    parameters such as IP addresses of deployed
                    instances, or URLs of web applications deployed as
                    part of a stack. Each output parameter is defined
                    as a separate block within the outputs section
                    according to the following syntax:</para>
                <screen language="bash">  outputs:
  &lt;parameter name>:
    description: &lt;description>
    value: &lt;parameter value> </screen>
                <variablelist>
                    <varlistentry>
                        <term><replaceable>parameter name</replaceable></term>
                        <listitem>
                            <para>An output parameter block is headed
                                by the output parameter name, which
                                must be unique within the outputs
                                section of a template.</para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><code>description</code></term>
                        <listitem>
                            <para>This element gives a short
                                description of the output
                                parameter.</para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><code>value</code></term>
                        <listitem>
                            <para>This element specifies the
                                   <replaceable>parameter
                                   value</replaceable> of the output
                                parameter. Typically, this will be
                                resolved by means of a function, for
                                example by getting an attribute value
                                of one of the stack's resources (see
                                also <xref
                                   linkend="intrinsic_functions_d1e725"
                                />).</para>
                            <para>The example below shows how the IP
                                address of a compute resource can be
                                defined as an output
                                parameter.<screen language="bash">  outputs:
  instance_ip:
    description: IP address of the deployed compute instance
    value: { get_attr: [my_instance, first_address] }  </screen></para>
                        </listitem>
                    </varlistentry>
                </variablelist>
            </section>
            <section xml:id="intrinsic_functions_d1e725">
                <title>Intrinsic Functions</title>
                <para>&Checkmate; provides a set of intrinsic
                    functions that can be used inside &Checkmate;
                    templates to perform specific tasks, such as
                    getting the value of a resource attribute at
                    runtime. A definition of all intrinsic functions
                    available in &Checkmate; is given below.</para>
                <section xml:id="get_param_intrinsic_function">
                    <title>get_param</title>
                    <para>The <code>get_param</code> function allows
                        for referencing an input parameter of a
                        template from anywhere within a template. At
                        runtime, it will be resolved to the value
                        provided for this input parameter. The syntax
                        of the <code>get_param</code> function is as
                        follows:</para>
                    <screen language="bash"> get_param: &lt;parameter name> </screen>
                    <para>The <replaceable>parameter
                            name</replaceable> of the input parameter
                        to be resolved is given as a single parameter
                        to this function. A sample use of this
                        function in context of a resource definition
                        is shown below:</para>
                    <screen language="bash">  parameters:
  instance_type:
    type: string
    description: Instance type to be used.

resources:
  my_instance:
    type: OS::Nova::Server
    properties:
      flavor: { get_param: instance_type}
 </screen>
                </section>
                <section xml:id="get_attr_intrinsic_function">
                    <title>get_attr</title>
                    <para>The <code>get_attr</code> function allows
                        for referencing an attribute of a resource. At
                        runtime, it will be resolved to the value of
                        an attribute of a resource instance created
                        from the respective resource definition of the
                        template. The syntax of the
                            <code>get_attr</code> function is as
                        follows:</para>
                    <screen language="bash">  get_attr: [ &lt;resource ID>, &lt;attribute name> ]  </screen>
                    <variablelist>
                        <varlistentry>
                            <term><replaceable>resource ID</replaceable></term>
                            <listitem>
                                <para>This parameter specifies the
                                   resource the attribute of which
                                   shall be resolved. This resource
                                   must be defined within the
                                   <emphasis role="italic"
                                   >resources</emphasis> section of
                                   the template (see  <xref
                                   linkend="resources_d1e142"
                                   />).</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><replaceable>attribute name</replaceable></term>
                            <listitem>
                                <para>This parameter specifies the
                                   attribute to be resolved.</para>
                                <para>An example of using the
                                   <code>get_attr</code> function is
                                   shown
                                   below:<screen language="bash"> resources:
  my_instance:
    type: OS::Nova::Server
    # ...

outputs:
  instance_ip:
    description: IP address of the deployed compute instance
    value: { get_attr: [my_instance, first_address] } </screen></para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </section>
                <section xml:id="get_resource_intrinsic_function">
                    <title>get_resource</title>
                    <para>The <code>get_resource</code> function
                        allows for referencing another resource within
                        the same template. At runtime, it will be
                        resolved to the reference ID of the resource,
                        which is resource type specific. For example,
                        a reference to a floating IP resource will
                        return the respective IP address at runtime.
                        The syntax of the <code>get_resource</code>
                        function is as follows:</para>
                    <screen language="bash">   get_resource: &lt;resource ID> </screen>
                    <variablelist>
                        <varlistentry>
                            <term><replaceable>resource ID</replaceable></term>
                            <listitem>
                                <para>The <replaceable
                                   >resource ID</replaceable> of the
                                   referenced resources as used in the
                                   current template is specified as
                                   the single parameter to the
                                   <code>get_resource</code>
                                   function.</para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </section>
                <section xml:id="str_replace_intrinsic_function">
                    <title>str_replace</title>
                    <para>The <code>str_replace</code> function allows
                        for dynamically constructing strings by
                        providing a template string with placeholders
                        and a list of mappings to assign values to
                        those placeholders at runtime. The
                        placeholders are replaced with mapping values
                        wherever a mapping key exactly matches a
                        placeholder. The syntax of the
                            <code>str_replace</code> function is as
                        follows:</para>
                    <screen language="bash"> str_replace:
  template: &lt;template string>
  params: &lt;parameter mappings> </screen>
                    <variablelist>
                        <varlistentry>
                            <term><code>template</code></term>
                            <listitem>
                                <para>The <code
                                   >template</code> argument
                                   defines the template string that
                                   contains placeholders which will be
                                   substituted at runtime.</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><code>params</code></term>
                            <listitem>
                                <para>The <code>params</code> argument
                                   provides parameter mappings in the
                                   form of a dictionary that will be
                                   used for placeholder substitution
                                   in the <replaceable>template
                                   string</replaceable> at runtime.
                                   Within <replaceable>parameter
                                   mappings</replaceable> one can make
                                   use of other functions (for example
                                   <code>get_attr</code> to use
                                   resource attribute values) for
                                   template substitution.</para>
                                <para>The example below shows a simple
                                   use of the <code>str_replace</code>
                                   function in the
                                   <code>outputs</code> section of a
                                   template to build a URL for logging
                                   into a deployed
                                   application.<screen language="bash"> resources:
  my_instance:
    type: OS::Nova::Server
    # general metadata and properties ...

outputs:
  Login_URL:
    description: The URL to log into the deployed application
    value:
      str_replace:
        template: http://host/MyApplication
        params:
          host: { get_attr: [ my_instance, first_address ] } </screen><remark>Reviewer:
                                   Can you add more details to this
                                   description? It's not clear exactly
                                   how the params argument works here
                                   and what will get substituted into
                                   the final URL. I think a "for
                                   example" is needed.</remark>The
                                   <code>str_replace</code> function
                                   can also be used for constructing
                                   bigger chunks of text such as
                                   scripts for initializing compute
                                   instances, as shown in the example
                                   below:<screen language="bash">  parameters:
  DBRootPassword:
    type: string
    description: Root password for MySQL
    hidden: true

resources:
  my_instance:
    type: OS::Nova::Server
    properties:
      # general properties ...
      user_data:
        str_replace:
          template: |
            #!/bin/bash
            echo "Hello world"
            echo "Setting MySQL root password"
            mysqladmin -u root password $db_rootpassword
            # do more things ...
          params:
            $db_rootpassword: { get_param: DBRootPassword } </screen>In
                                   the example above, assume that
                                   MySQL is being configured on a
                                   compute instance and the root
                                   password is going to be set based
                                   on a user-provided parameter. The
                                   script for doing this is provided
                                   as <code>user_data</code> to the
                                   compute instance, leveraging the
                                   <code>str_replace</code>
                                   function.<remark>Reviewer: Can you
                                   add more details to this
                                   description? It's not clear to me
                                   exactly how this example is
                                   intended to
                                   function.</remark></para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </section>
            </section>
        </section>
    </chapter>
    <chapter xml:id="Simple_Template_Example-d1e637">
        <title>Simple Template Example</title>
        <para>HOT is a new template format meant to replace the
            CloudFormation-compatible format (CFN) as the native
            format supported by &Checkmate;. This guide is targeted
            towards template authors and explains how to write HOT
            templates based on examples. A detailed specification of
            HOT can be found in <xref
                linkend="Intro_to_Templates-d1e633"/>.</para>
        <para>This chapter gives an introduction on how to write HOT
            templates, starting from very basic steps and then going
            into more and more detail by means of examples.</para>
        <section xml:id="Basic_Template_Example-d1e637">
            <title>A Most Basic Template</title>
            <para>The most basic template possible may contain only a
                single resource definition using only predefined
                properties (along with the mandatory Heat template
                version tag). For example, the template below could be
                used to simply deploy a single compute
                instance:</para>
            <screen> heat_template_version: 2013-05-23

description: Simple template to deploy a single compute instance

resources:
  my_instance:
    type: OS::Nova::Server
    properties:
      key_name: my_key
      image: F18-x86_64-cfntools
      flavor: m1.small </screen>
            <para>Each HOT template has to include the <emphasis
                    role="italic">heat_template_version</emphasis> key
                with value '2013-05-23' (the current version of HOT).
                While the <emphasis role="italic"
                    >description</emphasis> is optional, it is good
                practice to include some useful text that describes
                what users can do with the template. In case you want
                to provide a longer description that does not fit on a
                single line, you can provide multi-line text in YAML,
                for
                example:<screen>  description: >
  This is how you can provide a longer description
  of your template that goes over several lines.  </screen></para>
            <para>The <emphasis role="italic">resources</emphasis>
                section is required and must contain at least one
                resource definition. In the example above, a compute
                instance is defined with hard-coded values for the
                    <code>key_name</code>, <code>image</code>, and
                    <code>flavor</code> parameters.</para>
            <para>Note that all those elements &ndash; a key-pair with
                the given name, the image, and the flavor &ndash; must
                exist in the Rackspace environment where the template
                is used. Typically a template is made more easily
                reusable, however, by defining a set of <emphasis
                    role="italic">input parameters</emphasis> rather
                than hard-coding such values.</para>
        </section>
        <section xml:id="Template_Input_Parameters-d1e143">
            <title>Template Input Parameters</title>
            <para>Input parameters defined in the <emphasis
                    role="italic">parameters</emphasis> section of an
                &Checkmate; template  allow users to customize a
                template during deployment (see also <xref
                    linkend="parameters_section_d1e753"/>). For
                example, this allows for providing custom key-pair
                names or image IDs to be used for a deployment. From a
                template author's perspective, this helps to make a
                template more easily reusable by avoiding hard-coded
                assumptions.</para>
            <para>Continuing with the example used above, it makes
                sense to allow users to provide their custom
                key-pairs, to provide their own image, and to select a
                flavor for the compute instance. This can be achieved
                by extending the initial template as follows:</para>
            <screen> heat_template_version: 2013-05-23

description: Simple template to deploy a single compute instance

parameters:
  key_name:
    type: string
    description: Name of key-pair to be used for compute instance
  image_id:
    type: string
    description: Image to be used for compute instance
  instance_type:
    type: string
    description: Type of instance (flavor) to be used

resources:
  my_instance:
    type: OS::Nova::Server
    properties:
      key_name: { get_param: key_name }
      image: { get_param: image_id }
      flavor: { get_param: instance_type } </screen>
            <para>In the example above, three input parameters have
                been defined that must be provided by the user at
                deployment. The fixed values for the respective
                resource properties have been replaced by references
                to the corresponding input parameters by means of the
                    <code>get_param</code> function (see also <xref
                    linkend="intrinsic_functions_d1e725"/>).</para>
            <para>You can also define default values for input
                parameters which will be used in case the user does
                not provide the respective parameter during
                deployment. For example, the following definition for
                the <code>instance_type</code> parameter would select
                the <code>m1.small</code> flavor by default unless
                specified otherwise by the user:</para>
            <screen> parameters:
  instance_type:
    type: string
    description: Type of instance (flavor) to be used
    default: m1.small</screen>
            <para>Another option that can be specified for a parameter
                is to hide its value when users request information
                about a stack deployed from a template. This is
                achieved by the <code>hidden</code> attribute and
                useful, for example, when requesting passwords as user
                input:</para>
            <screen> parameters:
  database_password:
    type: string
    description: Password to be used for database
    hidden: true </screen>
            <para>This extends our example as follows:</para>
            <screen> heat_template_version: 2013-05-23

description: Simple template to deploy a single compute instance

parameters:
  key_name:
    type: string
    description: Name of key-pair to be used for compute instance
  image_id:
    type: string
    description: Image to be used for compute instance
  instance_type:
    type: string
    description: Type of instance (flavor) to be used
    <emphasis role="bold">default: m1.small </emphasis>
  <emphasis role="bold">database_password:
    type: string
    description: Password to be used for database
    hidden: true</emphasis>

resources:
  my_instance:
    type: OS::Nova::Server
    properties:
      key_name: { get_param: key_name }
      image: { get_param: image_id }
      flavor: { get_param: instance_type } </screen>
            <section xml:id="Restricting_User_Input-d1e387">
                <title>Restricting User Input</title>
                <para>In some cases you might want to restrict the
                    values of input parameters that users can supply.
                    For example, you might know that the software
                    running in a compute instance needs a certain
                    amount of resources, so you might want to restrict
                    the <emphasis role="italic"
                        >instance_type</emphasis> parameter introduced
                    above. Parameters in HOT templates can be
                    restricted by adding a <emphasis role="italic"
                        >constraints</emphasis> section (see also
                        <xref linkend="parameter_constraints_d1e264"
                    />). For example, the following would allow only
                    three values to be provided as input for the
                        <emphasis role="italic"
                        >instance_type</emphasis> parameter:</para>
                <screen> parameters:
  instance_type:
    type: string
    description: Type of instance (flavor) to be used
    default: m1.small 
    constraints:
      - allowed_values: [ m1.medium, m1.large, m1.xlarge ]
        description: Value must be one of m1.medium, m1.large, or m1.xlarge. </screen>
                <para>The <code
                        >constraints</code> section allows for
                    defining a list of constraints that must all be
                    fulfilled by user input. For example, the
                    following list of constraints could be used to
                    clearly specify format requirements on a password
                    to be provided by users:</para>
                <screen> parameters:
  database_password:
    type: string
    description: Password to be used for database
    hidden: true
    constraints:
      - length: { min: 6, max: 8 }
        description: Password length must be between 6 and 8 characters.
      - allowed_pattern: "[a-zA-Z0-9]+"
        description: Password must consist of characters and numbers only.
      - allowed_pattern: "[A-Z]+[a-zA-Z0-9]*"
        description: Password must start with an uppercase character. </screen>
                <para>This now extends our example as shown
                    below:</para>
                <screen> heat_template_version: 2013-05-23

description: Simple template to deploy a single compute instance

parameters:
  key_name:
    type: string
    description: Name of key-pair to be used for compute instance
  image_id:
    type: string
    description: Image to be used for compute instance
  instance_type:
    type: string
    description: Type of instance (flavor) to be used
    default: m1.small
    <emphasis role="bold">constraints:
      - allowed_values: [ m1.medium, m1.large, m1.xlarge ]
        description: Value must be one of m1.medium, m1.large, or m1.xlarge. </emphasis>
  database_password:
    type: string
    description: Password to be used for database
    hidden: true
    <emphasis role="bold">constraints:
      - length: { min: 6, max: 8 }
        description: Password length must be between 6 and 8 characters.
      - allowed_pattern: "[a-zA-Z0-9]+"
        description: Password must consist of characters and numbers only.
      - allowed_pattern: "[A-Z]+[a-zA-Z0-9]*"
        description: Password must start with an uppercase character. </emphasis>

resources:
  my_instance:
    type: OS::Nova::Server
    properties:
      key_name: { get_param: key_name }
      image: { get_param: image_id }
      flavor: { get_param: instance_type } </screen>
                <para>Note that you can define multiple constraints of
                    the same type. Especially in the case of allowed
                    patterns this not only allows for keeping regular
                    expressions simple and maintainable, but also for
                    keeping error messages to be presented to users
                    precise.</para>
            </section>
        </section>
        <section xml:id="Providing_Template_Output-d1e423">
            <title>Providing Template Output</title>
            <para>In addition to template customization through input
                parameters, you will typically want to provide outputs
                to users, which can be done in the
                    <code>outputs</code> section of a template (see
                also <xref linkend="outputs_d1e725"/>). For example,
                the IP address by which the instance defined in the
                example above can be accessed should be provided to
                users. Otherwise, users would have to look it up
                themselves. The definition for providing the IP
                address of the compute instance as an output is shown
                below:</para>
            <screen>  outputs:
  instance_ip:
    description: The IP address of the deployed instance
    value: { get_attr: [my_instance, first_address] }  </screen>
            <para>Output values are typically resolved using intrinsic
                function such as the <code>get_attr</code> function in
                the example above (see also <xref
                    linkend="intrinsic_functions_d1e725"
                    />).<remark>Reviewer: how do you figure out the
                    attribute names that my_instance has, or is this
                    just assumed to be know when using a
                    resource?</remark></para>
            <para>Our completed simple template example is shown
                below:</para>
            <screen> heat_template_version: 2013-05-23

description: Simple template to deploy a single compute instance

parameters:
  key_name:
    type: string
    description: Name of key-pair to be used for compute instance
  image_id:
    type: string
    description: Image to be used for compute instance
  instance_type:
    type: string
    description: Type of instance (flavor) to be used
    default: m1.small
    constraints:
      - allowed_values: [ m1.medium, m1.large, m1.xlarge ]
        description: Value must be one of m1.medium, m1.large, or m1.xlarge.
  database_password:
    type: string
    description: Password to be used for database
    hidden: true
    constraints:
      - length: { min: 6, max: 8 }
        description: Password length must be between 6 and 8 characters.
      - allowed_pattern: "[a-zA-Z0-9]+"
        description: Password must consist of characters and numbers only.
      - allowed_pattern: "[A-Z]+[a-zA-Z0-9]*"
        description: Password must start with an uppercase character. 

resources:
  my_instance:
    type: OS::Nova::Server
    properties:
      key_name: { get_param: key_name }
      image: { get_param: image_id }
      flavor: { get_param: instance_type } 

<emphasis role="bold">outputs:
  instance_ip:
    description: The IP address of the deployed instance
    value: { get_attr: [my_instance, first_address] } </emphasis> </screen>
        </section>
    </chapter>
    <chapter xml:id="Environment-d1e429">
        <title>Environment</title>
        <para>The environment is used to affect the runtime behavior
            of the template. It provides a way to override the default
            resource implementation and the parameters passed to
            &Checkmate;.</para>
        <para>The environment is a yaml text file with two main
            sections: <code>resource_registry</code> and
                <code>parameters</code>.</para>
        <para>Using the environment file (called
                <code>my_env.yaml</code> in the example below) from
            the command line when creating a stack is shown in the
            following example:</para>
        <screen>  heat stack-create -e my_env.yaml -P "some_parm=bla" -f my_tmpl.yaml </screen>
        <section xml:id="Environment_Usage_Examples-d1e429">
            <title>Usage Examples</title>
            <para>Various uses for the environment are shown
                below:</para>
            <itemizedlist>
                <title>Pass Parameters into &Checkmate;</title>
                <listitem>
                    <para>The following example passes three
                        parameters <code>KeyName</code>,
                            <code>InstanceType</code>, and
                            <code>ImageId</code> into &Checkmate;,
                        overriding any values for these parameters
                        that are defined in the
                        template:<screen> parameters:
  KeyName: heat_key
  InstanceType: m1.micro
  ImageId: F18-x86_64-cfntools </screen></para>
                </listitem>
            </itemizedlist>
            <itemizedlist>
                <title>Deal with the Renaming of OpenStack Quantum to
                    Neutron</title>
                <listitem>
                    <screen> resource_registry:
  "OS::Quantum*": "OS::Neutron*"
 </screen>
                </listitem>
            </itemizedlist>
            <itemizedlist>
                <title> Override a Resource Type with a Custom
                    TemplateResource</title>
                <listitem>
                    <screen> resource_registry:
  "AWS::EC2::Instance": file:///home/mine/my_instance_with_better_defaults.yaml 
 </screen>
                </listitem>
            </itemizedlist>
            <itemizedlist>
                <title>Always Map Resource Type X to Y</title>
                <listitem>
                    <screen> resource_registry:
  "OS::Networking::FloatingIP": "OS::Nova::FloatingIP" </screen>
                </listitem>
            </itemizedlist>
            <itemizedlist>
                <title>Use Default Resources Except One For a
                    Particular Resource in the Template</title>
                <listitem>
                    <screen> resource_registry:
  resources:
    my_db_server:
      "OS::DBInstance": file:///home/mine/all_my_cool_templates/db.yaml</screen>
                </listitem>
            </itemizedlist>
            <remark>Reviewer: Could you please provide a descriptive
                paragraph explaining each of the Usage Examples listed
                above?</remark>
        </section>
    </chapter>
    <chapter xml:id="Builtin_Functions-d1e397">
        <title>Built-in Functions</title>
        <remark>Reviewer: this comment applies to this entire chapter.
            When listing parameters, String is always capitalized,
            Integer is capitalized, but other types such as list and
            map are not. Is this correct?</remark>
        <remark linkend="intrinsic_functions_d1e725">Reviewer: can you
            please explain the difference between instrinsic functions
            (as defined in <xref linkend="intrinsic_functions_d1e725"
            />) and built-in functions so I can add the explanation
            here?</remark>
        <para>There are a number of built-in functions that you can
            use to help you write templates. </para>
        <para>All of these functions (except <code>Ref</code>) start
            with <code>Fn::</code>.</para>
        <section xml:id="Ref_Builtin_Function-d1e937">
            <title>Ref</title>
            <para><code>Ref</code> returns the value of the named
                parameter or resource.</para>
            <para><emphasis role="bold">
                Parameters</emphasis></para>
            <variablelist>
                <varlistentry>
                    <term><replaceable>name:
                        String</replaceable></term>
                    <listitem>
                        <para>Specifies the name of the Resource or
                            Parameter.</para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <para><emphasis role="bold"> Usage</emphasis></para>
            <screen> {Ref: my_server} </screen>
            <para><code>Ref</code> returns the nova instance ID for
                the server, for example
                    <code>d8093de0-850f-4513-b202-7979de6c0d55</code>.</para>
        </section>
        <section xml:id="Fn_Base64_Builtin_Function-d1e937">
            <title>Fn::Base64</title>
            <para><code>Fn::Base64</code> returns the Base64
                representation of the input string.</para>
            <para><emphasis role="bold"> Parameters</emphasis></para>
            <variablelist>
                <varlistentry>
                    <term><replaceable>value:
                        String</replaceable></term>
                    <listitem>
                        <para>Specifies the string to convert.</para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <para><emphasis role="bold"> Usage</emphasis></para>
            <screen> {Fn::Base64: "convert this string please."} </screen>
            <para><code>Fn::Base64</code> returns the Base64
                representation of the input string.</para>
        </section>
        <section xml:id="Fn_FindInMap_Builtin_Function-d1e937">
            <title>Fn::FindInMap</title>
            <para><code>Fn::FindInMap</code> returns the value
                corresponding to keys into a two-level map declared in
                the <code>Mappings</code> section.</para>
            <remark>Reviewer: where is the Mappings section defined?
                Is that an additional section that is added to the
                template?</remark>
            <para><emphasis role="bold"> Parameters</emphasis></para>
            <variablelist>
                <varlistentry>
                    <term><replaceable>map_name:
                        String</replaceable></term>
                    <listitem>
                        <para>Specifies the logical name of a mapping
                            declared in the <code>Mappings</code>
                            section that contains the keys and
                            values.</para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <variablelist>
                <varlistentry>
                    <term><replaceable>top_level_key:
                            String</replaceable></term>
                    <listitem>
                        <para>Specifies the top-level key name. Its
                            value is a list of key-value pairs.</para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <variablelist>
                <varlistentry>
                    <term><replaceable>second_level_key:
                            String</replaceable></term>
                    <listitem>
                        <para>Specifies the second-level key name,
                            which is set to one of the keys from the
                            list assigned to top_level_key.</para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <para><emphasis role="bold"> Usage</emphasis></para>
            <screen> Mapping:
  MyContacts:
    jone: {phone: 337, email: a@b.com}
    jim: {phone: 908, email: g@b.com}

{"Fn::FindInMap": ["MyContacts", "jim", "phone" ] } </screen>
            <para><code>Fn::FindInMap</code> returns the value for the
                specified second level key associated with the
                designated top level key (in this example
                    <code>908</code>).</para>
        </section>
        <section xml:id="Fn_GetAtt_Builtin_Function-d1e937">
            <title>Fn::GetAtt</title>
            <para><code>Fn::GetAtt</code> returns an attribute of a
                resource within the template.</para>
            <para><emphasis role="bold"> Parameters</emphasis></para>
            <variablelist>
                <varlistentry>
                    <term><replaceable>resource:
                        String</replaceable></term>
                    <listitem>
                        <para>Specifies the name of the
                            resource.</para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <variablelist>
                <varlistentry>
                    <term><replaceable>attribute:
                        String</replaceable></term>
                    <listitem>
                        <para>Specifies the name of the
                            attribute.</para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <para><emphasis role="bold"> Usage</emphasis></para>
            <screen> {Fn::GetAtt: [my_server, PublicIp]}  </screen>
            <para><code>Fn::GetAtt</code> returns the value for the
                specified attribute (in this example an IP address
                such as <code>10.0.0.2</code>).</para>
        </section>
        <section xml:id="Fn_GetAZs_Builtin_Function-d1e937">
            <title>Fn::GetAZs</title>
            <para><code>Fn::GetAZs</code> returns the availability
                zones within the given region.</para>
            <note>
                <para>Availability zones and regions are not fully
                    implemented in &Checkmate;.<remark>Reviewer: does
                        this mean they cannot be used at this time and
                        should be hidden until
                    available?</remark></para>
            </note>
            <para><emphasis role="bold"> Parameters</emphasis></para>
            <variablelist>
                <varlistentry>
                    <term><replaceable>region:
                        String</replaceable></term>
                    <listitem>
                        <para>Specifies the name of the region.</para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <para><emphasis role="bold"> Usage</emphasis></para>
            <screen>  {Fn::GetAZs: ""} </screen>
            <para><code>Fn::GetAZs</code> returns the list provided by
                nova <code>availability-zone-list</code>.</para>
        </section>
        <section xml:id="Fn_Join_Builtin_Function-d1e532">
            <title>Fn::Join</title>
            <para><code>Fn::Join</code> joins a list of strings with
                the given delimiter, similar to python join.</para>
            <para><emphasis role="bold"> Parameters</emphasis></para>
            <variablelist>
                <varlistentry>
                    <term><replaceable>delimiter:
                        String</replaceable></term>
                    <listitem>
                        <para>Specifies the string with which to join
                            the list.</para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <variablelist>
                <varlistentry>
                    <term><replaceable>list: list</replaceable></term>
                    <listitem>
                        <para>Specifies the list to join.</para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <para><emphasis role="bold"> Usage</emphasis></para>
            <screen>  {Fn::Join: [",", ["beer", "wine", "more beer"]]}   </screen>
            <para><code>Fn::Join</code> returns the list of strings
                joined with the specified delimiter (in this example:
                    <code>beer, wine, more beer</code> ).</para>
        </section>
        <section xml:id="Fn_Select_Builtin_Function-d1e286">
            <title>Fn::Select</title>
            <para><code>Fn::Select</code> selects an item from a
                list.</para>
            <para><emphasis role="bold"> Parameters</emphasis></para>
            <variablelist>
                <varlistentry>
                    <term><replaceable>selector:
                        Integer</replaceable></term>
                    <listitem>
                        <para>Specifies the number of the desired item
                            in the list. Note that the number is
                            zero-based, with the first item in the
                            list having number zero.</para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <variablelist>
                <varlistentry>
                    <term><replaceable>collection:
                        list</replaceable></term>
                    <listitem>
                        <para>Specifies the collection from which to
                            select the item.</para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <para><emphasis role="bold"> Usage</emphasis></para>
            <screen>  { "Fn::Select" : [ "2", [ "apples", "grapes", "mangoes" ] ] }
  </screen>
            <para><code>Fn::Select</code> returns the item selected by
                number from the list (in this example:
                    <code>mangoes</code> ).</para>
        </section>
        <section xml:id="Fn_Split_Builtin_Function-d1e286">
            <title>Fn::Split</title>
            <para><code>Fn::Split</code> converts a string into a list
                based on the delimiter. Provides the reverse operation
                to <code>Fn::Join</code>.</para>
            <para><emphasis role="bold"> Parameters</emphasis></para>
            <variablelist>
                <varlistentry>
                    <term><replaceable>delimiter:
                        String</replaceable></term>
                    <listitem>
                        <para>Specifies the matching string on which
                            to split the list.</para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <variablelist>
                <varlistentry>
                    <term><replaceable>string:
                        String</replaceable></term>
                    <listitem>
                        <para>Specifies the string to split.</para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <para><emphasis role="bold"> Usage</emphasis></para>
            <screen>   { "Fn::Split" : [ ",", "str1,str2,str3,str4"]}   </screen>
            <para><code>Fn::Split</code> returns the converted list
                (in this example: <code> {["str1", "str2", "str3",
                    "str4"]} </code> ).</para>
        </section>
        <section xml:id="Fn_Replace_Builtin_Function-d1e435">
            <title>Fn::Replace</title>
            <para><code>Fn::Replace</code> finds and replaces one
                string with another.</para>
            <para><emphasis role="bold"> Parameters</emphasis></para>
            <variablelist>
                <varlistentry>
                    <term><replaceable>substitutions:
                            map</replaceable></term>
                    <listitem>
                        <para>Specifies the map of
                            substitutions.</para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <variablelist>
                <varlistentry>
                    <term><replaceable>string:
                        String</replaceable></term>
                    <listitem>
                        <para>Specifies the string in which to do the
                            substitutions.</para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <para><emphasis role="bold"> Usage</emphasis></para>
            <screen>  {"Fn::Replace": [
 {'$var1': 'foo', '%var2%': 'bar'},
  '$var1 is %var2%'
]}
</screen>
            <para><code>Fn::Replace</code> returns the string with the
                replacements made (in this example: <code>"foo is
                    bar"</code> ).</para>
        </section>
        <section xml:id="Fn_ResourceFacade_Builtin_Function-d1e745">
            <title>Fn::ResourceFacade</title>
            <para><code>Fn::ResourceFacade</code> passes metadata in a
                top level template into the resource template.</para>
            <para><emphasis role="bold"> When Writing a Template
                    Resource</emphasis></para>
            <itemizedlist>
                <listitem>
                    <para>User writes a template that will fill in for
                        a resource (the resource is the
                        facade).</para>
                </listitem>
                <listitem>
                    <para>When users are writing their template they
                        need to access the metadata from the
                        facade.</para>
                </listitem>
            </itemizedlist>
            <para><emphasis role="bold"> Parameters</emphasis></para>
            <variablelist>
                <varlistentry>
                    <term><replaceable>attribute_name:
                            String</replaceable></term>
                    <listitem>
                        <para>One of <code>Metadata</code>,
                                <code>DeletionPolicy</code> or
                                <code>UpdatePolicy</code>.</para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <para><emphasis role="bold"> Usage</emphasis></para>
            <screen> {'Fn::ResourceFacade': 'Metadata'}
{'Fn::ResourceFacade': 'DeletionPolicy'}
{'Fn::ResourceFacade': 'UpdatePolicy'} 
</screen>
            <para><emphasis role="bold"> Example</emphasis></para>
            <para>Here is a top level template
                <code>top.yaml</code>:</para>
            <screen> resources:
  my_server:
    type: OS::Compute::Server
    metadata:
      key: value
      some: more stuff 
</screen>
            <para>Here is a resource template
                    <code>my_actual_server.yaml</code>:</para>
            <screen>  resources:
  _actual_server_:
    type: OS::Compute::Server
    metadata: {'Fn::ResourceFacade': Metadata} 
</screen>
            <para>Here is the environment file
                <code>env.yaml</code>:</para>
            <screen>  resource_registry:
  resources:
    my_server:
      "OS::Compute::Server": my_actual_server.yaml 
</screen>
            <para>To use it, enter:</para>
            <screen> heat stack-create -f top.yaml -e env.yaml 
</screen>
            <para>What happens when the stack is created by
                    <code>stack-create</code> is that the metadata in
                    <code>top.yaml</code> (<code>key: value</code>,
                    <code>some: more stuff</code>) gets passed into
                the resource template via the
                    <code>Fn::ResourceFacade</code> function.</para>
        </section>
        <section xml:id="Fn_MemberListToMap_Builtin_Function-d1e742">
            <title>Fn::MemberListToMap</title>
            <para><code>Fn::MemberListToMap</code> converts an AWS
                style member list into a map.</para>
            <para><emphasis role="bold"> Parameters</emphasis></para>
            <variablelist>
                <varlistentry>
                    <term><replaceable>key name:
                        String</replaceable></term>
                    <listitem>
                        <para>Specifies the name of the key (normally
                                <code>Name</code> or
                            <code>Key</code>).</para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <variablelist>
                <varlistentry>
                    <term><replaceable>value name:
                            String</replaceable></term>
                    <listitem>
                        <para>The name of the value (normally
                                <code>Value</code>).</para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <variablelist>
                <varlistentry>
                    <term><replaceable>list: A list of
                            strings</replaceable></term>
                    <listitem>
                        <para>Specifies the string to convert.</para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <para><emphasis role="bold"> Usage</emphasis></para>
            <screen> {'Fn::MemberListToMap': ['Name', 'Value', ['.member.0.Name=key',
                                           '.member.0.Value=door',
                                           '.member.1.Name=color',
                                           '.member.1.Value=green']]} 
</screen>
            <para><code>Fn::MemberListToMap</code> returns the
                resulting map (in this example: <code> {'key': 'door',
                    'color': 'green'} </code> ).</para>
        </section>
    </chapter>
    <chapter xml:id="Rackspace_Resources-d1e832">
        <title>Rackspace Resources</title>
        <para>This chapter lists the Rackspace resources.</para>
        <remark>Reviewer: we presumably need to add a list of
            Rackspace Resource Types to this doc. Can you please
            provide it to me so I can add it to this doc? I'm assuming
            that we don't need to provide a list of OpenStack Resource
            Types here; is that correct?</remark>
    </chapter>
    <chapter xml:id="Hello_World_Template-d1e724" security="writeronly">
        <title>Simple Template Example</title>
        <para/>
        <section xml:id="Hello_World_Example-d1e926">
            <title>Simple Template Example &ndash; Helloworld
                Template</title>
            <para>A template describes a design that provides an
                application with certain capabilities (scalability,
                availability, and so forth). It defines the component
                parts of the application, their relationships to each
                other, and the various constraints on the components
                and relationships that must be met in order for the
                application to work as specified.</para>
            <para>The simple Orchestration template helloworld is a
                good starting point for understanding how to create
                your own templates:</para>
            <example>
                <title>Simple Template Example: helloworld</title>
                <programlisting language="xml"><xi:include href="../../../src/main/resources/samples/orch_helloworld" parse="text"><xi:fallback>Missing code sample!<?rax fail?></xi:fallback></xi:include></programlisting>
            </example>
            <para>Each template consists of the following sections:<itemizedlist>
                    <listitem>
                        <para>blueprint</para>
                        <itemizedlist>
                            <listitem>
                                <para>services</para>
                            </listitem>
                            <listitem>
                                <para>options</para>
                            </listitem>
                            <listitem>
                                <para>resources [optional]</para>
                            </listitem>
                            <listitem>
                                <para>meta-data [optional]</para>
                            </listitem>
                        </itemizedlist>
                    </listitem>
                    <listitem>
                        <para>environment</para>
                    </listitem>
                    <listitem>
                        <para>inputs</para>
                    </listitem>
                </itemizedlist></para>
            <para>We will examine each section in detail.</para>
            <para>The blueprint begins by providing the name
                    <code>"Hello World"</code>, description
                    <code>"Simple Blueprint to create a cloud
                    server."</code>, and version <code>1.0.0</code> of
                the blueprint.</para>
            <para>The <code>blueprint</code> section for helloworld is
                further divided into the following two sub-sections:<itemizedlist>
                    <listitem>
                        <para>services</para>
                    </listitem>
                    <listitem>
                        <para>options</para>
                    </listitem>
                </itemizedlist></para>
            <note>
                <para>In this blueprint example, there are no
                        <code>resources</code> or
                        <code>meta-data</code> sections
                    defined.</para>
            </note>
            <section xml:id="Hello_World_Services-d1e529">
                <title>helloworld Blueprint &ndash; Services
                    Section</title>
                <para>The <code>services</code> section specifies the
                    services that are required for the
                    deployment:</para>
                <example>
                    <title>services section: helloworld</title>
                    <programlisting>services:
    "server":
      component:
        interface: linux
</programlisting>
                </example>
                <para>The <code>services</code> field specifies that
                    it requires a service named <code>server</code>,
                    that uses a <code>component</code> that has a
                        <code>linux</code> interface. </para>
                <para>In this example, the component represents a
                    linux operating system (<code>interface:
                        linux</code>).</para>
                <para>Currently, <code>services</code> defined in a
                    blueprint are limited to only one
                        <code>component</code> per service. Service
                    names are arbitrary, but component names are
                    defined in the providers catalog. A provider is a
                    plug-in for &Checkmate; that understands how to
                    operate a service or system. For example, the
                    Rackspace Compute Provider knows how to call
                    Rackspace Cloud and create compute resources. In
                    the example provided above the service defines a
                    Cloud Server. </para>
                <para>This will cause the blueprint to look for the
                    resources for the <code>service</code> called
                        <code>server</code>. It queries the list of
                    providers for a <code>component</code> with an
                        <code>interface</code> of <code>linux</code>.
                    Since chef-solo is one of the providers, that will
                    bring in the chef map information. Chef solo will
                    pull in the information from the chef map. The
                    chef map is described in <xref
                        linkend="chef_cookbooks-dle563"/>.</para>
            </section>
            <section xml:id="Hello_World_Options-d1e795">
                <title>helloworld Blueprint &ndash; Options
                    Section</title>
                <para>The <code>options</code> section defines the
                    options that are required to fully specify the
                    deployment:</para>
                <example>
                    <title>options section: helloworld</title>
                    <programlisting>
  options: #Options are used by the user interface, but they are not required
    server_size:
      label: Server Size
      type: integer
      default: 512
      description: The size of the server instance in MB of RAM.
      display-hints:
        group: server
        order: 1
        list-type: compute.memory
        choice:
        - name: 512 Mb
          value: 512
        - name: 1 Gb
          value: 1024
        - name: 2 Gb
          value: 2048
        - name: 4 Gb
          value: 4096
        - name: 8 Gb
          value: 8092
        - name: 16 Gb
          value: 16384
        - name: 30 Gb
          value: 30720
      constrains:
      - resource_type: compute
        setting: memory
    os:
      label: Operating System
      default: Ubuntu 12.04
      type: string
      display-hints:
        group: server
        choice:
        - Ubuntu 12.04
        - CentOS 6.4
        - Debian
        - Gentoo
      constrains:
      - resource_type: compute
        setting: os
    region:
      label: Region
      type: string
      required: true
      default: ORD
      display-hints:
        group: deployment
        list-type: region
        choice:
        - DFW
        - ORD
        - LON

</programlisting>
                </example>
                <para>The <code>options</code> section specifies data
                    entry fields and parameters for an application or
                    service. This is where you specify choices for the
                    user for resource options, such as
                        <code>server_size</code>, <code>os</code>,
                        <code>region</code>, database size, and so on.
                    You can designate how options are named, which
                    options are required versus optional, how they are
                    selected, and the default selection.</para>
                <para>In this example, the options specified are
                        <code>server_size</code>, <code>os</code>, and
                        <code>region</code>. </para>
                <para>For the <code>server_size</code> option, a
                        <code>label</code> is specified to apply to
                    the GUI to provide the label <code>Server
                        Size</code> for the option. The
                        <code>type</code> is <code>integer</code>, and
                    the <code>default</code> size is 512 Mb. The
                        <code>description</code> is <code>The size of
                        the server instance in MB of RAM</code>. </para>
                <para>The section <code>display-hints</code> is
                    optional and provides hints to the GUI or command
                    line interface about how to display items. In this
                    case, a <code>group</code> of options called
                        <code>server</code> is defined to display the
                    server options with the GUI, including a list with
                    the supported memory sizes (<code>list-type:
                        compute.memory</code>) for the server. The
                    memory setting is defined with <code>order:
                        1</code> to specify that this setting appears
                    first in the server group. The choices are
                        <code>512 Mb</code>, <code>1 Gb</code>,
                        <code>2 Gb</code>, <code>4 Gb</code>, <code>8
                        Gb</code>, <code>16 Gb</code>, or <code>30
                        Gb</code>, with the associated values as
                    shown. The <code>server_size</code> constrains the
                        <code>memory</code>
                    <code>setting</code> for the <code>compute</code>
                    <code>resource_type</code>. The list of choices
                    for server size will be provided in the GUI in a
                    selection list (if a GUI is used) that displays
                    the available names and values for the choices,
                    from 512 Mb to 30 Gb. These choices do not apply
                    if the blueprint is not used with the GUI and the
                        <code>default</code> value is used instead
                        (<code>512</code>).</para>
                <para>For the <code>os</code> option, a
                        <code>label</code> is specified that will be
                    applied to the GUI to provide the label
                        <code>Operating System</code> for the option.
                    The <code>default</code> is <code>Ubuntu
                        12.04</code> and the <code>type</code> is
                        <code>string</code>.</para>
                <para>The section <code>display-hints</code> defines a
                        <code>group</code> of options called
                        <code>server</code> to display the os options
                    with the GUI, including a list with the supported
                    operating systems for the server. The choices are
                        <code>Ubuntu 12.04</code>, <code>CentOS
                        6.4</code>, <code>Debian</code>, and
                        <code>Gentoo</code>. These choices do not
                    apply if the blueprint is not used with the GUI
                    and the <code>default</code>
                    <code>Ubuntu 12.04</code> will be used instead.
                    This option constrains the <code>compute</code>
                    resource for the <code>os</code>
                    <code>setting</code>.</para>
                <para>For the <code>region</code> option, a
                        <code>label</code> is specified that will be
                    applied to the GUI to provide the label
                        <code>Region</code> for the option. The
                        <code>type</code> is <code>string</code>, the
                        <code>region</code> setting is
                        <code>required</code>, and the
                        <code>default</code> is
                    <code>ORD</code>.</para>
                <para>The section <code>display-hints</code> defines a
                        <code>group</code> of options called
                        <code>deployment</code> to display the region
                    options with the GUI, including a list with the
                    supported regions for the server. The choices are
                        <code>DFW</code>, <code>ORD</code>, and
                        <code>LON</code>. These choices do not apply
                    if the blueprint is not used with the GUI and the
                        <code>default</code>
                    <code>ORD</code> will be used instead.</para>
            </section>
            <section xml:id="Hello_World_Environment-d1e385">
                <title>helloworld Blueprint &ndash; Environment
                    Section</title>
                <para>The <code>environment</code> section specifies
                    the environment that is required for the
                    deployment:</para>
                <example>
                    <title>environment section: helloworld</title>
                    <programlisting>
environment:    
  id: rackspace-open-cloud
  name: Rackspace Open Cloud
  providers:
    nova:
      vendor: rackspace
</programlisting>
                </example>
                <para>The <code>environment</code> section describes
                    where you want to install the applications and any
                    constraints of the environment. This section is
                    typically unique to each blueprint author, so you
                    will create and manage your own environment. For
                    example, you might want to install your
                    applications on a server running Debian located in
                    a specific cloud environment or geographic
                    location.</para>
                <para><code>Providers</code> are generally included in
                    the <code>environment</code> section
                        also. <emphasis>Providers</emphasis> are
                    services that &Checkmate; has on hand and are key
                    building blocks for your deployment. Providers
                    consist of common infrastructure elements, such as
                    Load Balancer, Nova (server), Database (Cloud
                    Databases), and the Chef provider, Chef-Solo,
                    which is responsible for setting up your
                    application and also for synchronizing
                    dependencies among multiple web nodes. Providers
                    understand how to operate a service or
                    system.</para>
                <note>
                    <para> Blueprints are <emphasis>not</emphasis>
                        tied to one particular cloud deployment or
                        provider. </para>
                </note>
                <para>In this example, the <code>environment</code> is
                    the <code>Rackspace Open Cloud</code> with the
                        <code>id: rackspace-open-cloud</code>. The
                        <code>provider</code> is a <code>Nova</code>
                    (server) from the <code>vendor</code>
                    Rackspace.</para>
            </section>
            <section xml:id="Hello_World_Inputs-d1e195">
                <title>helloworld Blueprint &ndash; Inputs
                    Section</title>
                <para>The <code>inputs</code> section defines inputs
                    for the options via hard-coded values that let you
                    launch a blueprint from a single cURL
                    command.</para>
                <example>
                    <title>inputs section: helloworld</title>
                    <programlisting>
inputs: # These are hard-coded values added to make it easy to launch this blueprint with a single curl command
  services:
    "server":
      'compute':
        'memory': 512 Mb
        'region': DFW
        'os': Ubuntu 12.04

</programlisting>
                </example>
                <para>  Inputs are optional. Architects typically do
                    not use inputs. They would typically rather let
                    users provide their input via options in a GUI.
                    However, if you want to deploy your blueprint via
                    cURL rather than &Checkmate; services, using
                    inputs can be handy.</para>
                <para>In this example, the inputs are hard-coded to
                    allow the blueprint to be deployed using a single
                    cURL command. The Nova provider provides a
                    resource named <code>compute</code>. The compute
                    server has <code>512 Mb</code> of memory, is
                    located in the <code>DFW</code> region, and has
                    the <code>Ubuntu 12.04</code> os.</para>
                <remark>Reviewer: Ryan is going to look into modifying
                    the inputs/services section of helloworld to
                    provide a better example.</remark>
            </section>
        </section>
    </chapter>
    <chapter xml:id="Understanding_Blueprint_Syntax-d1e637" security="writeronly">
        <title>Understanding Blueprint Syntax</title>
        <para>This section presents two blueprint examples to teach
            you how blueprints work:<itemizedlist>
                <listitem>
                    <para>Intermediate Blueprint Example &ndash;
                        Awwbomb blueprint</para>
                </listitem>
                <listitem>
                    <para>Advanced Blueprint Example &ndash; Wordpress
                        blueprint</para>
                </listitem>
            </itemizedlist>
        </para>
        <section xml:id="Intermediate_Blueprint_Example-d1e637">
            <title>Intermediate Blueprint Example &ndash; Awwbomb
                Blueprint</title>
            <para>The awwbomb blueprint deploys the awwbomb
                application on two Cloud Servers behind a load
                balancer. The application displays a random picture
                from a Cloud Files container. If you deploy the
                blueprint (deploying the blueprint is not described in
                this guide), you can browse to the domain name
                provided to access your site and receive a random
                picture from your Cloud Files container. </para>
            <para>You can find the Awwbomb blueprint at <link
                    xlink:href="https://github.rackspace.com/Blueprints/awwbomb/blob/master/checkmate.yaml"
                    >https://github.rackspace.com/Blueprints/awwbomb/blob/master/checkmate.yaml</link>.</para>
            <para>Blueprints are typically stored in one .yaml file
                for convenience and named according to the following
                pattern: <emphasis>application_name</emphasis>.yaml,
                where <emphasis>application_name</emphasis> is the
                name for the application that the blueprint
                deploys.</para>
            <para>The awwbomb blueprint is a good example (for
                demonstration purposes) of a more complex
                blueprint:</para>
            <example>
                <title>Intermediate Blueprint Example: awwbomb</title>
                <programlisting language="xml"><xi:include href="../../../src/main/resources/samples/awwbomb" parse="text"><xi:fallback>Missing code sample!<?rax fail?></xi:fallback></xi:include></programlisting>
            </example>
            <para>We begin by describing the <code>blueprint</code>
                section. We will return to the
                    <code>environment</code> section later (<xref
                    linkend="aww_environment_section"/>).</para>
            <para>The <code>blueprint</code> section begins by
                providing the name <code>"AwwBomb"</code> and
                description <code>"Simple Blueprint for two servers
                    running AwwBomb behind a loadbalancer."</code> of
                the blueprint.</para>
            <para>The <code>blueprint</code> section is further
                divided into the following two sub-sections:<itemizedlist>
                    <listitem>
                        <para>services</para>
                    </listitem>
                    <listitem>
                        <para>options</para>
                    </listitem>
                </itemizedlist></para>
            <section xml:id="aww_services_section">
                <title>awwbomb Blueprint &ndash; Services
                    Section</title>
                <para>The <code>services</code> section specifies the
                    services that are required for the
                    deployment:</para>
                <example>
                    <title>services section: awwbomb</title>
                    <programlisting language="xml"><xi:include href="../../../src/main/resources/samples/awwbomb_services" parse="text"><xi:fallback>Missing code sample!<?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <para>The <code>services</code> section specifies that
                    it requires a service called <code>awwbomb</code>,
                    that uses a <code>component</code> of type
                        <code>application</code> called
                        <code>awwbomb</code>, which has an
                        <code>http</code> interface. </para>
                <para>This will cause the blueprint to look for the
                    resources for the service called awwbomb. It
                    queries the list of providers for a component with
                    an <code>interface</code> of <code>http</code>
                    that is an application named <code>awwbomb</code>.
                    Since chef-solo is one of the providers (as named
                    in the <code>environment</code> section, described
                    later), that will bring in the chef map
                    information. Chef solo will pull in the
                    information from the chef map. The chef map is
                    described in <xref linkend="chef_cookbooks-dle563"
                    />.</para>
                <para security="writeronly">Ryan will let me know when
                    the new lb (vip) syntax is integrated, so I can
                    add it to the Guide (Detailed Syntax chapter as
                    well as the awwbomb &amp; wordpress blueprints if
                    they use it.</para>
                <para>Next the blueprint needs the <code>lb</code>
                    (load balancer) service. The
                        <code>component</code> specifies an interface
                    of <code>http</code>, a type of
                        <code>load-balancer</code>, and a constraint
                    of <code>ROUND_ROBIN</code> for the load balancing
                    algorithm desired. The <code>lb</code> service is
                    related to (has <code>relations</code> to) another
                    service called <code>awwbomb</code> on the
                        <code>http</code> interface. All of the
                    resources under the <code>awwbomb</code> service
                    need to be related as nodes for that load
                    balancer. </para>
            </section>
            <section xml:id="awwbomb_options_section">
                <title>awwbomb Blueprint &ndash; Options
                    Section</title>
                <para>The <code>options</code> section defines the
                    options that are required to fully specify the
                    deployment:</para>
                <example>
                    <title>options section: awwbomb</title>
                    <programlisting><xi:include href="../../../src/main/resources/samples/awwbomb_options" parse="text"><xi:fallback>Missing code sample!<?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <para>The <code>options</code> section allows you to
                    define some special options, such as
                        <code>url</code>. If you define
                        <code>url</code>, then the engine will parse
                    the input from this option into its components.
                    For example, it will take the
                        <code>protocol</code> attribute and apply it
                    to the <code>protocol</code> setting of the load
                    balancer. So if you specify <code>https</code> in
                    the URL, then the load balancer will get set to
                    the <code>https</code> protocol. </para>
                <para>The <code>regex</code> in this case checks for a
                    valid domain name. The description notes that this
                    yields "The domain name you wish to use to access
                    your site (ex: example.com)".</para>
                <para>Some of the options defined are applied to the
                    GUI, and may be used as labels. These are marked
                    with the attribute <code>label</code> in the
                    blueprint. The first label has the value
                        <code>Site Address</code>. The sample value
                    provided is <code>http://example.com/</code>,
                    which would be displayed in the GUI, and is of
                    type <code>url</code>. Since <code>required</code>
                    has the value <code>true</code>, this option is
                    required. These options do not apply if the
                    blueprint is not used with the GUI.</para>
                <para>Next are the <code>constrains</code> that
                    provide the settings and their attributes for the
                    url:</para>
                <para>The first occurrence of <code>setting:
                        allow_insecure</code> says since the value is
                    set to <code>true</code>, to allow the insecure
                    http protocol if http is specified.</para>
                <para>The second occurrence of <code>setting:
                        domain</code> says to take the
                        <code>hostname</code> attribute and make it
                    the <code>domain</code> name of the load
                    balancer.</para>
                <para>The third occurrence of <code>setting:
                        domain</code> says to take the
                        <code>hostname</code> attribute and make it
                    the <code>domain</code> name of the awwbomb
                    service.</para>
                <para>The <code>register-dns</code> option specifies
                    that the <code>default</code> is
                        <code>false</code>, so don't register DNS by
                    default. A label of <code>Create DNS
                        records</code> is supplied for the GUI. In
                    this case, the <code>constrains</code> section
                    specifies that the DNS access is provided through
                    the <code>lb</code> service. </para>
                <para>The <code>region</code> option specifies that
                        <code>required</code> is <code>true</code>, so
                    a region must be specified. The region defaults to
                        <code>ORD</code>, is labeled
                        <code>Region</code>, and the possible choices
                    are <code>DFW</code>, <code>ORD</code>, and
                        <code>LON</code>. This field constrains the
                    region for the <code>load-balancer</code>
                    provider. </para>
                <para>The <code>servers</code> option specifies
                    several constraints for the awwbomb application:
                    the setting for <code>count</code> has a default
                    of <code>1</code> (type <code>int</code>) for the
                        <code>Number of Servers</code> and with
                        <code>constraints</code> that the value must
                    be greater than <code>0</code>.</para>
                <para>The <code>server_size</code> option
                        <code>constrains</code> the memory for the
                        <code>compute</code> resource_type for the
                        <code>awwbomb</code> service. The setting
                    specifies the "<code>size of the service instance
                        in MB of RAM</code>" with a default of
                        <code>512</code>. The GUI will display the
                    label <code>Server Size</code> with choices
                    available of 512 Mb, 1, 2, 4, 8, 16, or 30
                    Gb.</para>
                <para>The <code>os</code> option
                        <code>constrains</code> the <code>os</code>
                    for the <code>compute</code> resource_type for the
                        <code>awwbomb</code> service. It specifies the
                        "<code>operating system for all
                    servers</code>" with a default of <code>Ubuntu
                        12.04</code>. The GUI will display the label
                        <code>Operating System</code> with a choice of
                    only <code>Ubuntu 12.04</code> available.</para>
                <para>The <code>username</code> option will display
                    the label <code>System Username</code> with a
                    sample value of <code>aww</code> and a default of
                        <code>aww</code>.</para>
                <para>The <code>cf_username</code> option will display
                    the label <code>Cloud Files Username</code> with a
                    sample value of <code>awwbomb</code>  and required
                    is set to <code>true</code>, so it must be
                    provided.</para>
                <para>The <code>cf_apikey</code> option will display
                    the label <code>Cloud Files API Key</code> with a
                    sample value of <code>123456</code> and required
                    is set to <code>true</code>, so it must be
                    provided.</para>
                <para>The <code>cf_container</code> option will
                    display the label <code>Cloud Files Container
                        Name</code> with a sample value of
                        <code>awwbomb</code> and required is set to
                        <code>true</code>, so it must be
                    provided.</para>
            </section>
            <section xml:id="aww_environment_section">
                <title>awwbomb Blueprint &ndash; Environment
                    Section</title>
                <para>Review the <code>environment</code>
                    section:</para>
                <example>
                    <title>environment section: awwbomb</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="../../../src/main/resources/samples/awwbomb_environment" parse="text"><xi:fallback>Missing code sample!<?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <para>Environments provide a context and optional
                    constraints as well as a list of providers for
                    services. For example, if you have an environment
                    with a Cloud Databases provider constrained to LON
                    where Cloud Databases don't have 4GB instances,
                    then the catalog won't have 4GB instances.</para>
                <para>In this example, the name of the environment is
                    "Rackspace Open Cloud w/ Chef Solo", which
                    indicates the context. The providers are plug-ins
                    for &Checkmate; that understand how to operate a
                    service or system. They are:</para>
                <itemizedlist>
                    <listitem>
                        <para><code>chef-solo</code> &mdash; provider
                            that knows how to operate Chef and apply
                            cookbooks.</para>
                        <itemizedlist>
                            <listitem>
                                <para><code>provides</code> &mdash;
                                   defines the resource and protocol
                                   (for example: http versus https)
                                   for a provider, in this case
                                   <code>chef-solo</code>.</para>
                                <remark>Reviewer: will take out
                                   provides here because it's now in
                                   chef cookbook. Ryan to provide new
                                   bp with this removed.</remark>
                            </listitem>
                            <listitem>
                                <para><code>vendor</code> &mdash;
                                   specifies that the
                                   <code>vendor</code> for
                                   <code>chef-solo</code> is
                                   <code>opscode</code>. The opscode
                                   Provider knows how to operate Chef
                                   and apply cookbooks.</para>
                            </listitem>
                            <listitem>
                                <para><code>constraints</code> &mdash;
                                   apply logic to a particular service
                                   to define a limitation for a
                                   provider. For example, the source
                                   for the blueprint is located at the
                                   specified URL. In this example, it
                                   constrains the source for
                                   <code>chef-solo</code> to use the
                                   specified source URL for the
                                   blueprint. <note>
                                   <para>Using the special variable
                                   <code>%repo_url%</code> will cause
                                   the source URL to be replaced by
                                   the GUI with the URL for the source
                                   github repo for the blueprint. If
                                   you are not using a GUI with the
                                   blueprint, however, then
                                   <code>source:</code> should specify
                                   the hard-coded URL for the
                                   blueprint in github since the
                                   special variable
                                   <code>%repo_url%</code> will not
                                   work in that case.</para>
                                   </note>The URL specifies the
                                   location of the chef map and chef
                                   file for the blueprint. </para>
                            </listitem>
                        </itemizedlist>
                    </listitem>
                    <listitem>
                        <para><code>load-balancer</code>&mdash; this
                            provider knows how to create and configure
                            load balancers. </para>
                        <para>The special notation <code>{}</code>
                            means the empty set (NULL) in YAML / json
                            and indicates that there are no vendors or
                            constraints defined for
                                <code>load-balancer</code> or
                                <code>nova</code>, so just use
                            everything from the provider for these.
                            Note that you cannot leave this field
                            empty, since the YAML parser will create
                            an error if the field is empty.</para>
                    </listitem>
                    <listitem>
                        <para><code>nova</code> &mdash; provider that
                            knows how to create and configure
                            servers.</para>
                    </listitem>
                    <listitem>
                        <para><code>common</code> &mdash; means apply
                            to all the providers, in this case, use
                            the rackspace vendor for all providers. </para>
                    </listitem>
                </itemizedlist>
            </section>
            <section xml:id="awwbomb_inputs_section">
                <title>awwbomb Blueprint &ndash; Inputs
                    Section</title>
                <para>Now examine the <code>inputs</code>
                    section:</para>
                <example>
                    <title>inputs section: awwbomb</title>
                    <programlisting language="xml"> inputs:
  blueprint:
    cf_username: awwbomb
    cf_apikey: 12345
    cf_container: awwbomb </programlisting>
                </example>
                <para>The <code>inputs</code> section defines the
                    inputs that are provided to the blueprint:</para>
                <itemizedlist>
                    <listitem>
                        <para>The <code>cf_username</code> is set to
                                <code>awwbomb</code>.</para>
                    </listitem>
                    <listitem>
                        <para>The <code>cf_apikey</code> is set to
                                <code>123456</code>.</para>
                    </listitem>
                    <listitem>
                        <para>The <code>cf_container</code> is set to
                                <code>awwbomb</code>.</para>
                    </listitem>
                </itemizedlist>
                <para>These three inputs are hard-coded in the
                    blueprint, since default values are not provided
                    for them in the <code>options</code>
                    section.</para>
                <para>Next you will learn about the more complex
                    WordPress blueprint.</para>
            </section>
        </section>
        <section xml:id="Advanced_Blueprint_Example-d1e637">
            <title>Advanced Blueprint Example &ndash; WordPress
                Blueprint</title>
            <para>The WordPress blueprint creates a multi-server
                WordPress deployment using Chef and MySQL. Once the
                blueprint deployment is completed, you can inspect the
                status information for the deployment to check for any
                errors.</para>
            <remark>Ryan to check on status information, whether it
                will be available.</remark>
            <para>You can find the blueprint at <link
                xlink:href="https://github.rackspace.com/Blueprints/wordpress/blob/master/checkmate.yaml"
                >https://github.rackspace.com/Blueprints/wordpress/blob/master/checkmate.yaml</link>.</para>
            <para>The WordPress blueprint is a good example of a more
                advanced blueprint:</para>
            <example>
                <title>Advanced Blueprint Example: wordpress</title>
                
                <programlisting language="xml"><xi:include href="../../../src/main/resources/samples/wordpress" parse="text"><xi:fallback>Missing code sample!<?rax fail?></xi:fallback></xi:include></programlisting>
            </example>
            <para>Examine the <code>id</code>, <code>name</code>, and
                    <code>version</code> for the
                    <code>blueprint</code>. </para>
            <para>
                <programlisting>blueprint:
  id: 0255a076c7cf4fd38c69b6727f0b37ea
  name: High Availability WordPress with MySQL installed on Cloud Servers
  version: 1.0.0
</programlisting>
            </para>
            <para>The blueprint begins by specifying the
                    <code>id</code> for the blueprint. The
                    <code>id</code> is a unique identifier (UUID) that
                is generated for the blueprint if you are using pawn
                and request it to create the UUID. If you are not
                using pawn, you can generate your own UUID. It must be
                unique, however there are no other
                restrictions.</para>
            <para>The blueprint then specifies the <code>name:</code>
                <code>High Availability WordPress with MySQL installed
                    on Cloud Servers</code>. If you are using a GUI,
                the name will be displayed to distinguish this
                blueprint from others that are available.</para>
            <para>The <code>version</code> of the blueprint
                    (<code>1.0.0</code>). Please refer to the
                following information on semantic versions (which
                should be used for version number): <link
                    xlink:href="http://semver.org/"
                    >http://semver.org/</link>.</para>
            <para>The <code>blueprint</code> section is subdivided
                into four sub-sections:<itemizedlist>
                    <listitem>
                        <para><code>services</code></para>
                    </listitem>
                    <listitem>
                        <para><code>options</code></para>
                    </listitem>
                    <listitem>
                        <para><code>resources</code></para>
                    </listitem>
                    <listitem>
                        <para><code>meta-data</code></para>
                    </listitem>
                </itemizedlist></para>
            <section xml:id="Wordpress_Services">
                <title>Wordpress Blueprint &ndash; Services
                    Section</title>
                <para>The <code>services</code> section specifies the
                    services that are required for the
                    deployment:</para>
                <example>
                    <title>services section: wordpress</title>
                    <programlisting language="xml"><xi:include href="../../../src/main/resources/samples/wordpress_services_section" parse="text"><xi:fallback>Missing code sample!<?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <para>Service names are arbitrary (you may use
                    whatever names you want in the blueprint). Each
                    service specifies by name a particular component
                    that is required to provide the service. Component
                    names are defined in the provider catalog.
                    Currently there can be one and only one component
                    defined per service. If you want to create a
                    WordPress deployment with 3 servers, for example,
                    you will need to specify a load balancer, 2 web
                    servers, and a database server. This will be
                    specified in the blueprint as three separate
                    services: a load balancer service, a web server
                    service, and a database service. </para>
                <para>The first service defined is the <code>lb</code>
                    (load balancer) service. This component specifies
                    an interface of <code>http</code>, a type of
                        <code>load-balancer</code>, and a
                        <code>constraint</code> of
                        <code>ROUND_ROBIN</code> for the load
                    balancing algorithm desired. The <code>lb</code>
                    service is related to (has <code>relations</code>
                    to) two other services: the <code>web</code>
                    service on the <code>http</code> interface and the
                        <code>master</code> service on the
                        <code>http</code> interface. These two
                    services are defined next in the blueprint.
                    Finally the blueprint defines the
                        <code>display-name</code> to be used by the
                    GUI as <code>Load Balancer</code>.</para>
                <para>
                    <remark>Reviewer: where is the display-name
                        actually displayed in the GUI?</remark>
                </para>
                <para>
                    <remark>Mike: need to add in display-name in the
                        following descriptions for each
                        component.</remark>
                </para>
                <para>The blueprint defines the service named
                        <code>master</code> that uses a
                        <code>component</code> of type
                        <code>application</code> named
                        <code>wordpress</code>, which has the
                        <code>role</code>
                    <code>master</code>. It has
                        <code>constraints</code> for
                        <code>version</code> 3.4.1 of
                    WordPress.</para>
                <para>The <code>role</code> allows you to
                    differentiate between two different components
                    that have the same name (in this case WordPress),
                    but which are used to perform different functions
                    (roles). The master has <code>relations</code> to
                    the <code>backend</code> service, which has a
                        <code>mysql</code> interface, so
                        <code>backend</code> will serve as the
                    WordPress database server. Note that the
                        <code>backend</code> service is defined as the
                    next service in this blueprint. The
                        <code>master</code> service has
                        <code>constraints</code> of <code>count:
                        1</code>, so it is limited to 1
                        <code>master</code> service.</para>
                <para>The next service defined is named
                        <code>web</code>. It also specifies a
                        <code>component</code> of type
                        <code>application</code> called
                        <code>wordpress</code>, however it is
                    distinguished from the <code>master</code> since
                    it has a different <code>role</code>, namely
                        <code>web</code>. In other words, it will
                    serve as the WordPress web server in this
                    deployment. It also has <code>constraints</code>
                    for <code>version</code> 3.4.1 of WordPress. The
                    constraints for the number of web servers
                        (<code>count</code>) will be defined later in
                    the <code>options</code> section for the
                        <code>web</code> service.</para>
                <para>The <code>web</code> service has a relation to
                    the <code>backend</code> service on the
                        <code>mysql</code> interface and a relation to
                    the <code>master</code> service on the
                        <code>ssh</code> interface. This means that
                    each web service connects to the
                        <code>master</code> service via
                        <code>ssh</code> to update the server content
                    from the <code>master</code>.</para>
                <para>The <code>web</code> service requires a
                    web-based component (<code>role: web</code>) that
                    is an application named <code>wordpress</code>. It
                    has <code>constraints</code> for
                        <code>version</code> 3.4.1 of
                    WordPress.</para>
                <para>The <code>web</code> service has a relationship
                    to <code>mysql</code> on the <code>backend</code>
                    and also has a relation to the <code>master</code>
                    service on the <code>ssh</code> interface. The
                        <code>chef-solo</code> provider (specified in
                    the <code>environment</code> section of the
                    blueprint) provides an <code>application</code>
                    with an <code>http</code> interface, and the chef
                    map specifies that the wordpress application
                    provides ssh to connect to the lsyncd service on
                        <code>master</code>.</para>
                <para>The next service is named <code>backend</code>.
                    It specifies a <code>component</code> of type
                        <code>database</code> and has a
                        <code>mysql</code>
                    <code>interface</code>. It represents the database
                    server for the deployment.</para>
                <para>
                    <remark>Mike: need to add in new display-outputs
                        info here.</remark>
                </para>
            </section>
            <section xml:id="Wordpress_Options">
                <title>Wordpress Blueprint &ndash; Options
                    Section</title>
                <para>The <code>options</code> section defines the
                    options that are required to fully specify the
                    deployment:</para>
                
                <example>
                    <title>options section: wordpress</title>
                    <programlisting language="xml"><xi:include href="../../../src/main/resources/samples/wordpress_options_section" parse="text"><xi:fallback>Missing code sample!<?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <para>Some of the options defined are applied to the
                    GUI, and may be used as labels. For
                        <code>region</code> options, the
                        <code>label</code> specified for the GUI is
                        <code>Region</code>, it is a
                        <code>required</code> option, and the
                        <code>default</code> is <code>ORD</code>. The
                    section <code>display-hints</code> is optional and
                    provides hints to the GUI or command line
                    interface about how to display items. In this
                    case, a <code>group</code> of options called
                        <code>deployment</code> is defined to display
                    the deployment options with the GUI, including a
                    list with the supported regions (<code>list-type:
                        region</code>) for the deployment. The choices
                    are <code>LON</code>, <code>DFW</code>, or
                        <code>ORD</code>. The <code>region</code>
                    constrains the <code>region</code>
                    <code>setting</code> for the
                        <code>load-balancer</code>
                    <code>provider</code>.</para>
                <para>The <code>options</code> section allows you to
                    define some special options, such as
                        <code>url</code>. If you define
                        <code>url</code> of <code>type</code>
                    <code>url</code>, then the engine will parse the
                    input from this option into its components. For
                    example, it will take the <code>protocol</code>
                    attribute and apply it to the
                        <code>protocol</code> setting of the load
                    balancer. So if you specify <code>https</code>,
                    then the load balancer will get set to the https
                    protocol. </para>
                <para>The first label for the <code>url</code> options
                    has the value <code>Site Address</code>. The
                    sample value provided is
                        <code>http://example.com/</code>, which would
                    be displayed in the GUI, and is of type
                        <code>url</code>. Since <code>required</code>
                    has the value <code>true</code>, this option is
                    required. It specifies using the encrypted
                    protocol <code>https</code>. These options do not
                    apply if the blueprint is not used with the
                    GUI.</para>
                <para>The section <code>display-hints</code> for the
                        <code>url</code> defines a <code>group</code>
                    of options called <code>application</code> to
                    display the deployment options for the application
                    together in the GUI, with the <code>url</code> for
                    the site address being the first option in the
                    group (<code>order: 1</code>). The encrypted
                    protocol is specified as <code>http</code> and the
                    sample url value is
                        <code>http://example.com/</code>.</para>
                <para>The <code>url</code> has
                        <code>constraints</code> for the
                        <code>http</code> and <code>https</code>
                    protocols. The <code>regex</code> in this case
                    checks for a valid web address. The
                        <code>message</code> displays the following
                    text in case there are any problems accessing the
                    URL in order to give the user some troubleshooting
                    help: <code>must be a valid web
                    address</code>.</para>
                <para>The <code>constrains</code> section provides a
                    way of parsing options from the URL provided and
                    applying them to services. When the URL is parsed,
                    each setting will be parsed from the URL and then
                    set as an attribute. Take the following
                        <code>setting</code> for example:</para>
                <para>
                    <programlisting>      - setting: protocol
        attribute: protocol
        service: lb
        resource_type: load-balancer</programlisting>
                </para>
                <para>This says to take the <code>protocol</code>
                    attribute and make it the <code>protocol</code>
                    used for the <code>lb</code> (load balancer)
                    service. So if the URL contains <code>http</code>,
                    then the load balancer will use the
                        <code>http</code> protocol.</para>
                <para>Similarly, the <code>setting:
                        allow_insecure</code> says since the value is
                    set to <code>true</code>, to allow the insecure
                    http protocol if <code>https</code> is
                    specified.</para>
                <para>The <code>setting: database_name</code> for the
                        <code>backend</code> service says to take the
                        <code>hostname</code> attribute and make it
                    the <code>database</code> name for the
                        <code>backend</code>.</para>
                <para>The first <code>setting: domain</code> says to
                    take the <code>hostname</code> attribute and make
                    it the <code>domain</code> name of the
                        <code>master</code> service.</para>
                <para>The second <code>setting: domain</code> says to
                    take the <code>hostname</code> attribute and make
                    it the <code>domain</code> name of the
                        <code>web</code> service.</para>
                <para>The third <code>setting: domain</code> says to
                    take the <code>hostname</code> attribute and make
                    it the <code>domain</code> name of the
                        <code>backend</code> service.</para>
                <para>Next are a group of settings that set the
                    intermediate ssl key for the <code>web</code>
                    service and the <code>master</code> service. These
                    are followed by settings of the private ssl key
                    for the <code>web</code> service and the
                        <code>master</code> service. Next are the
                    settings of the <code>ssl_certificate</code> for
                    the <code>web</code> service and the
                        <code>master</code> service.</para>
                <para>Options for the <code>username</code> are
                    defined next. The <code>username</code> option is
                    required and displays the label <code>Admin
                        Username</code>. The description states: The
                    user name to use for WordPress and the deployment
                    servers and database. The default value is
                        <code>wp_user</code>. The
                        <code>display-hints</code> specify that the
                    username option belongs to the
                        <code>application</code>
                    <code>group</code> in the GUI, and should be
                    displayed as the second option (<code>order:
                        2</code>) within this <code>group</code>. This
                    option constrains the setting for the user name
                    for WordPress.</para>
                <para>Next is the <code>password</code> option. It has
                    the label <code>Admin Password</code> with a
                    default set to the special value
                        <code>=generate_password()</code>, which will
                    generate a random password on the server when the
                    associated generate button is clicked. It also
                    defines several constraints for the password, each
                    of which is checked by a separate
                        <code>regex</code>. If any of the regular
                    expressions fails to match, the corresponding
                        <code>message</code> is displayed to the user
                    in the GUI. This constrains the setting for the
                    password for wordpress.</para>
                <para security="writeronly">Several of the password
                    regular expressions (<code>regex</code>) are
                    currently removed from the bp, but they need to be
                    added back in once the
                        <code>=generate_password()</code> function can
                    handle them.</para>
                <para>The <code>prefix</code> option specifies the
                    prefix to be used for the application ID and the
                    names of the database tables in WordPress. By
                    default it specifies to use <code>wp_</code> as
                    the prefix, however some users may want to specify
                    a different value in order to identify this
                    particular WordPress application from others that
                    might be added to the deployment later. Therefore
                    the <code>Prefix</code> label is required. Note
                    the <code>help</code> setting to be displayed by
                    the GUI, which defines how the prefix settings
                    will be used: This is used to identify the user
                    name and database name, and also identifies this
                    WordPress install from other ones that might be
                    added later to the same deployment. The
                        <code>display-hints</code> specify that the
                    prefix option appears as the fourth item
                        (<code>order: 4</code>) in the
                        <code>application group</code>. The option
                    constrains the <code>master</code> service as well
                    as the <code>web</code> service. </para>
                <para>Options for the <code>web_server_count</code>
                    are next. The <code>web_server_count</code> option
                    is required, displays the label <code>Additional
                        Web Servers</code>, and is of <code>type:
                        integer</code>. The default value is 1
                    (server). The description states: The number of
                    WordPress servers in addition to the master server
                    (up to 8). The <code>display-hints</code> specify
                    that the <code>web_server_count</code> option
                    belongs to the <code>server</code>
                    <code>group</code> in the GUI, and should be
                    displayed as the first option (<code>order:
                        1</code>) within this <code>group</code>. It
                    has constraints so that the value is greater than
                    0 and less than or equal to 8. It
                        <code>constrains</code> the <code>count</code>
                    setting for the web service for the
                    application.</para>
                <para>The <code>os</code> option follows. What is new
                    in this option is that a method is provided to
                    choose the os, using the <code>-in</code> feature
                    (described shortly). In this section,
                        <code>display-hints</code> specify that the
                        <code>os</code> option appears second (order:
                    2) in the <code>server</code> group. The option
                    displays a list of type <code>compute.os</code>.
                    The <code>-in</code> feature specifies an array of
                    items that should be displayed in the list. In
                    this case, the array contains just one os,
                        <code>Ubuntu 12.04</code>. The GUI will
                    display the label <code>Wordpress Server Operating
                        System</code> with a choice of only
                        <code>Ubuntu 12.04</code> available. The
                        <code>os</code> constrains the settings for
                    the <code>os</code> for the <code>compute</code>
                    resource for the <code>web</code> service,
                        <code>master</code> service, and
                        <code>backend</code> service.</para>
                <para>Next are the options for
                        <code>server_size</code> and
                        <code>database_size</code>. These present the
                    available choices for sizing the server and
                    database disk sizes, respectively. </para>
                <para>The <code>server_size</code> specifies <code>the
                        size of the Wordpress server instances in MB
                        of RAM</code>, with a default of
                        <code>512</code>. The GUI will display the
                    label <code>Server Size</code> with choices
                    available of 512 Mb, 1, 2, 4, 8, 16, or 30 Gb.
                        <code>display-hints</code> are provided to
                    place this option as the third item in the
                        <code>server group</code>. The
                        <code>server_size</code> constrains the
                    settings for <code>memory</code> for the
                        <code>compute</code> resource for the
                        <code>web</code> service and
                        <code>master</code> service.</para>
                <para>Similarly the <code>database_size</code>
                    specifies the choices for sizing the database for
                    the backend service.</para>
                <para>The <code>register-dns</code> option specifies
                    the <code>default</code> is <code>false</code>, so
                    don't register DNS by default. A label of
                        <code>Create DNS A  records</code> is supplied
                    for the GUI. In this case, the
                        <code>constrains</code> section specifies that
                    the DNS access is provided through the
                        <code>lb</code> service. </para>
            </section>
            <section xml:id="Wordpress_Resources">
                <title>Wordpress Blueprint &ndash; Resources
                    Section</title>
                <para>The <code>resources</code> section is shown
                    below:</para>
                <example>
                    <title>resources section: wordpress</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="../../../src/main/resources/samples/wordpress_resources" parse="text"><xi:fallback>Missing code sample!<?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <para>In the example above there is a resource named
                        <code>sync-keys</code> that specifies a type
                        <code>key-pair</code> used for generating the
                    public and private keys for ssh for the
                        <code>master</code> service and
                        <code>web</code> service. The name used for
                    the resource is arbitrary
                    (<code>sync-keys)</code>, however the type
                        <code>key-pair</code> is a special resource
                        <code>type</code> that automatically generates
                    the key pair, and stores the
                        <code>private_sync_key</code> in the attribute
                        <code>private_key</code>. Similarly, it stores
                    the <code>public_sync_key</code> in the attribute
                        <code>public_key</code>. It does this for both
                    the <code>master</code> and <code>web</code>
                    services.</para>
                <para>Then there is a resource named <code>"wp
                        user"</code> of type <code>user</code> that is
                    used for setting the <code>username</code> and
                        <code>password</code> for the
                        <code>master</code> service and
                        <code>web</code> service as well as the
                    password for the <code>backend</code> service. </para>
                <para>The resource section uses the standard
                        <code>constrains</code> syntax, as described
                    in <xref linkend="Blueprint_Syntax_options-d1e565"
                    />.</para>
            </section>
            <section xml:id="Wordpress_Metadata">
                <title>Wordpress Blueprint &ndash; Meta-data
                    Section</title>
                <para>The <code>meta-data</code> section is shown
                    below:</para>
                <example>
                    <title>meta-data section: wordpress</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="../../../src/main/resources/samples/wordpress_metadata" parse="text"><xi:fallback>Missing code sample!<?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <para>The setting for <code>meta-data</code> sets the
                    &Checkmate; <code>schema-version</code> to
                        <code>v0.7</code>. It also sets identifying
                    information for the blueprint including
                        <code>blueprint-type</code>
                        (<code>Application</code>),
                        <code>application-name</code>
                        (<code>Wordpress</code>), and
                        <code>application-version</code>
                        (<code>3.4.1</code>).</para>
                <para>The <code>flavor</code> is used by the Reach GUI
                    as a short summary of what each blueprint
                    provides.  Viewing the flavor list helps the user
                    choose among the various blueprint flavors
                    available for the application. In the example
                    above, the <code>flavor</code> is <code>Multiple
                        Linux servers with WordPress and one Linux
                        server with MySQL</code>, which is different
                    from another WordPress blueprint
                        <code>flavor</code>, for example:
                        <code>Multiple Linux servers with WordPress
                        and a Cloud Database MySQL
                    instance</code>.</para>
                <para>The <code>flavor-weight</code> is used by the
                    GUI to determine the ordering of options in the
                    flavor list. The value 1 indicates that the flavor
                    information will be displayed first among the
                    flavors in the list for the application. Note that
                    other blueprints can provide their own flavors for
                    the Wordpress application and flavor-weights to
                    specify where their flavor information appears in
                    the flavor list displayed by the GUI.</para>
                <para>The <code>reach-info</code> setting first
                    specifies <code>option-groups</code>. The group
                    items specify the names of the groups that are
                    created in the Control Panel to display each set
                    of options for the blueprint. Note that each group
                    name will be uppercased by Reach, so the
                        <code>application</code> group is displayed as
                    "Application". The various groups are:<itemizedlist>
                        <listitem>
                            <para><code>application</code> &ndash;
                                displays application options such as
                                   <code>Wordpress</code></para>
                        </listitem>
                        <listitem>
                            <para><code>server</code> – displays
                                server options such as <code>Wordpress
                                   Server Size</code></para>
                        </listitem>
                        <listitem>
                            <para><code>load balancer</code> –
                                displays load balancer options</para>
                        </listitem>
                        <listitem>
                            <para><code>database</code> – displays
                                database options such as
                                   <code>Database Server
                                Size</code></para>
                        </listitem>
                        <listitem>
                            <para><code>dns: DNS Options</code> –
                                displays DNS options such as
                                   <code>Create DNS A records</code>. </para>
                            <note>
                                <para>This example shows the syntax
                                   for providing an alternate name for
                                   the group. Follow the group name
                                   (in this case <code>dns</code>)
                                   with a colon (<code>:</code>), and
                                   then the alternate name that
                                   follows the colon is displayed for
                                   the group instead (in this case,
                                   <code>DNS Options</code>). </para>
                            </note>
                        </listitem>
                    </itemizedlist></para>
                <para>The next <code>reach-info</code> setting
                    specifies <code>tattoo</code>, which provides the
                    URLs that are used by the GUI to display an icon
                    for branding purposes (a company logo, for example
                    a Wordpress icon) and a watermark (known as a
                    tattoo) to identify different settings within the
                    deployment (such as what blueprint to deploy,
                    which environment to use for the deployment, and
                    which options to set). Both the tattoo and the
                    icon are used in the "New Deployment" section of
                    Reach. Requirements for each are:</para>
                <itemizedlist>
                    <listitem>
                        <para>icon: must be exactly 20x20 pixels with
                            a transparent background. </para>
                    </listitem>
                    <listitem>
                        <para>tattoo: must be 120-140 pixels in the
                            largest dimension and have 30%
                            opacity.</para>
                    </listitem>
                </itemizedlist>
                <para>The icon must be a 20x20 png file. The URL for
                    the icon and tattoo should start with "https" and
                    they should be on CDN to display quickly.</para>
            </section>
            <section xml:id="Wordpress_Documentation">
                <title>Wordpress Blueprint &ndash; Documentation
                    Section</title>
                <para>The <code>documentation</code> section is shown
                    below:</para>
                <example>
                    <title>documentation section: wordpress</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="../../../src/main/resources/samples/wordpress_documentation" parse="text"><xi:fallback>Missing code sample!<?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <para>The <code>documentation</code> section is
                    required if the blueprint is used by the Reach GUI
                    for deployments, and it is otherwise ignored. It
                    is written in md (markdown) format. It provides a
                    map that contains all of the blueprint
                    documentation needed by Reach.</para>
                <para>The <code>abstract</code> provides a one or two
                    paragraph description of the blueprint. It is in
                    markdown format and may include references to
                    images and other URLs. The <code>abstract</code>
                    is used to provide the text that will be displayed
                    as a tooltip when the user hovers with the mouse
                    over the <emphasis role="bold">?</emphasis> icon
                    next to the drop-down with the flavor information
                    for the blueprint in the Reach GUI. </para>
                <para>The pipe symbol (<code>|</code>) that follows a
                    colon at the beginning of each section (for
                    example: <code>abstract: |</code>) indicates to
                    yaml to pull in the block of text that follows and
                    determine where to place the carriage returns to
                    display it properly.</para>
                <para>The <code>guide</code> is the URL to a
                    knowledge-center article or other www resource
                    that can be used to link the user to a full guide
                    with details for the blueprint. The content could
                    come from a file named <code>guide.md</code> in
                    the <code>docs</code> directory repository for the
                    blueprint if the correct include syntax is used
                    (not shown in this blueprint).</para>
                <para>The <code>instructions</code> contain
                    instructions in markdown format for how to use a
                    deployment launched by this blueprint and are
                    displayed at the bottom of the Reach building
                    screen. The contents of the file instructions.md
                    is loaded here if it exists in the repository and
                    if the correct include syntax is used (not shown
                    in this blueprint). The <code>instructions</code>
                    section typically contains 3 subsections:<itemizedlist>
                        <listitem>
                            <para>Getting Started &ndash; contains
                                information for getting started using
                                the deployed application</para>
                        </listitem>
                        <listitem>
                            <para>Management Info &ndash; contains
                                information for managing the deployed
                                application</para>
                        </listitem>
                        <listitem>
                            <para>Additional Notes &ndash; contains
                                additional information concerning the
                                deployed application</para>
                        </listitem>
                    </itemizedlist><remark>Reviewer: need to make sure
                        that these new sections shown in the bulleted
                        list above are used in the Wordpress bp shown
                        in this guide. This is not currently the case
                        and the sections have some different names
                        than the standard, such as Plugins and Adding
                        Additional Nodes.</remark></para>
                <remark>Reviewer: please give me info on the new
                    display-outputs section when it is integrated. Not
                    ready to discuss yet since this feature has not
                    yet been integrated into the code.</remark>
            </section>
            <section xml:id="Wordpress_Environment">
                <title>Wordpress Blueprint &ndash; Environment
                    Section</title>
                <para>Review the <code>environment</code>
                    section:</para>
                <example>
                    <title>environment section: wordpress</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="../../../src/main/resources/samples/wordpress_environment" parse="text"><xi:fallback>Missing code sample!<?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <para>Environments provide a context and optional
                    constraints as well as a list of providers for
                    services. For example, if you have an environment
                    with a Cloud Databases provider constrained to LON
                    where Cloud Databases don't have 4GB instances,
                    then the catalog won't have 4GB instances.</para>
                <para>In this example, the name of the environment is
                    "Next-Gen Open Cloud, which indicates the context
                    and that the Cloud Servers will be next-gen
                    servers. The providers are plug-ins for
                    &Checkmate; that understand how to operate a
                    service or system. They are:</para>
                <itemizedlist>
                    <listitem>
                        <para><code>chef-solo</code> &mdash; provider
                            that knows how to operate Chef and apply
                            cookbooks.</para>
                        <itemizedlist>
                            <listitem>
                                <para><code>provides</code> &mdash;
                                   defines the resource and protocol
                                   (for example: http versus https)
                                   for a provider.</para>
                                <remark>Reviewer: will take out
                                   provides here because it's now in
                                   chef cookbook. Ryan to provide new
                                   bp with this removed.</remark>
                            </listitem>
                            <listitem>
                                <para><code>vendor</code> &mdash;
                                   specifies that the vendor for
                                   chef-solo is opscode. The opscode
                                   Chef Provider knows how to operate
                                   Chef and apply cookbooks.</para>
                                <remark>Reviewer - exactly where does
                                   opscode come from, the
                                   catalog?</remark>
                            </listitem>
                            <listitem>
                                <para><code>constraints</code> &mdash;
                                   apply logic to a particular service
                                   to define a limitation for a
                                   provider. For example, the source
                                   for the blueprint is located at the
                                   specified URL. In this example,
                                   constrains the source for
                                   <code>chef-solo</code> to use the
                                   specified source URL. The URL
                                   contains the chef map and chef file
                                   for the blueprint. </para>
                            </listitem>
                        </itemizedlist>
                    </listitem>
                    <listitem>
                        <para><code>load-balancer</code>&mdash; this
                            provider knows how to create and configure
                            load balancers. </para>
                        <para>The special notation <code>{}</code>
                            means the empty set (NULL) in YAML / json
                            and indicates that there are no vendors or
                            constraints defined for
                                <code>load-balancer</code> or
                                <code>nova</code>, so just use
                            everything from the provider for these.
                            Note that you cannot leave this field
                            empty, since the YAML parser will create
                            an error if the field is empty.</para>
                    </listitem>
                    <listitem>
                        <para><code>nova</code> &mdash; provider that
                            knows how to create and configure
                            servers.</para>
                    </listitem>
                    <listitem>
                        <para><code>common</code> &mdash; means apply
                            to all the providers, in this case, use
                            the rackspace vendor for all providers.
                        </para>
                    </listitem>
                </itemizedlist>
            </section>
            <section xml:id="Wordpress_Inputs">
                <title>Wordpress Blueprint &ndash; Inputs
                    Section</title>
                <para>Review the <code>inputs</code> section:</para>
                <example>
                    <title>inputs section: wordpress</title>
                    <?dbfo keep-together="always"?>
                    <programlisting language="xml"><xi:include href="../../../src/main/resources/samples/wordpress_inputs" parse="text"><xi:fallback>Missing code sample!<?rax fail?></xi:fallback></xi:include></programlisting>
                </example>
                <para>Inputs define options via hard-coded values that
                    let you launch a blueprint from a single cURL
                    command. Inputs are optional. Architects typically
                    do not use inputs. They would generally prefer to
                    let users provide their input via options.
                    However, if you want to deploy your blueprint via
                    cURL rather than &Checkmate; services, using
                    inputs can be handy.</para>
                <para>In this example, the inputs are hard-coded to
                    allow the blueprint to be deployed using a single
                    cURL command. The default values specified are as
                    follows: <itemizedlist>
                        <listitem>
                            <para>The <code>url</code> is
                                   <code>http://wordpress.cldsrvr.com/</code>.</para>
                        </listitem>
                        <listitem>
                            <para>The region is <code>DFW</code>. </para>
                        </listitem>
                        <listitem>
                            <para>The <code>username</code> is
                                   <code>wp_user</code>.</para>
                        </listitem>
                        <listitem>
                            <para>The <code>web_server_count</code> is
                                   <code>1</code>.</para>
                        </listitem>
                        <listitem>
                            <para>The <code>server_size</code> is
                                   <code>1024</code>.</para>
                        </listitem>
                        <listitem>
                            <para>The <code>prefix</code> for
                                WordPress tables is
                                <code>wp_</code>.</para>
                        </listitem>
                        <listitem>
                            <para>The <code>password</code> for
                                   <code>wp_user</code> is
                                   <code>Ul345678</code>.</para>
                        </listitem>
                    </itemizedlist></para>
            </section>
        </section>
    </chapter>
    <chapter xml:id="Rules_Org_Pract-d1e565" security="writeronly">
        <title>Rules, Organization, and Best Practices for Authoring
            Blueprints</title>
        <para>This chapter describes rules, organization, and best
            practices for authoring blueprints.</para>
        <section xml:id="Blueprint_Rules-d1e565">
            <title>Rules</title>
            <para> What are the rules?</para>
            <orderedlist>
                <listitem>
                    <para>For name / value pairs used for
                            <code>choices</code>, <code>value</code>
                        is what is passed to Checkmate and
                            <code>name</code> is what is displayed to
                        the user. Note that there is no validation
                        applied. If you want validation, use an
                            <code>in</code> constraint to specify an
                        array of possible values.</para>
                </listitem>
            </orderedlist>
        </section>
        <?hard-pagebreak?>
        <section xml:id="Blueprint_Organization-d1e565">
            <title>Organization</title>
            <para>The suggested organization for a blueprint is to
                place the sections in the following order, with the
                    <code>blueprint</code> section divided into four
                sub-sections, as shown:</para>
            <itemizedlist>
                <listitem>
                    <para>blueprint</para>
                    <itemizedlist>
                        <listitem>
                            <para>services</para>
                        </listitem>
                        <listitem>
                            <para>options</para>
                        </listitem>
                        <listitem>
                            <para>resources [Optional]</para>
                        </listitem>
                        <listitem>
                            <para>meta-data [Optional]</para>
                        </listitem>
                    </itemizedlist>
                </listitem>
                <listitem>
                    <para>environment</para>
                </listitem>
                <listitem>
                    <para>inputs</para>
                </listitem>
            </itemizedlist>
            
        </section>
        <section xml:id="Blueprint_Best_Practices-d1e565">
            <title>Best Practices</title>
            <para>What are the best practices?</para>
            <para>YAML will assume numbers are integers (ints), so
                enclose strings in quotation marks (for example
                    <code>"my_string"</code>) as a best
                practice.</para>
            <para>A good practice is to have multiple, simple
                    <code>regex</code> constraints (versus one
                complicated <code>regex</code> constraint) to allow
                browser clients to provide clear and useful feedback
                to the user for each rule that he / she may break. For
                example, list numeric, lowercase, and uppercase
                requirements for a password as three separate
                constraints <emphasis>with a <code>message</code>
                    unique to each</emphasis>, as shown in the
                following <code>regex</code> examples:</para>
            <programlisting>database_password:
      label:  Database Password
      display-hints:
        order: 2
        group: database
     description: "This is the password to use to access the database that will host your application's data"
     type: password
     constraints:
     - regex: ^(?=.*).{8,15}$
       message: must be between 8 and 15 characters long
     - regex: ^(?=.*\d)
       message: must contain a digit
     - regex: ^(?=.*[a-z])
       message: must contain a lower case letter
     - regex: ^(?=.*[A-Z])
       message: must contain an upper case letter</programlisting>
        </section>
        <section xml:id="Submitting_Templates-d1e565">
            <title>Submitting Templates</title>
            <para>Developers can submit their own blueprints to the
                &Checkmate; governing body to find out if they meet
                the best practices and requirements for inclusion in
                the Rackspace blueprint repository at <link
                    xlink:href="https://github.rackspace.com/Blueprints"
                    >https://github.rackspace.com/Blueprints</link>.
                Once they are accepted, they will be maintained and
                available for all to use.</para>
            <remark>Reviewer: need to spell out who this governing
                body consists of.</remark>
            <para>Developers can also submit blueprints for use with
                Reach.</para>
            <remark>Reviewer: please provide steps for the submission
                processes for both the Rackspace blueprint repository
                and for Reach blueprints.</remark>
        </section>
    </chapter>
    <chapter xml:id="chef_cookbooks-dle563" security="writeronly">
        <title>Creating the Chef Map</title>
        <para>This chapter is not yet available.</para>
        <remark>Reviewer: please provide your source material and
            inputs for this chapter. B. K. to provide info about how
            the chef map file is used with blueprints. Need to
            document chef provider. Notes from the review: chefmap is
            taking values and putting into chef understood format.
            Getting bp ready to go, how to move values. Writing a bp
            that uses chef. Chef map. need to have a chef file. </remark>
        <remark>Writing a bp with chef should include the following
            topics: 1. BP 2. loading cookbooks 2.1 berkshelf 2.2
            librarian 3. chef map 3.1 component
            3.2options->attributes/dbags 3.3 outputs. Use awwbomb
            chefmap. </remark>
    </chapter>
    <chapter xml:id="Detailed_Blueprint_Syntax-d1e565" security="writeronly">
        <title>Detailed Blueprint Syntax</title>
        <para>This chapter describes the details for blueprint
            syntax.</para>
        <para>A blueprint describes an application, which is a
            collection of components that provide a useful capability
            for deployment. An application is distinct from
            infrastructure.</para>
        <para>A deployment is a combination of blueprint, environment,
            and a set of parameters (inputs).</para>
        <para>Each blueprint consists of the following sections:<itemizedlist>
                <listitem>
                    <para>blueprint</para>
                    <itemizedlist>
                        <listitem>
                            <para>services</para>
                        </listitem>
                        <listitem>
                            <para>options</para>
                        </listitem>
                        <listitem>
                            <para>resources [Optional]</para>
                        </listitem>
                        <listitem>
                            <para>meta-data [Optional]</para>
                        </listitem>
                    </itemizedlist>
                </listitem>
                <listitem>
                    <para>environment</para>
                </listitem>
                <listitem>
                    <para>inputs</para>
                </listitem>
            </itemizedlist></para>
        <para>A file named <emphasis>application</emphasis>.yaml,
            where <emphasis>application</emphasis> is the name of the
            application you are deploying, is used to conveniently
            store all the information for the deployment in one file
            for ease of deployment. YAML is preferred, since it is
            generally easier for humans to read and write than
            JSON.</para>
        <para>The blueprint begins by specifying the following
            information for the blueprint: <itemizedlist>
                <listitem>
                    <para><code>id</code> &ndash; unique identifier
                        for the blueprint provided by the client or
                        user.</para>
                </listitem>
                <listitem>
                    <para>
                        <code>name</code> &ndash; name for the
                        blueprint.</para>
                </listitem>
                <listitem>
                    <para>
                        <code>description</code> &ndash; description
                        for the blueprint.</para>
                </listitem>
                <listitem>
                    <para>
                        <code>version</code> &ndash; [Optional]
                        version for the blueprint (as a
                        string).</para>
                </listitem>
            </itemizedlist>
        </para>
        <para>An example from a WordPress blueprint is shown
            below:</para>
        <programlisting>blueprint:
id: 0255a076c7cf4fd38c69b6727f0b37ea
name: Managed Cloud WordPress w/ MySQL on VMs
description:
  Create a multi-server WordPress deployment on any cloud account using the
  Chef cookbooks created by the Managed Cloud team.
  This deployment includes a default environment and blueprint. It has been
  designed with Managed Cloud defaults incorporated in it.</programlisting>
        <para>The <code>blueprint</code> section is subdivided into
            four sub-sections:<itemizedlist>
                <listitem>
                    <para>services</para>
                </listitem>
                <listitem>
                    <para>options</para>
                </listitem>
                <listitem>
                    <para>resources [Optional]</para>
                </listitem>
                <listitem>
                    <para>meta-data [Optional]</para>
                </listitem>
            </itemizedlist></para>
        <section xml:id="Blueprint_Syntax_sections-d1e565">
            <title>Blueprint &ndash; Services Section</title>
            <para>The <code>services</code> section of the blueprint
                defines the components, their relationships to each
                other, and the various constraints on the components
                and relationships that must be met in order for the
                application to work as specified.</para>
            <para>For the <code>services</code> defined in a
                blueprint, there are: </para>
            <itemizedlist>
                <listitem>
                    <para>one or more services (all underneath one
                            <code>services</code> entry)</para>
                </listitem>
                <listitem>
                    <para>an arbitrary name determined by the
                        blueprint author that is used for the service
                        ID (each one has its own ID)</para>
                    <para>There are four services shown in the example
                        below: <code>lb</code>, <code>master</code>,
                            <code>web</code>, and
                        <code>backend</code>.</para>
                </listitem>
                <listitem>
                    <para>current limit of one component per
                        service</para>
                    <para>In the future pulling in blueprints as
                        components should be supported. </para>
                </listitem>
                <listitem>
                    <para>relations between services</para>
                </listitem>
            </itemizedlist>
            <para>An example <code>services</code> section from a
                WordPress blueprint is shown below:</para>
            <programlisting language="xml"><xi:include href="../../../src/main/resources/samples/wordpress_services_section" parse="text"><xi:fallback>Missing code sample!<?rax fail?></xi:fallback></xi:include></programlisting>
            <para>Fields for a <emphasis>service</emphasis> in the
                blueprint are:</para><variablelist>
                    <varlistentry>
                        <term>id</term>
                        <listitem>
                            <para>a unique identifier (not necessarily
                                a UUID, but a string) within the
                                provider that provides that
                                component.</para>
                            <para>Example: <code>lb</code> for load
                                balancer.</para>
                            <para>Rackspace will maintain a list of
                                those ids (and may decide to create a
                                catalog of them). Precedents for this
                                are OpsCode cookbooks and Juju charms
                                   (<link
                                   xlink:href="http://jujucharms.com/charms/precise"
                                   >http://jujucharms.com/charms/precise</link>).
                            </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>component</term>
                        <listitem>
                            <para>A <code>component</code> can be
                            defined using either a short or a long
                            syntax. The <emphasis>short</emphasis>
                            syntax requires that <code>interface:
                            </code> and <code>type:</code> be
                            specified, for example the following
                            specifies a mysql database component:
                            <programlisting>backend:
  component:
    interface: mysql
    type: database</programlisting>The
                                <emphasis>long</emphasis> syntax
                            requires a <code>name</code> (ID) and one
                            or more key/value pairs (and optionally
                                <code>constraints</code>) to identify
                            a suitable component. An example of the
                            long syntax follows, which specifies a
                            wordpress version 3.4.1 web
                            application:</para>
                        <programlisting>component:
  type: application
  name: wordpress
  role: web
  constraints:
  - version: 3.4.1</programlisting>
                        <para>Components should come from providers.
                            Component IDs are universal. A catalog is
                            used to store the information for the
                            components. </para>
                            <para>There is currently a limit of one
                            component defined per service.</para>
                        <para>Fields for a
                                <emphasis>component</emphasis> in the
                            blueprint are:</para>
                        <variablelist>
                            <varlistentry>
                                <term>name</term>
                                <listitem>
                                   <para>Name of the component to
                                   search for.</para>
                                   <para>Example:
                                   <code>wordpress</code> for a
                                   WordPress application.</para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                                <term>type</term>
                                <listitem>
                                   <para>Describes the type of
                                   resource based on a list of
                                   primitives (compute, database,
                                   load-balancer, application, and so
                                   forth).</para>
                                   <para>Example:
                                   <code>application</code> for a
                                   WordPress application.</para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                                <term>role</term>
                                <listitem>
                                   <para>Specifies the role of the
                                   component. </para>
                                   <para>Example: component:
                                   <code>name: wordpress role:
                                   master</code></para>
                                   <para>In the example shown above,
                                   the blueprint actually contains
                                   multiple wordpress applications,
                                   and designating one as the
                                   <code>master</code> as shown by the
                                   example allows the wordpress
                                   applications to be distinguished
                                   from each other.</para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                                <term>interface</term>
                                <listitem>
                                   <para>Describes the interface
                                   (access) for a component. </para>
                                   <para>Example: <code>interface:
                                   http</code> defines a load-balancer
                                   with an http (non-secure, as
                                   opposed to https) interface.</para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                                <term>constraints</term>
                                <listitem>
                                   <para>Describes constraints for a
                                   component or service. </para>
                                   <para>Example: <code>constraints: -
                                   version: 3.4.1</code> defines a
                                   constraint for a particular version
                                   of a wordpress application.</para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                        </listitem>
                    </varlistentry>
                <varlistentry>
                    <term>relations</term>
                    <listitem>
                        <para>A relation is a connection to another
                            service.</para>
                        <para>In the following example, the wordpress
                            application has relations to the backend
                            mysql service (for database
                            access):</para>
                        <programlisting>      relations:
        backend: mysql</programlisting>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>constraints</term>
                    <listitem>
                        <para>Describes constraints for a component or
                            service. </para>
                        <para>Example: <code>constraints: - count:
                                1</code> defines a constraint for the
                            master service that only one instance of
                            the service is allowed for this
                            blueprint.</para>
                    </listitem>
                </varlistentry>
                    </variablelist>
        </section>
        <section xml:id="Blueprint_Syntax_options-d1e565">
            <title>Blueprint &ndash; Options Section</title>
            <para>The <code>options</code> section of the blueprint
                defines the settings that must be configured in order
                for the application to work as specified.</para>
            <para>An example <code>options</code> section from a
                WordPress blueprint is shown below:</para>
            <programlisting language="xml"><xi:include href="../../../src/main/resources/samples/wordpress_options_section" parse="text"><xi:fallback>Missing code sample!<?rax fail?></xi:fallback></xi:include></programlisting>
            <para>The example shown above categorizes the options into
                several sections including <code>region</code>,
                    <code>url</code>, <code>username</code>, and so
                forth.</para>
            <para>The fields for <code>options</code> include the
                following:</para>
            <variablelist>         
                <?dbfo term-width="1.00in"?> 
                <varlistentry>
                    <term>label</term>
                    <listitem>
                        <para>The short label to use when displaying
                            the option to the user in the GUI.</para>
                        <para>Example: <code>label: Region</code> to
                            provide the <code>Region</code> label in
                            the GUI.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>description</term>
                    <listitem>
                        <para>A full description of this option and
                            what it is.</para>
                        <para>Example: <code>The size of the Wordpress
                                server instances in MB of RAM.</code>
                            (for a WordPress application).</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>
                        <emphasis role="bold">display-hints</emphasis>
                    </term>
                    <listitem>
                        <para>A mapping specifying key / value pairs
                            of hints for how to order and display this
                            option in relation to other options in the
                            GUI. </para>
                        <para>Example:
                            <programlisting>display-hints:
        group: deployment
        list-type: region
        choice:
        - DFW
        - ORD
        - LON</programlisting></para>
                        <para>Note that Reach uses the
                                <code>display-hints</code> to display
                            information in the GUI, and expects one or
                            more of the following keys (to be
                            finalized with Reach):</para>
                        <variablelist>
                            <?dbfo term-width="1.00in"?>
                            <varlistentry>
                                <term>group</term>
                                <listitem>
                                   <para>A group name used to group
                                   options together.</para>
                                   <para>Note that Reach uses groups
                                   and expects one of the following
                                   <code>group</code> names to be
                                   specified: <itemizedlist>
                                   <listitem>
                                   <para><code>deployment</code>
                                   &ndash; This is a deployment option
                                   and shows right under the
                                   deployment name.</para>
                                   </listitem>
                                   <listitem>
                                   <para><code>application</code>
                                   &ndash; This is an application
                                   option and shows on the first
                                   screen of options.</para>
                                   </listitem>
                                   <listitem>
                                   <para><code>servers</code> &ndash;
                                   This is an option that should be
                                   shown under the server options
                                   section.</para>
                                   </listitem>
                                   <listitem>
                                   <para><code>load-balancer</code>
                                   &ndash; This is an option that
                                   should be shown under the load
                                   balancer options section.</para>
                                   </listitem>
                                   <listitem>
                                   <para><code>database</code> &ndash;
                                   This is an option that should be
                                   shown under the database options
                                   section.</para>
                                   </listitem>
                                   <listitem>
                                   <para><code>dns</code> &ndash; This
                                   is an option that should be shown
                                   under the dns options
                                   section.</para>
                                   </listitem>
                                   </itemizedlist></para>
                                   <para>Example: <code>group:
                                   deployment</code> for specifying
                                   the region for the
                                   deployment.</para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                                <term>order</term>
                                <listitem>
                                   <para>Specifies the relative order
                                   of this option (as an integer)
                                   within its group.</para>
                                   <para>Example: <code>order:
                                   1</code> to specify that an option
                                   should be displayed as the
                                   <emphasis>first</emphasis> item in
                                   its group.</para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                                <term>list-type</term>
                                <listitem>
                                   <para>Specifies the type of the
                                   entries in the list. This is used
                                   to identify if it should be a
                                   specific resource type and a list
                                   or attribute. The format is
                                   resource-type.list where
                                   resource-type is a known
                                   &Checkmate; resource type (compute,
                                   database, and so forth), and the
                                   list is one of the lists from the
                                   provider.</para>
                                   <para>Example: <code>list-type:
                                   region</code></para>
                                   <para>In the example shown above,
                                   the list contains entries (such as
                                   ORD and DFW) of type
                                   <code>region</code>.</para>
                                   <para>The following list-types are
                                   also supported:<itemizedlist>
                                   <listitem>
                                   <para><code>compute.memory</code>
                                   &ndash; Specifies a list of
                                   available compute image
                                   sizes.</para>
                                   </listitem>
                                   <listitem>
                                   <para><code>compute.os</code>
                                   &ndash; Specifies a list of
                                   available compute operating
                                   systems.</para>
                                   </listitem>
                                   <listitem>
                                   <para><code>load-balancer.algorithm</code>
                                   &ndash; Specifies a list of
                                   available load balancer
                                   algorithms.</para>
                                   </listitem>
                                   </itemizedlist></para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                                <term>
                                   <emphasis role="bold"
                                   >default-protocol</emphasis>
                                </term>
                                <listitem>
                                   <para>Describes the default
                                   protocol to use to access the
                                   specified option. </para>
                                   <para>Example:
                                   <code>default-protocol:
                                   http</code></para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                                <term>
                                   <emphasis role="bold"
                                   >encrypted-protocols</emphasis>
                                </term>
                                <listitem>
                                   <para>Describes the subset of
                                   protocols that are encrypted so
                                   that &Checkmate; knows when to show
                                   ssl certificate controls. </para>
                                   <para>Example:
                                   <code>encrypted-protocols: [https,
                                   pop3s]</code>.</para>
                                </listitem>
                            </varlistentry>
                            <varlistentry>
                                <term>
                                   <emphasis role="bold"
                                   >sample</emphasis>
                                </term>
                                <listitem>
                                   <para>Displays a sample for the
                                   field to indicate to the user what
                                   is expected. </para>
                                   <para>Example: <code>sample:
                                   http://example.com/ </code> to show
                                   that a URL is expected in the
                                   field.</para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>default</term>
                    <listitem>
                        <para>The default value to use for the option.
                            YAML will assume numbers are integers, so
                            enclose strings in quotation marks (for
                            example: "Ubuntu 12.04") as a best
                            practice. Special values for this field
                            are <code>=generate_password()</code>,
                            which will generate a random password on
                            the server. Rackspace is considering
                            adding parameters to
                                <code>generate_password()</code> so
                            that the blueprint author can make the
                            password that is generated match the
                            requirements of the author (or the
                            particular application). The blueprint
                            author could then use this feature in
                            tandem with constraints (see below) for
                            validation on the client side.</para>
                        <para>Example: <code>default:
                                =generate_password()</code> generates
                            a random password on the server.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>type</term>
                    <listitem>
                        <para>Specifies the data type of this option.
                            Valid types are: string, integer, boolean,
                            password, url, region, and text
                            (multi-line string). See <code>url</code>
                            for a description of the url type, which
                            has some special attributes.</para>
                        <para>Example: <code>type: string</code>
                            defines the type for an option as
                                <code>string</code>.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>choice</term>
                    <listitem>
                        <para>Specifies a list of items to select from
                            (used to display a drop-down list). The
                            entries are either plain strings or a
                            mapping with <code>value</code> and
                                <code>name</code> entries where
                                <code>value</code> is what is passed
                            to &Checkmate; and <code>name</code> is
                            what is displayed to the user. </para>
                        <para>Example:<programlisting>choice:
        - name: 512 Mb (20 Gb disk)
          value: 512
        - name: 1 Gb (40 Gb disk)
          value: 1024
        - name: 2 Gb (80 Gb disk)
          value: 2048
        - name: 4 Gb (160 Gb disk)
          value: 4096
        - name: 8 Gb (320 Gb disk)
          value: 8192
        - name: 16 Gb (620 Gb disk)
          value: 15872
        - name: 30 Gb (1.2 Tb disk)
          value: 30720</programlisting></para>
                        <note>
                            <para>Note: this option does not apply
                                validation. If you want validation,
                                use a <code>-in</code> constraint.
                                This is used for display purposes
                                only.</para>
                            <para>Example:
                                <programlisting>constraints:
- in: ["Ubuntu 12.04"]</programlisting>
                                uses a <code>-in</code> constraint to
                                define a validated list of choices
                                (which includes solely <code>"Ubuntu
                                   12.04"</code>) for the os
                                (operating system).</para>
                        </note>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>constrains</term>
                    <listitem>
                        <para>Specifies a list of mappings that are
                            used as a way to set or limit aspects of
                            the blueprint with the value (or parts of)
                            the option. </para>
                        <para>Example:
                            <programlisting>choice:
        - name: 512 Mb (20 Gb disk)
          value: 512
        - name: 1 Gb (40 Gb disk)
          value: 1024
        - name: 2 Gb (80 Gb disk)
          value: 2048
        - name: 4 Gb (160 Gb disk)
          value: 4096
        - name: 8 Gb (320 Gb disk)
          value: 8192
        - name: 16 Gb (620 Gb disk)
          value: 15872
        - name: 30 Gb (1.2 Tb disk)
          value: 30720
      constrains:
      - setting: memory
        service: web
        resource_type: compute
      </programlisting>
                            This example constrains the
                                <code>memory</code>
                            <code>setting</code> for the
                                <code>server_size</code> for a
                                <code>web</code>
                            <code>service</code> to the choices
                            listed.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>required</term>
                    <listitem>
                        <para><code>true</code> or <code>false</code>.
                            Set to <code>true</code> if this option
                            must be supplied by the user.</para>
                        <para>Example: <code>required: true</code>
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>constraints</term>
                    <listitem>
                        <para>Specifies an array of mappings (key /
                            value pairs) in the standard &Checkmate;
                                <code>constraints</code> syntax. Among
                            the supported constraints are:</para>
                        <itemizedlist>
                            <listitem>
                                <para><code>greater-than</code></para>
                            </listitem>
                            <listitem>
                                <para><code>less-than</code></para>
                            </listitem>
                            <listitem>
                                <para><code>greater-than-or-equal-to</code></para>
                            </listitem>
                            <listitem>
                                <para><code>less-than-or-equal-to</code></para>
                            </listitem>
                            <listitem>
                                <para><code>min-length</code> (for
                                   strings)</para>
                            </listitem>
                            <listitem>
                                <para><code>max-length</code> (for
                                   strings)</para>
                            </listitem>
                            <listitem>
                                <para><code>allowed-chars</code>
                                   &ndash; Example:
                                   "ABCDEFGabcdefg01234565789!&amp;@"</para>
                            </listitem>
                            <listitem>
                                <para><code>required-chars</code>
                                   &ndash; Example: "ABCDEFG"</para>
                            </listitem>
                            <listitem>
                                <para><code>in</code> &ndash; A list
                                   of acceptable values (these could
                                   also be used by customers to
                                   display drop-down lists).</para>
                            </listitem>
                            <listitem>
                                <para><code>protocols</code> &ndash;
                                   Unique to URL types; lists allowed
                                   protocols in the URL.</para>
                            </listitem>
                            <listitem>
                                <para><code>regex</code> &ndash; If
                                   you use regular expressions as
                                   constraints, keep them simple and
                                   not too complicated, and ensure
                                   they are supported by both
                                   javascript and python.</para>
                            </listitem>
                        </itemizedlist>
                        <para>Example:
                            <programlisting>constraints:
      - greater-than-or-equal-to: 1
      - less-than-or-equal-to: 8
</programlisting>The
                            previous example defines a constraint for
                            the <code>web_server_count</code> to limit
                            the number of servers to between 1 and
                            8.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>message</term>
                    <listitem>
                        <para>You can add a message key / value pair
                            to any of these constraints. Always add a
                            message to <code>regex</code> constraints
                            so it is easy to understand what the
                            constraint does when read and so GUI
                            clients (Reach and so forth) and the
                            server can generate useful error messages
                            and users reading the blueprint do not
                            have to decipher the <code>regex</code>.
                            Example: "must have 8-16 characters". </para>
                        <para>Browser clients will parse constraints
                            and apply validation rules. A good
                            practice is to have multiple, simple
                                <code>regex</code> constraints to
                            allow browser clients to provide clear and
                            useful feedback to the users for each rule
                            they may break. For example, list
                            lowercase, uppercase, and numeric
                            requirements for a password as three
                            constraints, with a message unique to
                            each.</para>
                        <para>Example:
                            <programlisting>constraints:
- regex: '^(?=.*).{6,15}$'
message: must be between 6 and 15 characters long
- regex: '^(?=.*\d)'
message: must contain a digit
- regex: '^(?=.*[a-z])'
message: must contain a lower case letter
- regex: '^(?=.*[A-Z])'
message: must contain an upper case letter</programlisting>This
                            example illustrates creating a separate
                                <code>message</code> for each separate
                            requirement of the password. </para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <section xml:id="url_options_dle324">
                <title>Options of Type <code>url</code></title>
                <para>Options of type <code>url</code> provide some
                    advanced handling of common URL use cases. The
                    option can be used simply as a string that accepts
                    a URL. In this case, the only benefit of setting
                    the <code>type</code> to <code>url</code> is that
                    a client application can perform certain
                    validation to make sure the provided value is a
                    valid URL (according to <link
                        xlink:href="http://tools.ietf.org/html/rfc3986"
                        >RFC 3986</link> ). Example: </para>
                <programlisting> option:
   my_web_site:
     type: url </programlisting>
                <para>It is useful, however, to be able to handle
                    different parts of a URL (that is, the scheme or
                    protocol, domain, path, port, username, password,
                    and so forth) separately. They may be validated
                    independently (for example to make sure the
                    protocol is http or https only). The parts may be
                    wired up to different parts of the blueprint using
                    constraints (for example to use the domain part
                    for a dns setting). The supported technique is
                    that the <code>url</code> type has attributes that
                    can be accessed in the blueprint or other parts of
                    &Checkmate;. These attributes are:</para>
                <variablelist>
                    <varlistentry>
                        <term>scheme</term>
                        <listitem>
                            <para>The first part of the URL.</para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>protocol</term>
                        <listitem>
                            <para>The first part of the URL as well
                                (an alias to
                                <code>scheme</code>).</para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>netloc</term>
                        <listitem>
                            <para>The DNS name or address part.</para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>port</term>
                        <listitem>
                            <para>The port, if specified. For example,
                                the port in http://localhost:8080 is
                                8080.</para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>path</term>
                        <listitem>
                            <para>The path of the resource or
                                file.</para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>private_key</term>
                        <listitem>
                            <para>The private_key of a certificate to
                                use if the protocol is an encrypted
                                one.</para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>public_key</term>
                        <listitem>
                            <para>The public_key of a certificate to
                                use if the protocol is an encrypted
                                one.</para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>intermediate_key</term>
                        <listitem>
                            <para>The intermediate key chain of a
                                certificate to use if the protocol is
                                an encrypted one.</para>
                        </listitem>
                    </varlistentry>
                </variablelist>
                <para>These attributes can be specified in
                        <code>constraints</code>, as shown in the
                    following example:</para>
                <programlisting>options:
  my_url:
    label: Site Address
    type: url
    constraints:
    - protocols: [http, https]
    constrains:
    - type: load-balancer
      service: lb
      attribute: protocol  # This picks out the 'http' or 'https' part of the URL
      setting: protocol
    - type: compute
      service: web
      attribute: "private_key"  # This picks out the cert
      setting: ssl_certificate
    - type: compute
      service: web
      attribute: "intermediate_key"  # This picks up the intermediate cert
      setting: ssl_intermediate_certificate
</programlisting>
                <para>In this example, the <code>constraints: -
                        protocols: [http, https]</code> specifies that
                    the <code>url</code> has <code>constraints</code>
                    for the http and https protocols. The
                        <code>constrains</code> section provides a way
                    of parsing options from the URL provided and
                    applying them to services. When the URL is parsed,
                    each setting will be parsed from the URL and then
                    set as an attribute. Take the following setting
                    for example:</para>
                <programlisting>    constrains:
    - type: load-balancer
      service: lb
      attribute: protocol  # This picks out the 'http' or 'https' part of the URL
      setting: protocol</programlisting>
                <para>This says to take the <code>protocol</code>
                    attribute and make it the protocol used for the
                        <code>lb</code> (load balancer)
                        <code>service</code>. So if the URL contains
                    http, then the load balancer will use the http
                    protocol.</para>
                <para>There are also special
                        <code>display-hints</code> used to aid a
                    client in rendering the url, for example
                        <code>encrypted-protocols</code>, which is
                    documented in <xref
                        linkend="Blueprint_Syntax_options-d1e565"
                    />.</para>
                <para>When supplying the value for a url as an input,
                    it can be supplied as a string or as a mapping
                    with attributes. As a string it would be
                        <code>my_site_address:
                        https://mydomain.com/blog</code>. As a
                    mapping, it would look similar to the
                    following:</para>
                <programlisting>inputs:
  my_url:
    url: https://domain.com/path  # 'url' is a special shortcut - see note below
    private_key: |
      -----  BEGIN ...
    intermediate_key: |
      -----  BEGIN ...
    public_key: |
      -----  BEGIN ...
</programlisting>
                <note>
                    <para>A common use case is to supply the url and
                        keys as inputs, as shown in the previous
                        example. The shortcut provided for this use
                        case accepts a key called <code>url</code>
                        that can be used to supply the url without
                        having to provide all the components of the
                        url.</para>
                </note>
            </section>
        </section>
        <section xml:id="Blueprint_Syntax_resources-d1e362">
            <title>Blueprint &ndash; Resources Section </title>
            <para>Resources are static and are to be created at
                planning time and shared across the blueprint. The
                example resources section below from a Wordpress
                blueprint shows two resources: the resource
                    <code>sync-keys</code> and the resource <code>"wp
                    user"</code>: </para>
            <example>
                <title>resources section: wordpress</title>
                <?dbfo keep-together="always"?>
                <programlisting language="xml"><xi:include href="../../../src/main/resources/samples/wordpress_resources" parse="text"><xi:fallback>Missing code sample!<?rax fail?></xi:fallback></xi:include></programlisting>
            </example>
            <para>In the example above there is a resource called
                    <code>sync-keys</code> that specifies a type
                    <code>key-pair</code> used for generating the
                public and private keys for ssh for the master service
                and web service. Then there is a resource named
                    <code>"wp user"</code> of type <code>user</code>
                that is used for setting the username and password for
                the master service and web service as well as the
                password for the backend service. </para>
            <para>The private / public key pair (<code>type:
                    key-pair</code>) and username / password
                    (<code>type: user</code>) will be created before
                deploying the workflow <code>constrains</code>. </para>
            <para>The fields for the resource section of the blueprint
                include the following:</para>
            <variablelist>
                <varlistentry>
                    <term>type</term>
                    <listitem>
                        <para>Specifies the type of the resource to be
                            created.</para>
                        <para>Values supported include:</para>
                        <variablelist>
                            <varlistentry>
                                <term>key-pair</term>
                                <listitem>
                                   <para>Specifies that a private /
                                   public key pair will be created
                                   before deploying the
                                   workflow.</para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                        <variablelist>
                            <varlistentry>
                                <term>user</term>
                                <listitem>
                                   <para>Specifies that a username and
                                   password will be created before
                                   deploying the workflow.</para>
                                </listitem>
                            </varlistentry>
                        </variablelist>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>constrains</term>
                    <listitem>
                        <para>Uses the standard
                                <code>constrains</code> syntax as
                            described in <xref
                                linkend="Blueprint_Syntax_options-d1e565"
                            /></para>
                    </listitem>
                </varlistentry>
            </variablelist>
        </section>
        <section xml:id="Blueprint_Syntax_metadata-d1e569">
            <title>Blueprint &ndash; Meta-data Section </title>
            <para>The <code>meta-data</code> section of the blueprint
                provides additional information about the blueprint. </para>
            <para>In the example shown below, it shows the version of
                the &Checkmate; schema that is supported
                    (<code>v0.7</code>):</para>
            <example>
                <title>meta-data section: wordpress</title>
                <?dbfo keep-together="always"?>
                <programlisting language="xml"><xi:include href="../../../src/main/resources/samples/wordpress_metadata" parse="text"><xi:fallback>Missing code sample!<?rax fail?></xi:fallback></xi:include></programlisting>
            </example>
            <para>The fields for the <code>meta-data</code> section of
                the blueprint include the following:</para>
            <variablelist>
                <varlistentry>
                    <term>schema-version</term>
                    <listitem>
                        <para>String that identifies the version of
                            the &Checkmate; schema that is used.
                            Example: <code>schema-version:
                            v0.7</code>.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>blueprint-type</term>
                    <listitem>
                        <para>String that identifies the type of the
                            &Checkmate; blueprint that is used.
                            Example: <code>blueprint-type:
                                Application</code>. Other blueprint
                            types include: <code>Framework</code> and
                                <code>Component</code>.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>application-name</term>
                    <listitem>
                        <para>String that identifies the name of the
                            &Checkmate; application that is used.
                            Example: <code>application-name:
                                WordPress</code>.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>application-version</term>
                    <listitem>
                        <para>String that identifies the version of
                            the &Checkmate; application that is used.
                            Example: <code>application-version:
                                3.4.1</code>.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>flavor</term>
                    <listitem>
                        <para>The <code>flavor</code> is used by the
                            GUI as a short summary of what the
                            &Checkmate; blueprint provides to display
                            in the flavor list for the application
                            name in order to distinguish it from the
                            other blueprint flavors available for the
                            application. Example: <code>flavor:
                                Multiple Linux servers with WordPress
                                and one Linux server with
                            MySQL</code>.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>flavor-weight</term>
                    <listitem>
                        <para>The <code>flavor-weight</code> is used
                            by the GUI to determine the ordering of
                            options in the flavor list. The value 1
                            indicates that the flavor information will
                            be displayed first among the flavors in
                            the list for the application. Note that
                            other blueprints can provide their own
                            flavors for the particular application and
                            flavor-weights to specify where their
                            flavor information appears in the flavor
                            list displayed by the GUI. Example:
                                <code>flavor-weight: 1</code>.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>reach-info</term>
                    <listitem>
                        <para><emphasis role="bold"
                                >option-groups</emphasis>: String that
                            identifies the info about the various
                            groups of options to create for displaying
                            info in the Reach GUI. The only values for
                            groups that are currently supported are:
                                <code>application</code>,
                                <code>server</code>, <code>load
                                balancer</code>,
                            <code>database</code>, and
                                <code>dns</code>.</para>
                        <para><emphasis role="bold">tattoo</emphasis>:
                            Provides the URLs that are used by the GUI
                            to display an icon for branding purposes
                            (a company logo for example) for the
                            blueprint and a watermark. The icon must
                            be a 20x20 png file, and the opacity
                            should be 30% in order to display the icon
                            correctly. The URL for the icon should
                            start with "https" and it should be on CDN
                            to display quickly. Example:
                                <programlisting>tattoo: https://600861890ddb34a8670a-744765205721eed93c384dae790e86aa.ssl.cf2.rackcdn.com/wordpress-tattoo.png
icon-20x20: https://600861890ddb34a8670a-744765205721eed93c384dae790e86aa.ssl.cf2.rackcdn.com/wordpress-icon-20x20.png</programlisting>.<remark>Reviewer:
                                why are there 2 separate files listed
                                for the icon in the example
                                above?</remark></para>
                        <para>
                            <remark>Reviewer: need to decide how to
                                treat documentation and
                                display-outputs sections.</remark>
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>
        </section>
        <section xml:id="Blueprint_Syntax_Documentation-d1e539">
            <title>Blueprint &ndash; Documentation Section</title>
            <para>The <code>documentation</code> section is required
                if the blueprint is used by the Reach GUI for
                deployments, and it is otherwise ignored. It is
                written in md (markdown) format. It provides a map
                that contains all of the blueprint documentation
                needed by Reach.</para>
            <para>An example <code>documentation</code> section for a
                wordpress blueprint is shown below:</para>
            <example>
                <title>documentation section: wordpress</title>
                <?dbfo keep-together="always"?>
                <programlisting language="xml"><xi:include href="../../../src/main/resources/samples/wordpress_documentation" parse="text"><xi:fallback>Missing code sample!<?rax fail?></xi:fallback></xi:include></programlisting>
            </example>
            <para>The fields for the <code>documentation</code> section
                of the blueprint include the following:</para>
            <variablelist>
                <varlistentry>
                    <term>abstract</term>
                    <listitem>
                        <para>The <code>abstract</code> provides a one
                            or two paragraph description of the
                            blueprint. It is in markdown format and
                            may include references to images and other
                            URLs. The <code>abstract</code> is used to
                            provide the text that will be displayed as
                            a tooltip when the user hovers with the
                            mouse over the <emphasis role="bold"
                                >?</emphasis> icon next to the
                            drop-down with the flavor information for
                            the blueprint in the Reach GUI. </para>
                        <para>The pipe symbol (<code>|</code>) that
                            follows a colon at the beginning of each
                            section (for example: <code>abstract:
                                |</code>) indicates to yaml to pull in
                            the block of text that follows and
                            determine where to place the carriage
                            returns to display it properly.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>guide</term>
                    <listitem>
                        <para>The <code>guide</code> is the URL to a
                            knowledge-center article or other www
                            resource that can be used to link the user
                            to a full guide with details for the
                            blueprint. It is in markdown format. The
                            content could come from a file named
                                <code>guide.md</code> in the
                                <code>docs</code> directory repository
                            for the blueprint if the correct include
                            syntax is used, for example: <code>guide:
                                =include('docs/guide.md')</code>.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>instructions</term>
                    <listitem>
                        <para>The <code>instructions</code> contain
                            instructions in markdown format for how to
                            use a deployment launched by this
                            blueprint and are displayed at the bottom
                            of the Reach building screen during the
                            deployment. The contents of the file
                            instructions.md is loaded here if it
                            exists in the repository and if the
                            correct include syntax is used (not shown
                            in this blueprint). The
                                <code>instructions</code> section
                            typically contains 3 subsections:<itemizedlist>
                                <listitem>
                                   <para>Getting Started &ndash;
                                   contains information for getting
                                   started using the deployed
                                   application</para>
                                </listitem>
                                <listitem>
                                   <para>Management Info &ndash;
                                   contains information for managing
                                   the deployed application</para>
                                </listitem>
                                <listitem>
                                   <para>Additional Notes &ndash;
                                   contains additional information
                                   concerning the deployed
                                   application</para>
                                </listitem>
                            </itemizedlist></para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <remark>Reviewer: please give me info on the new
                display-outputs section when it is integrated. Not
                ready to discuss yet since this feature has not yet
                been integrated into the code.</remark>
        </section>
        <section xml:id="Blueprint_Syntax_environment-d1e365">
            <title>Blueprint &ndash; Environment Section </title>
            <para>Environments provide a context and optional
                constraints as well as a list of providers. For
                example, if I have an environment with a Cloud
                Databases provider constrained to LON where Cloud
                Databases don't have 4GB instances, then the catalog
                won't have 4GB instances.</para>
            <para>An example <code>environment</code> section from a
                WordPress blueprint is shown below:</para>
            <example>
                <title>environment section: wordpress</title>
                <?dbfo keep-together="always"?>
                <programlisting language="xml"><xi:include href="../../../src/main/resources/samples/wordpress_environment" parse="text"><xi:fallback>Missing code sample!<?rax fail?></xi:fallback></xi:include></programlisting>
            </example>
            <para>The fields for the <code>environment</code> section
                of the blueprint include the following:</para>
            <variablelist>
                <varlistentry>
                    <term>id</term>
                    <listitem>
                        <para>Unique identifier provided by the client
                            (or user).</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>description</term>
                    <listitem>
                        <para>Description for the environment.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>name</term>
                    <listitem>
                        <para>Name of the environment.</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>providers</term>
                    <listitem>
                        <para>The keys are predefined names from the
                            providers. &Checkmate; identifies the
                            provider based on the key and vendor
                            field. In the example above,
                                <code>chef-solo</code> is provided by
                            the <code>vendor</code>
                            <code>opscode</code>, and
                                <code>nova</code> is provided by the
                                <code>vendor</code>
                            <code>rackspace</code>. These keys and
                            vendor fields result in &Checkmate;
                            dynamically loading
                            checkmate.providers.rackspace.nova (the
                            rackspace.nova portion represents
                            vendor.key).</para>
                        <para>The special notation <code>{}</code>
                            means the empty set (NULL) in YAML / json
                            and indicates that there are no vendors or
                            constraints defined for
                                <code>load-balancer</code> or
                                <code>nova</code>, so just use
                            everything from the provider for these.
                            Note that you cannot leave this field
                            empty, since the YAML parser will create
                            an error if the field is empty.</para>
                        <para>Optional <code>constraints</code> can be
                            applied at the provider level (for example
                                <code>- source: %repo_url%</code>).
                            The syntax can follow the normal
                            constraint syntax, but can also be a key /
                            value shorthand. For the normal constraint
                            syntax, a value defines what the
                            constraint evaluates to in the catalog and
                            provides a way to inject a catalog into
                            the provider. Two uses for this feature
                            are testing and, for example, when you
                            only want to show 1GB instances. So if a
                            catalog is provided, the provider will use
                            that. Otherwise, it could log on and query
                            the underlying service (list images, list
                            flavors, get cookbooks, and so forth).<note>
                                <para>Using the special variable
                                   <code>%repo_url%</code> will cause
                                   the source URL to be replaced by
                                   the GUI with the URL for the source
                                   github repo for the blueprint. If
                                   you are not using a GUI with the
                                   blueprint, however, then
                                   <code>source:</code> should specify
                                   the hard-coded URL for the
                                   blueprint in github since the
                                   special variable
                                   <code>%repo_url%</code> will not
                                   work in that case.</para>
                            </note>The URL specifies the location of
                            the chef map and chef file for the
                            blueprint. </para>
                        <para>Since the environment defines a
                            particular context for a deployment and
                            depends on the specified providers and
                            constraints, there is a likelihood that
                            the blueprint will be incompatible with an
                            environment if the environment cannot
                            provide the required resources or meet the
                            necessary constraints.</para>
                    </listitem>
                </varlistentry>
            </variablelist>
        </section>
        <?hard-pagebreak?>
        <section xml:id="Blueprint_Syntax_inputs-d1e775">
            <title>Blueprint &ndash; Inputs Section </title>
            <para>The <code>inputs</code> section is where the
                architect sets the necessary levers and dials for the
                deployment. Inputs define options via hard-coded
                values that let you launch a blueprint from a single
                cURL command. Inputs are arbitrary because they map
                directly to the options and components used. Inputs
                are also optional. Architects typically do not use
                inputs, since they would typically rather let users
                provide their input via options. However, if you want
                to deploy your blueprint via cURL rather than
                &Checkmate; services, using inputs can be
                handy.</para>
            <para>There are different scopes available for setting
                inputs: global, blueprint, service, and provider
                scopes. So, for example, you can set the memory size
                at the appropriate level. You might set the memory
                size at the <code>provider</code> level to specify
                that all servers for the provider should be 1GB. Or
                you might set it at the <code>service</code> level
                (all servers in service X should be 1GB and all
                servers in service Y should be 2GB). Or you might set
                it at the <code>blueprint</code> level, as shown in
                the example below, so that the blueprint always uses
                the specified memory size.</para>
            <note>
                <para>More specific inputs override more general
                    ones.</para>
            </note>
            <para>An example <code>inputs</code> section from a
                WordPress blueprint is shown below:</para>
            <example>
                <title>inputs section: wordpress</title>
                <?dbfo keep-together="always"?>
                <programlisting language="xml"><xi:include href="../../../src/main/resources/samples/wordpress_inputs" parse="text"><xi:fallback>Missing code sample!<?rax fail?></xi:fallback></xi:include></programlisting>
            </example>
            <para>In this example, the inputs are hard-coded to allow
                the blueprint to be deployed using a single cURL
                command: <variablelist>
                    <varlistentry>
                        <term>url</term>
                        <listitem>
                            <para>Specifies the URL
                                   (<code>http://wordpress.cldsrvr.com/</code>)
                                for the application</para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>region</term>
                        <listitem>
                            <para>Specifies the region
                                   (<code>ORD</code>) for the
                                application</para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>username</term>
                        <listitem>
                            <para>Specifies the username (<code>wp
                                   user</code>) for the
                                application</para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>web_server_count</term>
                        <listitem>
                            <para>Specifies the count of web servers
                                   (<code>1</code>) for the
                                application</para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>server_size</term>
                        <listitem>
                            <para>Specifies the server size
                                   (<code>1024</code> = 1GB) for the
                                application</para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>prefix</term>
                        <listitem>
                            <para>Specifies the prefix
                                   (<code>wp_</code>) for the
                                application</para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term>password</term>
                        <listitem>
                            <para>Specifies the password
                                   (<code>Ul345678</code>) for the
                                associated username</para>
                        </listitem>
                    </varlistentry>
                </variablelist></para>
        </section>
    </chapter>
    <glossary>
        <title>Glossary</title>
        <glossentry xml:id="map-file-d1e019">
            <glossterm>orchestration</glossterm>
            <glossdef>
                <para>A &Checkmate; is a group of resources (servers,
                    load balancers, databases, and so forth) combined
                    to fulfill a useful purpose. A &Checkmate; is the
                    end result of successfully executing a template. A
                    &Checkmate; contains a template and an environment
                    and generates resources to run the application
                    framework or component specified.</para>
            </glossdef>
        </glossentry>
        <glossentry xml:id="DSL-d1e020">
            <glossterm>stack</glossterm>
            <glossdef>
                <para>A stack is a set of cloud resources that are
                    related and logically grouped. Sometimes this is
                    also referred to as a <emphasis role="italic"
                        >deployment</emphasis>.</para>
            </glossdef>
        </glossentry>
        <glossentry xml:id="blueprint-d1e016">
            <glossterm>template</glossterm>
            <glossdef>
                <para>A &Checkmate; template is a portable file,
                    written in YAML or JSON, which defines cloud
                    resources and their relationships. It describes
                    how a set of resources should be assembled and
                    what software should be installed in order to
                    produce a working deployment. The template
                    specifies what resources should be used, what
                    attributes can be set, and other parameters that
                    are critical to the successful, repeatable
                    automation of a specific application deployment.
                    When a template is deployed at Rackspace, the
                    result is referred to as a deployment. (When a
                    template is deployed using OpenStack Heat, the
                    result is referred to as a stack).</para>
            </glossdef>
        </glossentry>
        <glossentry xml:id="deployment-d1e017">
            <glossterm>deployment</glossterm>
            <glossdef>
                <para>
                    <emphasis role="italic">Deployment </emphasis> is
                    a term sometimes used to describe a stack. Since
                    many templates include software
                    installation/configuration in addition to cloud
                    resources, developers often refer to a stack as an
                        <emphasis>application deployment</emphasis>
                    instead of just a deployment.</para>
            </glossdef>
        </glossentry>
        <glossentry xml:id="resource-d1e019">
            <glossterm>resource</glossterm>
            <glossdef>
                <para>A resource is a component that can be deployed,
                    for example Apache.</para>
            </glossdef>
        </glossentry>
    </glossary>
</book>
