<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book [
        <!-- Some useful entities borrowed from HTML -->
        <!ENTITY ndash  "&#x2013;">
        <!ENTITY mdash  "&#x2014;">
        <!ENTITY hellip "&#x2026;">

        <!-- Useful for describing APIs -->
        <!ENTITY GET    '<command xmlns="http://docbook.org/ns/docbook">GET</command>'>
        <!ENTITY PUT    '<command xmlns="http://docbook.org/ns/docbook">PUT</command>'>
        <!ENTITY POST   '<command xmlns="http://docbook.org/ns/docbook">POST</command>'>
        <!ENTITY DELETE '<command xmlns="http://docbook.org/ns/docbook">DELETE</command>'>
        
        <!-- changing authentication endpoints; define entities for US & UK rather than maintaining in text -->
        <!ENTITY ENDPOINT-US "https://identity.api.rackspacecloud.com/v1.1/">
        <!ENTITY ENDPOINT-UK "https://lon.identity.api.rackspacecloud.com/v1.1/">
        <!ENTITY ENDPOINT-US-20 "https://identity.api.rackspacecloud.com/v2.0/">
        <!ENTITY ENDPOINT-UK-20 "https://lon.identity.api.rackspacecloud.com/v2.0/">
        
        <!-- changing product name; define entity for product name rather than maintaining in text -->
        <!ENTITY Checkmate "Cloud Orchestration">

]>
<book xmlns="http://docbook.org/ns/docbook"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:svg="http://www.w3.org/2000/svg"
    xmlns:m="http://www.w3.org/1998/Math/MathML"
    xmlns:html="http://www.w3.org/1999/xhtml" xml:id="orchestration-templates-devguide"
    version="5.0">
    
    <?rax title.font.size="35px" subtitle.font.size="20px"?>
    <title>Rackspace Cloud Orchestration Templates Developer Guide</title>

    <info>
        <author>
            <personname>
                <firstname/>
                <surname/>
            </personname>
            <affiliation>
                <orgname>Rackspace Cloud</orgname>
            </affiliation>
        </author>
        <copyright>
            <year>2012</year>
            <year>2013</year>
            <year>2014</year>
            <holder>Rackspace US, Inc.</holder>
        </copyright>
        <releaseinfo>API v1.0</releaseinfo>
        <productname>Rackspace Cloud Orchestration</productname>
        <pubdate>2014-02-18</pubdate>
        <legalnotice role="rs-api">
            <annotation>
                <remark>Copyright details are filled in by the template.</remark>
            </annotation>
        </legalnotice>
        <abstract>
            <para>This document is intended for software developers
                interested in developing templates for use with
                Rackspace Cloud Orchestration Services. </para>
        </abstract>
        
        
        
        <revhistory>
            <revision>
                <date>2014-02-18</date>
                <revdescription>
                    <itemizedlist spacing="compact">
                        <listitem>
                            <para>Initial release.</para>
                        </listitem>
                    </itemizedlist>
                </revdescription>
            </revision>
        </revhistory>
	<raxm:metadata
	    xmlns:raxm="http://docs.rackspace.com/api/metadata">
	  <raxm:displayname>Templates Developer Guide</raxm:displayname>
	  <raxm:product version="v1.0">deployments</raxm:product>
	  <raxm:priority>2</raxm:priority>
	</raxm:metadata>
    </info>
    
   
    
    <chapter xml:id="overview">
        <title>Overview</title>
        <para>Rackspace &Checkmate; is a RESTful API Service that can
            be used to create and manage cloud resources (for example:
            servers + software installation, databases, load
            balancers, and so forth) by declaring what you want
            deployed using a simple template language, as described in
            this guide. &Checkmate; is based on the OpenStack open
            source project named Heat. Rackspace &Checkmate; currently
            supports only the HOT (Heat Orchestration Template) syntax
            specification of Heat.Â  <note>
                <para> The "Deployments" feature within the Rackspace
                    Control Panel (<link
                        xlink:href="https://mycloud.rackspace.com/"
                        >https://mycloud.rackspace.com/</link>) is
                    provided by an orchestration system similar to
                    Heat.</para>
            </note></para>
        <itemizedlist>
            <title>How &Checkmate; Works</title>
            <listitem>
                <para>A &Checkmate; template describes the
                    infrastructure for a cloud application in a YAML
                    or JSON text file that is readable and writable by
                    humans, and can be checked into version control,
                    diffed, and so forth. </para>
            </listitem>
            <listitem>
                <para>Infrastructure resources that can be described
                    include: servers, volumes, and so forth.</para>
            </listitem>
            <listitem>
                <para>&Checkmate; also provides an autoscaling service
                    that integrates with Rackspace Cloud Auto Scale,
                    so you can include a scaling group as a resource
                    in a template. </para>
            </listitem>
            <listitem>
                <para>Templates can also specify the relationships
                    between resources (for example this volume is
                    connected to this server). This enables
                    &Checkmate; to call out to the Rackspace APIs to
                    create all of your infrastructure in the correct
                    order to completely launch your
                    application.</para>
            </listitem>
            <listitem>
                <para>&Checkmate; manages the whole lifecycle of the
                    application. When you need to change your
                    infrastructure, simply modify the template and use
                    it to update your existing stack. &Checkmate;
                    knows how to make the necessary changes. It will
                    also delete all of the resources when you are
                    finished with the application. </para>
            </listitem>
            <listitem>
                <para>&Checkmate; primarily manages infrastructure,
                    but the templates integrate well with software
                    configuration management tools such as Puppet and
                    Chef.</para>
            </listitem>
        </itemizedlist>
        <para>Rackspace &Checkmate; Services are available to
            Rackspace Cloud customers. Interactions with Rackspace
            &Checkmate; occur programmatically via the Rackspace
            &Checkmate; API as described in the <citetitle>&Checkmate;
                Developer Guide</citetitle>.</para>
        <remark>Writer: a diagram is available here:
            https://one.rackspace.com/display/heat/Architecture+Diagram.
            Investigate turning it into a svg format later for use in
            this guide.</remark>
        <para security="writeronly">The following figure shows an overview of &Checkmate;
            Infrastructure: <informalfigure security="writeronly">
                <mediaobject>
                    <imageobject>
                        <imagedata
                            fileref="images/Cloud_DNS_Infographic-1.svg"
                            contentwidth="6in"/>
                    </imageobject>
                </mediaobject>
            </informalfigure>
        </para>
        <para>We welcome feedback, comments, and bug reports by
            sending email to
                <email>mailto:orchestration@lists.rackspace.com</email>.</para>
        <remark>Reviewer: please let me know when it is OK to add the
            following statement here: "Issues and bug reports can be
            directed to your support team via ticket, chat, email, or
            phone."</remark>
        <remark>Reviewer: please let me know when the product feedback
            link is available for Orchestration and  the correct link
            to use.</remark>
        <para security="writeronly">Issues and bug reports can be directed to your support team via ticket, chat, email,
            or phone.</para>
        <section xml:id="Intended_Audience-d1e122">
            <title>Intended Audience</title>
            <para> This guide is intended to assist support teams,
                DevOps Engineers, and software developers who want to
                develop templates for use on the &Checkmate; Service.
                This service is intended to automate tasks in a manner
                that will speed deployment and provide a method that
                allows users to deploy a complete application instead
                of having to manually deploy individual resources.
                This will remove barriers that have historically
                prevented customers from deploying resources in the
                Rackspace Cloud. </para>
            <para>To use the information provided here, you should
                first have a general understanding of the &Checkmate;
                service. You should also be familiar with: </para>
            <itemizedlist spacing="compact">
                <listitem>
                    <para>Software deployments</para>
                </listitem>
                <listitem>
                    <para>Software installations on server
                        infrastructure</para>
                </listitem>
                <listitem>
                    <para>Infrastructure components such as Cloud Load
                        Balancers and Cloud Databases</para>
                </listitem>
                <listitem>
                    <para>JSON and/or YAML data serialization
                        formats</para>
                </listitem>
            </itemizedlist>
        </section>
        <?hard-pagebreak?>
        <section xml:id="Document_Change_History-d1e166">
            <title>Document Change History</title>
            <para>This version of the Developer Guide replaces and
            obsoletes all previous versions.  The most recent changes
            are described in the table below:</para>
        <?rax revhistory?>
        </section>
        <section xml:id="Additional_Resources-d1e532">
            <title>Additional Resources</title>
            <para>You can download the most current versions of
                templates from <link
                    xlink:href="https://github.com/rackspace-heat-templates"
                    >https://github.com/rackspace-heat-templates</link>.</para>
            <para>For information about Rackspace Cloud products,
                refer to <link
                    xlink:href="http://www.rackspace.com/cloud/"
                    >http://www.rackspace.com/cloud/</link>.</para>
        </section>
    </chapter>
    <chapter xml:id="Concepts-d1e565">
        <title>Concepts</title>
        <?dbhtml stop-chunking?>
        <para> To use &Checkmate; effectively, you should understand
            several key concepts: </para>
        <section xml:id="Blueprint-d1e588">
            <title>Template</title>
            <para>A &Checkmate; template is a portable file, written
                in a user-readable language, that describes how a set
                of resources should be assembled and what software
                should be installed in order to produce a working
                deployment. The template specifies what resources
                should be used, what attributes can be set, and other
                parameters that are critical to the successful,
                repeatable automation of a specific application
                deployment.</para>
        </section>
        <section xml:id="Resource-d1e607">
            <title>Resource</title>
            <para>A resource is a template artifact that represents
                some component of your desired architecture (a Cloud
                Server, a group of scaled Cloud Servers, a load
                balancer, some configuration management system, and so
                forth).</para>
        </section>
        <section xml:id="Stack-d1e573">
            <title>Stack</title>
            <para>A stack is a group of resources (servers, load
                balancers, databases, and so forth) combined to
                fulfill a useful purpose. Based on a template, Heat
                orchestration engine creates an instantiated set of
                resources (a stack) to run the application framework
                or component specified (in the template). A stack is a
                running instance of a template. The result of creating
                a stack is a deployment of the application framework
                or component.</para>
        </section>
    </chapter>
    <chapter xml:id="Intro_to_Templates-d1e633">
        <title>Introduction to Templates</title>
        <section xml:id="What_is_Template-d1e633">
            <title>What is a Template?</title>
            <para>A &Checkmate; template is a portable file that
                describes how to configure a set of resources and
                install the appropriate applications. ItÂ describes the
                best practices for a particular type of deployment. </para>
            <para>The template author (&Checkmate; architect) makes
                decisions about the resources required for a
                deployment and describes how the resources should be
                configured using YAML or JSON. In the template, the
                author defines several important pieces of information
                that drive the installation, such as parameters,
                resources, and relationships among the
                resources.</para>
            <para>Once you have created a template, you can check it
                into your local github repository if desired.Â If you
                would rather not start from scratch,Â browse the
                &Checkmate; github repository (<link
                    xlink:href="https://github.com/openstack/heat-templates"
                    >https://github.com/openstack/heat-templates</link>)
                for a template that closely matches your needs, clone
                it to a local repository, and then modify it for your
                unique architecture.<remark security="writeronly"
                    >Reviewer: do we have a process to allow users to
                    submit templates to the Orchestration project so
                    that other users can take advantage of them? If
                    so, we need to document it here.</remark></para>
        </section>
        <section xml:id="Defining_Template_dle245">
            <title>Defining a Template</title>
            <para>Templates are composed of 6 possible sections, some
                of which are optional as noted. Templates are defined
                in YAML and follow the structure outlined
                below:</para>
            <programlisting> heat_template_version: 2013-05-23

description:
  # a description of the template
  # optional

parameter_groups:
  # a declaration of input parameter groups and order
  # optional

parameters:
  # declaration of input parameters
  # optional

resources:
  # declaration of template resources

outputs:
  # declaration of output parameters
  # optional </programlisting>
            <?dbhtml stop-chunking?>
            <para>The description for each section follows
                below:</para>
            <variablelist>
                <varlistentry>
                    <term><code>heat_template_version</code></term>
                    <listitem>
                        <para>This key with value <emphasis
                                role="italic">2013-05-23</emphasis>
                            indicates that the YAML document is an
                            Orchestration template of the specified
                            version.</para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <variablelist>
                <varlistentry>
                    <term><code>description</code></term>
                    <listitem>
                        <para>This <emphasis role="italic"
                                >optional</emphasis> section allows
                            for giving a description of the template,
                            or the workload that can be deployed using
                            the template. Although this section is
                                <emphasis role="italic"
                                >optional</emphasis>, it is good
                            practice to provide a brief description
                            for the template.</para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <variablelist>
                <varlistentry>
                    <term><code>parameter_groups</code></term>
                    <listitem>
                        <para>This section allows for specifying how
                            the input parameters should be grouped and
                            the order in which to provide the
                            parameters. This section is <emphasis
                                role="italic">optional</emphasis> and
                            can be omitted when necessary.</para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <variablelist>
                <varlistentry>
                    <term><code>parameters</code></term>
                    <listitem>
                        <para>This section allows for specifying input
                            parameters that have to be provided when
                            instantiating the template. The section is
                                <emphasis role="italic"
                                >optional</emphasis> and can be
                            omitted when no input is required.</para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <variablelist>
                <varlistentry>
                    <term><code>resources</code></term>
                    <listitem>
                        <para>This section contains the declaration of
                            the resources of the template. This
                            section is mandatory and at least one
                            resource must be defined in any
                            Orchestration template.</para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <variablelist>
                <varlistentry>
                    <term><code>outputs</code></term>
                    <listitem>
                        <para>This section allows for specifying
                            output parameters available to users once
                            the template has been instantiated. This
                            section is <emphasis role="italic"
                                >optional</emphasis> and can be
                            omitted when no output values are
                            required.</para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <para>These sections are independent from each other and
                can be arranged in any order, except as described in
                the following sections. Each section name must be
                followed immediately by a colon.</para>
            <section xml:id="template_version_dle154">
                <title>Template Version</title>
                <para>The <code>heat_template_version</code> with
                    value <code>2013-05-23</code> indicates that the
                    YAML document is a &Checkmate; template of the
                    specified version.</para>
                <screen language="bash">heat_template_version: 2013-05-23</screen>
            </section>
            <section xml:id="template_description_dle145">
                <title>Description</title>
                <para>The <code>description</code> section specifies
                    the description of the template and is optional.
                    The value is a collection of YAML strings up to a
                    maximum total length of 4K. This value must be a
                    literal and cannot be defined as the result of a
                    function call or parameter evaluation. An example
                    valid <code>description</code> declaration
                    is:</para>
                <screen language="bash">description: >
Â Â Hello world HOT template that just defines a single compute instance.
Â Â Contains just base features to verify base HOT support.</screen>
                <para>Note that the right angle bracket
                        (<code>></code>) after
                        <code>description:</code> allows the
                    description to be continued over multiple
                    lines.</para>
            </section>
            <section xml:id="parameter_groups_d1e436">
                <title>Parameter Groups</title>
                <para>The <code>parameter_groups</code> section allows
                    for specifying how the input parameters should be
                    grouped and the order in which to provide the
                    parameters. These groups are typically used to
                    describe expected behavior for downstream user
                    interfaces.</para>
                <para>These groups are specified in a list with each
                    group containing a list of associated parameters.
                    The lists are used to denote the expected order of
                    the parameters. Each parameter should be
                    associated to a specific group only once using the
                    parameter name to bind it to a defined parameter
                    in the <code>parameters</code> section.</para>
                <screen language="bash"> parameter_groups:
- label: &lt;human-readable label of parameter group>
  description: &lt;description of the parameter group>
  parameters:
  - &lt;param name>
  - &lt;param name> </screen>
                <variablelist>
                    <varlistentry>
                        <term><code>label</code></term>
                        <listitem>
                            <para>A human-readable label that defines
                                the associated group of
                                parameters.</para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><code>description</code></term>
                        <listitem>
                            <para>This attribute allows for giving a
                                human-readable description of the
                                parameter group.</para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><code>parameters</code></term>
                        <listitem>
                            <para>A list of parameters associated with
                                this parameter group.</para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><replaceable>param name</replaceable></term>
                        <listitem>
                            <para>The name of the parameter that is
                                defined in the associated
                                   <code>parameters</code>
                                section.</para>
                        </listitem>
                    </varlistentry>
                </variablelist>
            </section>
            <section xml:id="parameters_section_d1e753">
                <title>Parameters</title>
                <para>The <code>parameters</code> section allows for
                    specifying input parameters that must be provided
                    when instantiating the template. Such parameters
                    are typically used to customize each deployment,
                    for example by setting custom user names or
                    passwords or for binding to environment-specifics
                    like certain images. Each parameter is specified
                    in a separated nested block with the name of the
                    parameter defined in the first line and additional
                    attributes such as <code>type</code> or
                        <code>default</code> defined as nested
                    elements.</para>
                <screen language="bash"> parameters:
  &lt;param name>:
    type: &lt;string | number | json | comma_delimited_list>
    description: &lt;description of the parameter>
    default: &lt;default value for parameter>
    hidden: &lt;true | false>
    constraints:
      &lt;parameter constraints> </screen>
                <para>The <replaceable>param name</replaceable> and
                        <code>type</code> attributes are required for
                    each parameter. Other attributes are
                    optional.</para>
                <variablelist>
                    <varlistentry>
                        <term><replaceable>param name</replaceable></term>
                        <listitem>
                            <para>The name of the parameter is defined
                                at the top of each parameter
                                block.</para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><code>type</code></term>
                        <listitem>
                            <para>This attribute specifies the type of
                                parameter. Currently supported types
                                are <code>string</code>,
                                   <code>number</code>,
                                   <code>comma_delimited_list</code>,
                                or <code>json</code>.</para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><code>description</code></term>
                        <listitem>
                            <para>This <emphasis role="italic"
                                   >optional</emphasis> attribute
                                allows for giving a human readable
                                description of the parameter.</para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><code>default</code></term>
                        <listitem>
                            <para>This <emphasis role="italic"
                                   >optional</emphasis> attribute
                                allows for defining a default value
                                for the parameters that will be used
                                in the case when the parameter is not
                                specified by the user during
                                deployment.</para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><code>hidden</code></term>
                        <listitem>
                            <para>This <emphasis role="italic"
                                   >optional</emphasis> attribute
                                allows for specifying whether the
                                parameters should be hidden when
                                showing information about a stack
                                created from the template at runtime
                                (for example to support hiding
                                passwords that were specified as
                                parameters). If not specified, the
                                default value <code>false</code> will
                                be used.</para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><code>constraints</code></term>
                        <listitem>
                            <para>This <emphasis role="italic"
                                   >optional</emphasis> block allows
                                for specifying additional constraints
                                on the parameter, such as minimum or
                                maximum values for numeric
                                parameters.</para>
                        </listitem>
                    </varlistentry>
                </variablelist>
                <para>The following example shows a simple definition
                    of two parameters: <code>user_name</code> and
                        <code>port_number</code>. Note that the
                    description is actually optional, but it is good
                    practice to provide a useful description for each
                    parameter.</para>
                <screen language="bash"> parameters:
  user_name:
    type: string
    description: User name to be configured for the application
  port_number:
    type: number
    description: Port number to be configured for the web server </screen>
            </section>
            <section xml:id="parameter_constraints_d1e264">
                <title>Parameter Constraints</title>
                <para>The <code>constraints</code> block of a
                    parameter definition allows for defining
                    additional validation constraints that apply to
                    the value of the parameter. At instantiation time
                    of the template, user-provided parameter values
                    are validated against those constraints to make
                    sure the values provided match the requirements
                    specified by the template author. Constraints are
                    defined in the form of a bulleted list according
                    to the following syntax:</para>
                <screen language="bash"> constraints:
  - &lt;constraint type>: &lt;constraint definition>
    description: &lt;constraint description> </screen>
                <variablelist>
                    <varlistentry>
                        <term><replaceable>constraint type</replaceable></term>
                        <listitem>
                            <para>The <replaceable>constraint
                                   type</replaceable> specifies the
                                kind of constraint defined in the
                                current bulleted list item (marked by
                                the dash '-' in the example). </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><replaceable>constraint
                            definition</replaceable></term>
                        <listitem>
                            <para>This value defines the actual
                                constraint, depending on the
                                constraint type. </para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><code>description</code></term>
                        <listitem>
                            <para>This <emphasis role="italic"
                                   >optional</emphasis> attribute
                                allows for specifying a concrete
                                description of the current constraint.
                                This text will be presented to the
                                user, for example, when the provided
                                input value for a parameter violates
                                the constraint. If omitted, a default
                                validation message will be presented
                                to the user.</para>
                        </listitem>
                    </varlistentry>
                </variablelist>
                <para>The set of currently supported constraints and
                    the concrete syntax for each constraint type is
                    shown following the example below.</para>
                <para>The following example shows the definition of a
                    string parameter with two constraints. Note that
                    while the descriptions for each constraint are
                    optional, it is good practice to provide concrete
                    descriptions so useful messages can be presented
                    to the user at deployment time.</para>
                <screen language="bash"> parameters:
  user_name:
    type: string
    description: User name to be configured for the application
    constraints:
      - length: { min: 6, max: 8 }
        description: User name must be between 6 and 8 characters
      - allowed_pattern: "[A-Z]+[a-zA-Z0-9]*"
        description: User name must start with an uppercase character </screen>
                <para>The supported types of parameter constraints,
                    along with the concrete syntax for each type, are
                    as follows:</para>
                <variablelist>
                    <varlistentry>
                        <term><code>length</code></term>
                        <listitem>
                            <para>The <code>length</code> constraint
                                applies to parameters of type
                                   <code>string</code> and allows for
                                defining a lower and upper limit for
                                the length of the string value. The
                                syntax for the length constraint
                                is:<screen language="bash">  length: { min: &lt;lower limit>, max: &lt;upper limit> } </screen>It
                                is possible to define a length
                                constraint with only a lower limit or
                                an upper limit, however, at least one
                                of <code>min</code> or
                                   <code>max</code> must be
                                specified.</para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><code>range</code></term>
                        <listitem>
                            <para>The <code>range</code> constraint
                                applies to parameters of type
                                   <code>number</code> and allows for
                                defining a lower and upper limit for
                                the numeric value of the parameter.
                                The syntax of the range constraint
                                is:<screen language="bash">   range: { min: &lt;lower limit>, max: &lt;upper limit> } </screen>It
                                is possible to define a range
                                constraint with only a lower limit or
                                an upper limit, however, at least one
                                of <code>min</code> or
                                   <code>max</code> must be specified.
                                The minimum or maximum boundaries are
                                included in the range. For example,
                                the following range constraint would
                                allow for all numeric values between 0
                                and
                                10:<screen language="bash">    range: { min: 0, max: 10 } </screen></para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><code>allowed_values</code></term>
                        <listitem>
                            <para>The <code>allowed_values</code>
                                constraint applies to parameters of
                                type <code>string</code> or
                                   <code>number</code> and allows for
                                specifying a set of possible values
                                for a parameter. At deployment time,
                                the user-provided value for the
                                respective parameter must match one of
                                the elements of the specified list.
                                The syntax of the
                                   <code>allowed_values</code>
                                constraint
                                is:<screen language="bash"> allowed_values: [ &lt;value>, &lt;value>, ... ] </screen>Alternatively,
                                the YAML bulleted list notation can be
                                used:<screen language="bash"> allowed_values:
  - &lt;value>
  - &lt;value>
  - ... </screen>For
                                example:<screen language="bash"> parameters:
  instance_type:
    type: string
    description: Instance type for compute instances
    constraints:
      allowed_values:
        - 1GB Standard Instance
        - 2GB Standard Instance
        - 4GB Standard Instance </screen></para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><code>allowed_pattern</code></term>
                        <listitem>
                            <para>The <code>allowed_pattern</code>
                                constraint applies to parameters of
                                type <code>string</code> and allows
                                for specifying a regular expression
                                that a user-provided parameter value
                                must match at deployment. The syntax
                                of the <code>allowed_pattern</code>
                                constraint
                                is:<screen language="bash">  allowed_pattern: &lt;regular expression> </screen>For
                                example:<screen language="bash">  parameters:
  user_name:
    type: string
    description: User name to be configured for the application
    constraints:
      - allowed_pattern: "[A-Z]+[a-zA-Z0-9]*"
        description: User name must start with an uppercase character
  </screen></para>
                        </listitem>
                    </varlistentry>
                </variablelist>
            </section>
            <section xml:id="resources_d1e142">
                <title>Resources</title>
                <para>In the <code>resources</code> section, the
                    templates for actual resources that will make up a
                    stack deployed from the Orchestration template
                    (for example compute instances, networks, storage
                    volumes) are defined. Each resource is defined as
                    a separate block in the resources section
                    according to the syntax below:</para>
                <screen language="bash"> resources:
  &lt;resource ID>:
    type: &lt;resource type>
    properties:
      &lt;property name>: &lt;property value>
    # more resource-specific metadata </screen>
                <variablelist>
                    <varlistentry>
                        <term><replaceable>resource ID</replaceable></term>
                        <listitem>
                            <para>A resource block is headed by the
                                   <replaceable>resource
                                   ID</replaceable>, which must be
                                unique within the resource section of
                                a template.</para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><code>type</code></term>
                        <listitem>
                            <para>This attribute specifies the type of
                                resource, such as
                                   <code>Rackspace::Cloud::Server</code>.</para>
                            <note>
                                <para>To find the various types of
                                   supported template resources, use
                                   the List resource types API
                                   operation (&GET; <emphasis
                                   role="bold"
                                   >/resource_types</emphasis>). The
                                   cURL command for this operation is
                                   (make sure to use the correct
                                   values for your
                                   <code>X-Auth-Token</code> and
                                   <code>tenant_id</code>):</para>
                                <programlisting>curl -i -X GET -H 'X-Auth-Token: xxxxxx' -H 'Content-Type: application/json' -H 'Accept: application/json'  https://dfw.orchestration.rackspacecloud.com/v1/&lt;tenant_id>/resource_types</programlisting>
                            </note>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><code>properties</code></term>
                        <listitem>
                            <para>This section contains a list of
                                resource-specific properties. The
                                property value can be provided in
                                place, or can be provided via a
                                function (see <xref
                                   linkend="intrinsic_functions_d1e725"
                                />). Depending on the type of
                                resource, the resource block might
                                include more resource-specific
                                metadata. Below is an example of a
                                simple compute resource definition
                                with some property values
                                fixed.<screen language="bash"> resources:
  my_instance:
    type: Rackspace::Cloud::Server
    properties:
      flavor: 1GB Standard Instance
      image: CentOS 6.4 </screen></para>
                        </listitem>
                    </varlistentry>
                </variablelist>
            </section>
            <section xml:id="outputs_d1e725">
                <title>Outputs</title>
                <para>In the <code>outputs</code> section, any output
                    parameters that should be available to the user
                    can be defined. Typically, this would be
                    parameters such as IP addresses of deployed
                    instances, or URLs of web applications deployed as
                    part of a stack. Each output parameter is defined
                    as a separate block within the outputs section
                    according to the following syntax:</para>
                <screen language="bash">  outputs:
  &lt;parameter name>:
    description: &lt;description>
    value: &lt;parameter value> </screen>
                <variablelist>
                    <varlistentry>
                        <term><replaceable>parameter name</replaceable></term>
                        <listitem>
                            <para>An output parameter block is headed
                                by the output parameter name, which
                                must be unique within the outputs
                                section of a template.</para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><code>description</code></term>
                        <listitem>
                            <para>This element gives a short
                                description of the output
                                parameter.</para>
                        </listitem>
                    </varlistentry>
                    <varlistentry>
                        <term><code>value</code></term>
                        <listitem>
                            <para>This element specifies the
                                   <replaceable>parameter
                                   value</replaceable> of the output
                                parameter. Typically, this will be
                                resolved by means of a function, for
                                example by getting an attribute value
                                of one of the stack's resources (see
                                also <xref
                                   linkend="intrinsic_functions_d1e725"
                                />).</para>
                            <para>The example below shows how the IP
                                address of a compute resource can be
                                defined as an output
                                parameter.<screen language="bash">  outputs:
  instance_ip:
    description: IP address of the deployed compute instance
    value: { get_attr: [my_instance, accessIPv4] }  </screen></para>
                        </listitem>
                    </varlistentry>
                </variablelist>
                <para>You will be able to view the value for the
                    output parameter defined above when you view the
                    response received from calling the API operation
                    Get stack data. Refer to the <citetitle>Getting
                        Started Guide</citetitle> for an
                    example.</para>
                <remark>Reviewer: need to add link in previous
                    sentence.</remark>
            </section>
            <section xml:id="intrinsic_functions_d1e725">
                <title>Intrinsic Functions</title>
                <para>&Checkmate; provides a set of intrinsic
                    functions that can be used inside &Checkmate;
                    templates to perform specific tasks, such as
                    getting the value of a resource attribute at
                    runtime. A definition of all intrinsic functions
                    available in &Checkmate; is given below.</para>
                <section xml:id="get_param_intrinsic_function">
                    <title>get_param</title>
                    <para>The <code>get_param</code> function allows
                        for referencing an input parameter of a
                        template from anywhere within a template. At
                        runtime, it will be resolved to the value
                        provided for this input parameter. The syntax
                        of the <code>get_param</code> function is as
                        follows:</para>
                    <screen language="bash"> get_param: &lt;parameter name> </screen>
                    <para>The <replaceable>parameter
                            name</replaceable> of the input parameter
                        to be resolved is given as a single parameter
                        to this function. A sample use of this
                        function in context of a resource definition
                        is shown below:</para>
                    <screen language="bash">  parameters:
  instance_type:
    type: string
    description: Instance type to be used.

resources:
  my_instance:
    type: Rackspace::Cloud::Server
    properties:
      flavor: { get_param: instance_type}
 </screen>
                </section>
                <section xml:id="get_attr_intrinsic_function">
                    <title>get_attr</title>
                    <para>The <code>get_attr</code> function allows
                        for referencing an attribute of a resource. At
                        runtime, it will be resolved to the value of
                        an attribute of a resource instance created
                        from the respective resource definition of the
                        template. The syntax of the
                            <code>get_attr</code> function is as
                        follows:</para>
                    <screen language="bash">  get_attr: [ &lt;resource ID>, &lt;attribute name> ]  </screen>
                    <variablelist>
                        <varlistentry>
                            <term><replaceable>resource ID</replaceable></term>
                            <listitem>
                                <para>This parameter specifies the
                                   resource the attribute of which
                                   shall be resolved. This resource
                                   must be defined within the
                                   <emphasis role="italic"
                                   >resources</emphasis> section of
                                   the template (see  <xref
                                   linkend="resources_d1e142"
                                   />).</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><replaceable>attribute name</replaceable></term>
                            <listitem>
                                <para>This parameter specifies the
                                   attribute to be resolved.</para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </section>
                <section xml:id="get_resource_intrinsic_function">
                    <title>get_resource</title>
                    <para>The <code>get_resource</code> function
                        allows for referencing another resource within
                        the same template. At runtime, it will be
                        resolved to the reference ID of the resource,
                        which is resource type specific. For example,
                        a reference to a floating IP resource will
                        return the respective IP address at runtime.
                        The syntax of the <code>get_resource</code>
                        function is as follows:</para>
                    <screen language="bash">   get_resource: &lt;resource ID> </screen>
                    <variablelist>
                        <varlistentry>
                            <term><replaceable>resource ID</replaceable></term>
                            <listitem>
                                <para>The <replaceable
                                   >resource ID</replaceable> of the
                                   referenced resources as used in the
                                   current template is specified as
                                   the single parameter to the
                                   <code>get_resource</code>
                                   function.</para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                    <para>An example of using the
                            <code>get_attr</code> function is shown
                        below:<screen language="bash"> resources:
  my_instance:
    type: Rackspace::Cloud::Server
    # ...

outputs:
  instance_ip:
    description: IP address of the deployed compute instance
    value: { get_attr: [my_instance, accessIPv4] } </screen></para>
                </section>
                <section xml:id="str_replace_intrinsic_function">
                    <title>str_replace</title>
                    <para>The <code>str_replace</code> function allows
                        for dynamically constructing strings by
                        providing a template string with placeholders
                        and a list of mappings to assign values to
                        those placeholders at runtime. The
                        placeholders are replaced with mapping values
                        wherever a mapping key exactly matches a
                        placeholder. The syntax of the
                            <code>str_replace</code> function is as
                        follows:</para>
                    <screen language="bash"> str_replace:
  template: &lt;template string>
  params: &lt;parameter mappings> </screen>
                    <variablelist>
                        <varlistentry>
                            <term><code>template</code></term>
                            <listitem>
                                <para>The <code
                                   >template</code> argument
                                   defines the template string that
                                   contains placeholders which will be
                                   substituted at runtime.</para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term><code>params</code></term>
                            <listitem>
                                <para>The <code>params</code> argument
                                   provides parameter mappings in the
                                   form of a dictionary that will be
                                   used for placeholder substitution
                                   in the <replaceable>template
                                   string</replaceable> at runtime.
                                   Within <replaceable>parameter
                                   mappings</replaceable> one can make
                                   use of other functions (for example
                                   <code>get_attr</code> to use
                                   resource attribute values) for
                                   template substitution.</para>
                                <para>The example below shows a simple
                                   use of the <code>str_replace</code>
                                   function in the
                                   <code>outputs</code> section of a
                                   template to build a URL for logging
                                   into a deployed application:</para>
                                <screen language="bash"> resources:
  my_instance:
    type: Rackspace::Cloud::Server
    # general metadata and properties ...

outputs:
  Login_URL:
    description: The URL to log into the deployed application
    value:
      str_replace:
        template: http://host/MyApplication
        params:
          host: { get_attr: [ my_instance, accessIPv4 ] } </screen>
                                <para>The <code>str_replace</code>
                                   works like a simple substitution.
                                   It uses the <code>params</code>
                                   section to replace corresponding
                                   strings in the template section. So
                                   in the example above, the host
                                   portion of the URL
                                   (http://<emphasis role="bold"
                                   >host</emphasis>/MyApplication) is
                                   replaced by value returned from
                                   calling the <code>get_attr</code>
                                   function, which is the IP address
                                   (<code>accessIPv4</code>) of the
                                   server instance
                                   (<code>my_instance</code>).</para>
                                <para>The <code>str_replace</code>
                                   function can also be used for
                                   constructing bigger chunks of text
                                   such as scripts for initializing
                                   compute instances, as shown in the
                                   example
                                   below:<screen language="bash">  parameters:
  DBRootPassword:
    type: string
    description: Root password for MySQL
    hidden: true

resources:
  my_instance:
    type: Rackspace::Cloud::Server
    properties:
      # general properties ...
      user_data:
        str_replace:
          template: |
            #!/bin/bash
            echo "Hello world"
            echo "Setting MySQL root password"
            mysqladmin -u root password $db_rootpassword
            # do more things ...
          params:
            $db_rootpassword: { get_param: DBRootPassword } </screen>In
                                   the example above, assume that
                                   MySQL is being configured on a
                                   compute instance and the root
                                   password is going to be set based
                                   on a user-provided parameter. The
                                   script for doing this is provided
                                   as <code>user_data</code> to the
                                   compute instance, leveraging the
                                   <code>str_replace</code>
                                   function.</para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </section>
            </section>
        </section>
    </chapter>
    <chapter xml:id="Simple_Template_Example-d1e637">
        <title>Simple Template Example</title>
        <para>This chapter gives an introduction on how to write HOT
            (Heat Orchestration Template) templates, starting from
            very basic steps and then going into more and more detail
            by means of examples. A detailed specification of HOT can
            be found in <xref linkend="Intro_to_Templates-d1e633"
            />.</para>
        <section xml:id="Basic_Template_Example-d1e637">
            <title>A Most Basic Template</title>
            <para>The most basic template possible may contain only a
                single resource definition using only predefined
                properties (along with the mandatory Heat template
                version tag). For example, the template below could be
                used to simply deploy a single compute
                instance:</para>
            <screen> heat_template_version: 2013-05-23

description: Simple template to deploy a single compute instance

resources:
  my_instance:
    type: Rackspace::Cloud::Server
    properties:
      key_name: my_key
      image: CentOS 6.4
      flavor: 1GB Standard Instance </screen>
            <para>Each HOT template has to include the <emphasis
                    role="italic">heat_template_version</emphasis> key
                with value '2013-05-23' (the current version of HOT).
                While the <emphasis role="italic"
                    >description</emphasis> is optional, it is good
                practice to include some useful text that describes
                what users can do with the template. In case you want
                to provide a longer description that does not fit on a
                single line, you can provide multi-line text in YAML,
                for
                example:<screen>  description: >
    This is how you can provide a longer description
    of your template that goes over several lines.  </screen></para>
            <para>The <emphasis role="italic">resources</emphasis>
                section is required and must contain at least one
                resource definition. In the example above, a compute
                instance is defined with hard-coded values for the
                    <code>key_name</code>, <code>image</code>, and
                    <code>flavor</code> parameters.</para>
            <para>Note that all those elements &ndash; a key-pair with
                the given name, the image, and the flavor &ndash; must
                exist in the Rackspace environment where the template
                is used. Typically a template is made more easily
                reusable, however, by defining a set of <emphasis
                    role="italic">input parameters</emphasis> rather
                than hard-coding such values.</para>
        </section>
        <section xml:id="Template_Input_Parameters-d1e143">
            <title>Template Input Parameters</title>
            <para>Input parameters defined in the <emphasis
                    role="italic">parameters</emphasis> section of an
                &Checkmate; template  allow users to customize a
                template during deployment (see also <xref
                    linkend="parameters_section_d1e753"/>). For
                example, this allows for providing custom key-pair
                names or image IDs to be used for a deployment. From a
                template author's perspective, this helps to make a
                template more easily reusable by avoiding hard-coded
                assumptions.</para>
            <para>Continuing with the example used above, it makes
                sense to allow users to provide their custom
                key-pairs, to provide their own image, and to select a
                flavor for the compute instance. This can be achieved
                by extending the initial template as follows:</para>
            <screen> heat_template_version: 2013-05-23

description: Simple template to deploy a single compute instance

parameters:
  key_name:
    type: string
    description: Name of key-pair to be used for compute instance
  image_id:
    type: string
    description: Image to be used for compute instance
  instance_type:
    type: string
    description: Type of instance (flavor) to be used

resources:
  my_instance:
    type: Rackspace::Cloud::Server
    properties:
      key_name: { get_param: key_name }
      image: { get_param: image_id }
      flavor: { get_param: instance_type } </screen>
            <para>In the example above, three input parameters have
                been defined that must be provided by the user at
                deployment. The fixed values for the respective
                resource properties have been replaced by references
                to the corresponding input parameters by means of the
                    <code>get_param</code> function (see also <xref
                    linkend="intrinsic_functions_d1e725"/>).</para>
            <para>You can also define default values for input
                parameters which will be used in case the user does
                not provide the respective parameter during
                deployment. For example, the following definition for
                the <code>instance_type</code> parameter would select
                the <code>1GB Standard Instance</code> flavor by
                default unless specified otherwise by the user:</para>
            <screen> parameters:
  instance_type:
    type: string
    description: Type of instance (flavor) to be used
    default: 1GB Standard Instance</screen>
            <para>Another option that can be specified for a parameter
                is to hide its value when users request information
                about a stack deployed from a template. This is
                achieved by the <code>hidden</code> attribute and
                useful, for example, when requesting passwords as user
                input:</para>
            <screen> parameters:
  database_password:
    type: string
    description: Password to be used for database
    hidden: true </screen>
            <para>This extends our example as follows:</para>
            <screen> heat_template_version: 2013-05-23

description: Simple template to deploy a single compute instance

parameters:
  key_name:
    type: string
    description: Name of key-pair to be used for compute instance
  image_id:
    type: string
    description: Image to be used for compute instance
  instance_type:
    type: string
    description: Type of instance (flavor) to be used
    <emphasis role="bold">default: 1GB Standard Instance </emphasis>
  <emphasis role="bold">database_password:
    type: string
    description: Password to be used for database
    hidden: true</emphasis>

resources:
  my_instance:
    type: Rackspace::Cloud::Server
    properties:
      key_name: { get_param: key_name }
      image: { get_param: image_id }
      flavor: { get_param: instance_type } </screen>
            <section xml:id="Restricting_User_Input-d1e387">
                <title>Restricting User Input</title>
                <para>In some cases you might want to restrict the
                    values of input parameters that users can supply.
                    For example, you might know that the software
                    running in a compute instance needs a certain
                    amount of resources, so you might want to restrict
                    the <emphasis role="italic"
                        >instance_type</emphasis> parameter introduced
                    above. Parameters in HOT templates can be
                    restricted by adding a <emphasis role="italic"
                        >constraints</emphasis> section (see also
                        <xref linkend="parameter_constraints_d1e264"
                    />). For example, the following would allow only
                    three values to be provided as input for the
                        <emphasis role="italic"
                        >instance_type</emphasis> parameter:</para>
                <screen> parameters:
  instance_type:
    type: string
    description: Type of instance (flavor) to be used
    default: m1.small 
    constraints:
      - allowed_values: [ 1GB Standard Instance, 2GB Standard Instance, 4GB Standard Instance ]
        description: Value must be one of 1GB Standard Instance, 2GB Standard Instance, or 4GB Standard Instance. </screen>
                <para>The <code
                        >constraints</code> section allows for
                    defining a list of constraints that must all be
                    fulfilled by user input. For example, the
                    following list of constraints could be used to
                    clearly specify format requirements on a password
                    to be provided by users:</para>
                <screen> parameters:
  database_password:
    type: string
    description: Password to be used for database
    hidden: true
    constraints:
      - length: { min: 6, max: 8 }
        description: Password length must be between 6 and 8 characters.
      - allowed_pattern: "[a-zA-Z0-9]+"
        description: Password must consist of characters and numbers only.
      - allowed_pattern: "[A-Z]+[a-zA-Z0-9]*"
        description: Password must start with an uppercase character. </screen>
                <para>This now extends our example as shown
                    below:</para>
                <screen> heat_template_version: 2013-05-23

description: Simple template to deploy a single compute instance

parameters:
  key_name:
    type: string
    description: Name of key-pair to be used for compute instance
  image_id:
    type: string
    description: Image to be used for compute instance
  instance_type:
    type: string
    description: Type of instance (flavor) to be used
    default: m1.small
    <emphasis role="bold">constraints:
      - allowed_values: [ 1GB Standard Instance, 2GB Standard Instance, 4GB Standard Instance ]
        description: Value must be one of 1GB Standard Instance, 2GB Standard Instance, or 4GB Standard Instance. </emphasis>
  database_password:
    type: string
    description: Password to be used for database
    hidden: true
    <emphasis role="bold">constraints:
      - length: { min: 6, max: 8 }
        description: Password length must be between 6 and 8 characters.
      - allowed_pattern: "[a-zA-Z0-9]+"
        description: Password must consist of characters and numbers only.
      - allowed_pattern: "[A-Z]+[a-zA-Z0-9]*"
        description: Password must start with an uppercase character. </emphasis>

resources:
  my_instance:
    type: Rackspace::Cloud::Server
    properties:
      key_name: { get_param: key_name }
      image: { get_param: image_id }
      flavor: { get_param: instance_type } </screen>
                <para>Note that you can define multiple constraints of
                    the same type. Especially in the case of allowed
                    patterns this not only allows for keeping regular
                    expressions simple and maintainable, but also for
                    keeping error messages to be presented to users
                    precise.</para>
            </section>
        </section>
        <section xml:id="Providing_Template_Output-d1e423">
            <title>Providing Template Output</title>
            <para>In addition to template customization through input
                parameters, you will typically want to provide outputs
                to users, which can be done in the
                    <code>outputs</code> section of a template (see
                also <xref linkend="outputs_d1e725"/>). </para>
            <para>For example, the IP address by which the instance
                defined in the example above can be accessed
                    (<code>instance_ip</code>) should be provided to
                users. Otherwise, users would have to look it up
                themselves. The definition for providing the IP
                address of the compute instance as an output is shown
                below:</para>
            <screen>  outputs:
  instance_ip:
    description: The IP address of the deployed instance
    value: { get_attr: [my_instance, accessIPv4] }  </screen>
            <para>Output values are typically resolved using intrinsic
                function such as the <code>get_attr</code> function in
                the example above (see also <xref
                    linkend="intrinsic_functions_d1e725"/>).</para>
            <para>You can look up the names for the supported
                attributes for resources (for example
                    <code>accessIPv4</code> in the example above)
                here: <link
                    xlink:href="http://docs.openstack.org/developer/heat/template_guide/index.html"
                    >http://docs.openstack.org/developer/heat/template_guide/index.html</link>.</para>
            <para>Outputs can be viewed using the Get stack data API
                call (&GET; <emphasis role="bold"
                    >/stacks{/stack_name}{/stack_id}</emphasis>) after
                the stack is created. Refer to the <citetitle>Cloud
                    Orchestration Getting Started Guide</citetitle>
                for an example.</para>
            <remark>Writer: please add the link to the GS Guide (Step
                8. Show Stack Details) once the path is
                known.</remark>
            <para>Our completed simple template example is shown
                below:</para>
            <screen> heat_template_version: 2013-05-23

description: Simple template to deploy a single compute instance

parameters:
  key_name:
    type: string
    description: Name of key-pair to be used for compute instance
  image_id:
    type: string
    description: Image to be used for compute instance
  instance_type:
    type: string
    description: Type of instance (flavor) to be used
    default: m1.small
    constraints:
      - allowed_values: [ 1GB Standard Instance, 2GB Standard Instance, 4GB Standard Instance ]
        description: Value must be one of 1GB Standard Instance, 2GB Standard Instance, or 4GB Standard Instance.
  database_password:
    type: string
    description: Password to be used for database
    hidden: true
    constraints:
      - length: { min: 6, max: 8 }
        description: Password length must be between 6 and 8 characters.
      - allowed_pattern: "[a-zA-Z0-9]+"
        description: Password must consist of characters and numbers only.
      - allowed_pattern: "[A-Z]+[a-zA-Z0-9]*"
        description: Password must start with an uppercase character. 

resources:
  my_instance:
    type: Rackspace::Cloud::Server
    properties:
      key_name: { get_param: key_name }
      image: { get_param: image_id }
      flavor: { get_param: instance_type } 

<emphasis role="bold">outputs:
  instance_ip:
    description: The IP address of the deployed instance
    value: { get_attr: [my_instance, accessIPv4] } </emphasis> </screen>
        </section>
    </chapter>
    <chapter xml:id="Environment-d1e429">
        <title>Environment</title>
        <para>The environment is used to affect the runtime behavior
            of the template. It provides a way to override the default
            resource implementation and the parameters passed to
            &Checkmate;.</para>
        <para>The environment is a yaml text file with two main
            sections: <code>resource_registry</code> and
                <code>parameters</code>.</para>
        <para>Using the environment file (called
                <code>my_env.yaml</code> in the example below) from
            the command line when creating a stack is shown in the
            following example:</para>
        <screen>  heat stack-create -e my_env.yaml -P "some_parm=bla" -f my_tmpl.yaml </screen>
        <section xml:id="Environment_Usage_Examples-d1e429">
            <title>Usage Examples</title>
            <para>Various uses for the environment are shown
                below:</para>
            <itemizedlist>
                <title>Pass Parameters into &Checkmate;</title>
                <listitem>
                    <para>The following example passes three
                        parameters <code>KeyName</code>,
                            <code>InstanceType</code>, and
                            <code>ImageId</code> into &Checkmate;,
                        overriding any values for these parameters
                        that are defined in the
                        template:<screen> parameters:
  KeyName: heat_key
   flavor: 2GB Standard
   image: CentOS 6.2 </screen></para>
                </listitem>
            </itemizedlist>
            <note>
                <para>As an alternative to passing parameter values in
                    the request body directly, you may also pass
                    parameters as part of the environment file. This
                    allows you to have a common set of parameter
                    values that you may pass to several different
                    templates.</para>
            </note>
            <itemizedlist>
                <title> Override a Resource Type with a Custom
                    TemplateResource</title>
                <listitem>
                    <screen> resource_registry:
  "Rackspace::Cloud::Server": file:///home/mine/my_instance_with_better_defaults.yaml 
 </screen>
                    <para>Heat allows you to implement resources using
                        your own template to map parameters and
                        outputs to resource properties and attributes.
                        Using the environment, you can substitute your
                        template resource for one of the plug-in
                        resources provided by Heat.</para>
                </listitem>
            </itemizedlist>
            <itemizedlist>
                <title>Always Map Resource Type X to Y</title>
                <listitem>
                    <screen> resource_registry:
  "OS::Networking::FloatingIP": "OS::Nova::FloatingIP" </screen>
                    <para>If your Heat implementation provides
                        multiple compatible plug-ins for various
                        resources, you can use the environment to map
                        one onto the other forcing Heat to pick a
                        specific one.</para>
                </listitem>
            </itemizedlist>
            <itemizedlist>
                <title>Use Default Resources Except One For a
                    Particular Resource in the Template</title>
                <listitem>
                    <screen> resource_registry:
  resources:
    my_db_server:
      "OS::Trove::Instance": file:///home/mine/all_my_cool_templates/db.yaml</screen>
                    <para>You may also use the environment to override
                        the implementation of one particular resource
                        in the template rather than all resources of a
                        particular type.</para>
                </listitem>
            </itemizedlist>
            <remark>Reviewer: Could you please provide a descriptive
                paragraph explaining each of the Usage Examples listed
                above?</remark>
        </section>
    </chapter>
    <chapter xml:id="Builtin_Functions-d1e397" security="writeronly">
        <title>Built-in Functions</title>
        <remark>Reviewer: this comment applies to this entire chapter.
            When listing parameters, String is always capitalized,
            Integer is capitalized, but other types such as list and
            map are not. Is this correct?</remark>
        <remark linkend="intrinsic_functions_d1e725">Reviewer: can you
            please explain the difference between instrinsic functions
            (as defined in <xref linkend="intrinsic_functions_d1e725"
            />) and built-in functions so I can add the explanation
            here?</remark>
        <para>There are a number of built-in functions that you can
            use to help you write templates. </para>
        <para>All of these functions (except <code>Ref</code>) start
            with <code>Fn::</code>.</para>
        <section xml:id="Ref_Builtin_Function-d1e937">
            <title>Ref</title>
            <para><code>Ref</code> returns the value of the named
                parameter or resource.</para>
            <para><emphasis role="bold">
                Parameters</emphasis></para>
            <variablelist>
                <varlistentry>
                    <term><replaceable>name:
                        String</replaceable></term>
                    <listitem>
                        <para>Specifies the name of the Resource or
                            Parameter.</para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <para><emphasis role="bold"> Usage</emphasis></para>
            <screen> {Ref: my_server} </screen>
            <para><code>Ref</code> returns the nova instance ID for
                the server, for example
                    <code>d8093de0-850f-4513-b202-7979de6c0d55</code>.</para>
        </section>
        <section xml:id="Fn_Base64_Builtin_Function-d1e937">
            <title>Fn::Base64</title>
            <para><code>Fn::Base64</code> returns the Base64
                representation of the input string.</para>
            <para><emphasis role="bold"> Parameters</emphasis></para>
            <variablelist>
                <varlistentry>
                    <term><replaceable>value:
                        string</replaceable></term>
                    <listitem>
                        <para>Specifies the string to convert.</para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <para><emphasis role="bold"> Usage</emphasis></para>
            <screen> {Fn::Base64: "convert this string please."} </screen>
            <para><code>Fn::Base64</code> returns the Base64
                representation of the input string.</para>
        </section>
        <section xml:id="Fn_FindInMap_Builtin_Function-d1e937">
            <title>Fn::FindInMap</title>
            <para><code>Fn::FindInMap</code> returns the value
                corresponding to keys into a two-level map declared in
                the <code>Mappings</code> section.</para>
            <remark>Reviewer: where is the Mappings section defined?
                Is that an additional section that is added to the
                template?</remark>
            <para><emphasis role="bold"> Parameters</emphasis></para>
            <variablelist>
                <varlistentry>
                    <term><replaceable>map_name:
                        string</replaceable></term>
                    <listitem>
                        <para>Specifies the logical name of a mapping
                            declared in the <code>Mappings</code>
                            section that contains the keys and
                            values.</para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <variablelist>
                <varlistentry>
                    <term><replaceable>top_level_key:
                            string</replaceable></term>
                    <listitem>
                        <para>Specifies the top-level key name. Its
                            value is a list of key-value pairs.</para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <variablelist>
                <varlistentry>
                    <term><replaceable>second_level_key:
                            string</replaceable></term>
                    <listitem>
                        <para>Specifies the second-level key name,
                            which is set to one of the keys from the
                            list assigned to top_level_key.</para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <para><emphasis role="bold"> Usage</emphasis></para>
            <screen> Mapping:
  MyContacts:
    jone: {phone: 337, email: a@b.com}
    jim: {phone: 908, email: g@b.com}

{"Fn::FindInMap": ["MyContacts", "jim", "phone" ] } </screen>
            <para><code>Fn::FindInMap</code> returns the value for the
                specified second level key associated with the
                designated top level key (in this example
                    <code>908</code>).</para>
        </section>
        <section xml:id="Fn_GetAtt_Builtin_Function-d1e937">
            <title>Fn::GetAtt</title>
            <para><code>Fn::GetAtt</code> returns an attribute of a
                resource within the template.</para>
            <para><emphasis role="bold"> Parameters</emphasis></para>
            <variablelist>
                <varlistentry>
                    <term><replaceable>resource:
                        string</replaceable></term>
                    <listitem>
                        <para>Specifies the name of the
                            resource.</para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <variablelist>
                <varlistentry>
                    <term><replaceable>attribute:
                        string</replaceable></term>
                    <listitem>
                        <para>Specifies the name of the
                            attribute.</para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <para><emphasis role="bold"> Usage</emphasis></para>
            <screen> {Fn::GetAtt: [my_server, PublicIp]}  </screen>
            <para><code>Fn::GetAtt</code> returns the value for the
                specified attribute (in this example an IP address
                such as <code>10.0.0.2</code>).</para>
        </section>
        <section xml:id="Fn_GetAZs_Builtin_Function-d1e937">
            <title>Fn::GetAZs</title>
            <para><code>Fn::GetAZs</code> returns the availability
                zones within the given region.</para>
            <note>
                <para>Availability zones and regions are not fully
                    implemented in &Checkmate;.<remark>Reviewer: does
                        this mean they cannot be used at this time and
                        should be hidden until
                    available?</remark></para>
            </note>
            <para><emphasis role="bold"> Parameters</emphasis></para>
            <variablelist>
                <varlistentry>
                    <term><replaceable>region:
                        string</replaceable></term>
                    <listitem>
                        <para>Specifies the name of the region.</para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <para><emphasis role="bold"> Usage</emphasis></para>
            <screen>  {Fn::GetAZs: ""} </screen>
            <para><code>Fn::GetAZs</code> returns the list provided by
                nova <code>availability-zone-list</code>.</para>
        </section>
        <section xml:id="Fn_Join_Builtin_Function-d1e532">
            <title>Fn::Join</title>
            <para><code>Fn::Join</code> joins a list of strings with
                the given delimiter, similar to python join.</para>
            <para><emphasis role="bold"> Parameters</emphasis></para>
            <variablelist>
                <varlistentry>
                    <term><replaceable>delimiter:
                        string</replaceable></term>
                    <listitem>
                        <para>Specifies the string with which to join
                            the list.</para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <variablelist>
                <varlistentry>
                    <term><replaceable>list: list</replaceable></term>
                    <listitem>
                        <para>Specifies the list to join.</para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <para><emphasis role="bold"> Usage</emphasis></para>
            <screen>  {Fn::Join: [",", ["beer", "wine", "more beer"]]}   </screen>
            <para><code>Fn::Join</code> returns the list of strings
                joined with the specified delimiter (in this example:
                    <code>beer, wine, more beer</code> ).</para>
        </section>
        <section xml:id="Fn_Select_Builtin_Function-d1e286">
            <title>Fn::Select</title>
            <para><code>Fn::Select</code> selects an item from a
                list.</para>
            <para><emphasis role="bold"> Parameters</emphasis></para>
            <variablelist>
                <varlistentry>
                    <term><replaceable>selector:
                        integer</replaceable></term>
                    <listitem>
                        <para>Specifies the number of the desired item
                            in the list. Note that the number is
                            zero-based, with the first item in the
                            list having number zero.</para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <variablelist>
                <varlistentry>
                    <term><replaceable>collection:
                        list</replaceable></term>
                    <listitem>
                        <para>Specifies the collection from which to
                            select the item.</para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <para><emphasis role="bold"> Usage</emphasis></para>
            <screen>  { "Fn::Select" : [ "2", [ "apples", "grapes", "mangoes" ] ] }
  </screen>
            <para><code>Fn::Select</code> returns the item selected by
                number from the list (in this example:
                    <code>mangoes</code> ).</para>
        </section>
        <section xml:id="Fn_Split_Builtin_Function-d1e286">
            <title>Fn::Split</title>
            <para><code>Fn::Split</code> converts a string into a list
                based on the delimiter. Provides the reverse operation
                to <code>Fn::Join</code>.</para>
            <para><emphasis role="bold"> Parameters</emphasis></para>
            <variablelist>
                <varlistentry>
                    <term><replaceable>delimiter:
                        string</replaceable></term>
                    <listitem>
                        <para>Specifies the matching string on which
                            to split the list.</para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <variablelist>
                <varlistentry>
                    <term><replaceable>string:
                        string</replaceable></term>
                    <listitem>
                        <para>Specifies the string to split.</para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <para><emphasis role="bold"> Usage</emphasis></para>
            <screen>   { "Fn::Split" : [ ",", "str1,str2,str3,str4"]}   </screen>
            <para><code>Fn::Split</code> returns the converted list
                (in this example: <code> {["str1", "str2", "str3",
                    "str4"]} </code> ).</para>
        </section>
        <section xml:id="Fn_Replace_Builtin_Function-d1e435">
            <title>Fn::Replace</title>
            <para><code>Fn::Replace</code> finds and replaces one
                string with another.</para>
            <para><emphasis role="bold"> Parameters</emphasis></para>
            <variablelist>
                <varlistentry>
                    <term><replaceable>substitutions:
                            map</replaceable></term>
                    <listitem>
                        <para>Specifies the map of
                            substitutions.</para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <variablelist>
                <varlistentry>
                    <term><replaceable>string:
                        string</replaceable></term>
                    <listitem>
                        <para>Specifies the string in which to do the
                            substitutions.</para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <para><emphasis role="bold"> Usage</emphasis></para>
            <screen>  {"Fn::Replace": [
 {'$var1': 'foo', '%var2%': 'bar'},
  '$var1 is %var2%'
]}
</screen>
            <para><code>Fn::Replace</code> returns the string with the
                replacements made (in this example: <code>"foo is
                    bar"</code> ).</para>
        </section>
        <section xml:id="Fn_ResourceFacade_Builtin_Function-d1e745">
            <title>Fn::ResourceFacade</title>
            <para><code>Fn::ResourceFacade</code> passes metadata in a
                top level template into the resource template.</para>
            <para><emphasis role="bold"> When Writing a Template
                    Resource</emphasis></para>
            <itemizedlist>
                <listitem>
                    <para>User writes a template that will fill in for
                        a resource (the resource is the
                        facade).</para>
                </listitem>
                <listitem>
                    <para>When users are writing their template they
                        need to access the metadata from the
                        facade.</para>
                </listitem>
            </itemizedlist>
            <para><emphasis role="bold"> Parameters</emphasis></para>
            <variablelist>
                <varlistentry>
                    <term><replaceable>attribute_name:
                            string</replaceable></term>
                    <listitem>
                        <para>One of <code>Metadata</code>,
                                <code>DeletionPolicy</code> or
                                <code>UpdatePolicy</code>.</para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <para><emphasis role="bold"> Usage</emphasis></para>
            <screen> {'Fn::ResourceFacade': 'Metadata'}
{'Fn::ResourceFacade': 'DeletionPolicy'}
{'Fn::ResourceFacade': 'UpdatePolicy'} 
</screen>
            <para><emphasis role="bold"> Example</emphasis></para>
            <para>Here is a top level template
                <code>top.yaml</code>:</para>
            <screen> resources:
  my_server:
    type: OS::Compute::Server
    metadata:
      key: value
      some: more stuff 
</screen>
            <para>Here is a resource template
                    <code>my_actual_server.yaml</code>:</para>
            <screen>  resources:
  _actual_server_:
    type: OS::Compute::Server
    metadata: {'Fn::ResourceFacade': Metadata} 
</screen>
            <para>Here is the environment file
                <code>env.yaml</code>:</para>
            <screen>  resource_registry:
  resources:
    my_server:
      "OS::Compute::Server": my_actual_server.yaml 
</screen>
            <para>To use it, enter:</para>
            <screen> heat stack-create -f top.yaml -e env.yaml 
</screen>
            <para>What happens when the stack is created by
                    <code>stack-create</code> is that the metadata in
                    <code>top.yaml</code> (<code>key: value</code>,
                    <code>some: more stuff</code>) gets passed into
                the resource template via the
                    <code>Fn::ResourceFacade</code> function.</para>
        </section>
        <section xml:id="Fn_MemberListToMap_Builtin_Function-d1e742">
            <title>Fn::MemberListToMap</title>
            <para><code>Fn::MemberListToMap</code> converts an AWS
                style member list into a map.</para>
            <para><emphasis role="bold"> Parameters</emphasis></para>
            <variablelist>
                <varlistentry>
                    <term><replaceable>key name:
                        string</replaceable></term>
                    <listitem>
                        <para>Specifies the name of the key (normally
                                <code>Name</code> or
                            <code>Key</code>).</para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <variablelist>
                <varlistentry>
                    <term><replaceable>value name:
                            string</replaceable></term>
                    <listitem>
                        <para>The name of the value (normally
                                <code>Value</code>).</para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <variablelist>
                <varlistentry>
                    <term><replaceable>list: A list of
                            strings</replaceable></term>
                    <listitem>
                        <para>Specifies the string to convert.</para>
                    </listitem>
                </varlistentry>
            </variablelist>
            <para><emphasis role="bold"> Usage</emphasis></para>
            <screen> {'Fn::MemberListToMap': ['Name', 'Value', ['.member.0.Name=key',
                                           '.member.0.Value=door',
                                           '.member.1.Name=color',
                                           '.member.1.Value=green']]} 
</screen>
            <para><code>Fn::MemberListToMap</code> returns the
                resulting map (in this example: <code> {'key': 'door',
                    'color': 'green'} </code> ).</para>
        </section>
    </chapter>
    <glossary>
        <title>Glossary</title>
        <glossentry xml:id="blueprint-d1e016">
            <glossterm>template</glossterm>
            <glossdef>
                <para>A &Checkmate; template is a portable file,
                    written in a user-readable language, that
                    describes how a set of resources should be
                    assembled and what software should be installed in
                    order to produce a working deployment. The
                    template specifies what resources should be used,
                    what attributes can be set, and other parameters
                    that are critical to the successful, repeatable
                    automation of a specific application
                    deployment.</para>
            </glossdef>
        </glossentry>
        <glossentry xml:id="resource-d1e019">
            <glossterm>resource</glossterm>
            <glossdef>
                <para>A resource is a template artifact that
                    represents some component of your desired
                    architecture (a Cloud Server, a group of scaled
                    Cloud Servers, a load balancer, some configuration
                    management system, and so forth).</para>
            </glossdef>
        </glossentry>
        <glossentry xml:id="DSL-d1e020">
            <glossterm>stack</glossterm>
            <glossdef>
                <para>A stack is a group of resources (servers, load
                    balancers, databases, and so forth) combined to
                    fulfill a useful purpose. Based on a template,
                    Heat orchestration engine creates an instantiated
                    set of resources (a stack) to run the application
                    framework or component specified (in the
                    template). A stack is a running instance of a
                    template. The result of creating a stack is a
                    deployment of the application framework or
                    component.</para>
            </glossdef>
        </glossentry>
    </glossary>
</book>
